[
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testPredicatedMap()",
    "annotation": "@Test",
    "code": "final Predicate\u003cObject\u003e p \u003d getPredicate();final Map\u003cObject, Object\u003e map \u003d MapUtils.predicatedMap(new HashMap\u003c\u003e(), p, p);assertTrue(\"returned object should be a PredicatedMap\", map instanceof PredicatedMap);try {\n    MapUtils.predicatedMap(null, p, p);\n    fail(\"Expecting NullPointerException for null map.\");\n} catch (final NullPointerException e) {\n    // expected\n}",
    "offset": [
      {
        "line": 75,
        "column": 37
      },
      {
        "line": 76,
        "column": 41
      },
      {
        "line": 76,
        "column": 64
      },
      {
        "line": 77,
        "column": 9
      },
      {
        "line": 79,
        "column": 13
      },
      {
        "line": 80,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 75,
          "column": 9
        },
        "assert": "final Predicate\u003cObject\u003e p \u003d getPredicate();final Map\u003cObject, Object\u003e map \u003d MapUtils.predicatedMap(new HashMap\u003c\u003e(), p, p);assertTrue(\"returned object should be a PredicatedMap\", map instanceof PredicatedMap);",
        "slice": "final Predicate\u003cObject\u003e p \u003d getPredicate();final Map\u003cObject, Object\u003e map \u003d MapUtils.predicatedMap(new HashMap\u003c\u003e(), p, p);assertTrue(\"returned object should be a PredicatedMap\", map instanceof PredicatedMap);"
      },
      {
        "testCodeLocation": {
          "line": 78,
          "column": 9
        },
        "assert": "try {\n    MapUtils.predicatedMap(null, p, p);\n    fail(\"Expecting NullPointerException for null map.\");\n} catch (final NullPointerException e) {\n    // expected\n}",
        "slice": "final Predicate\u003cObject\u003e p \u003d getPredicate();final Map\u003cObject, Object\u003e map \u003d MapUtils.predicatedMap(new HashMap\u003c\u003e(), p, p);try {\n    MapUtils.predicatedMap(null, p, p);\n    fail(\"Expecting NullPointerException for null map.\");\n} catch (final NullPointerException e) {\n    // expected\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testLazyMapFactory()",
    "annotation": "@Test",
    "code": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);assertTrue(map instanceof LazyMap);try {\n    map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), (Factory\u003cObject\u003e) null);\n    fail(\"Expecting NullPointerException for null factory\");\n} catch (final NullPointerException e) {\n    // expected\n}try {\n    map \u003d MapUtils.lazyMap((Map\u003cObject, Object\u003e) null, factory);\n    fail(\"Expecting NullPointerException for null map\");\n} catch (final NullPointerException e) {\n    // expected\n}final Transformer\u003cObject, Integer\u003e transformer \u003d TransformerUtils.asTransformer(factory);map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), transformer);assertTrue(map instanceof LazyMap);try {\n    map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), (Transformer\u003cObject, Object\u003e) null);\n    fail(\"Expecting NullPointerException for null transformer\");\n} catch (final NullPointerException e) {\n    // expected\n}try {\n    map \u003d MapUtils.lazyMap((Map\u003cObject, Object\u003e) null, transformer);\n    fail(\"Expecting NullPointerException for null map\");\n} catch (final NullPointerException e) {\n    // expected\n}",
    "offset": [
      {
        "line": 88,
        "column": 42
      },
      {
        "line": 88,
        "column": 71
      },
      {
        "line": 89,
        "column": 35
      },
      {
        "line": 89,
        "column": 52
      },
      {
        "line": 90,
        "column": 9
      },
      {
        "line": 92,
        "column": 19
      },
      {
        "line": 92,
        "column": 36
      },
      {
        "line": 93,
        "column": 13
      },
      {
        "line": 98,
        "column": 19
      },
      {
        "line": 99,
        "column": 13
      },
      {
        "line": 103,
        "column": 58
      },
      {
        "line": 104,
        "column": 15
      },
      {
        "line": 104,
        "column": 32
      },
      {
        "line": 105,
        "column": 9
      },
      {
        "line": 107,
        "column": 19
      },
      {
        "line": 107,
        "column": 36
      },
      {
        "line": 108,
        "column": 13
      },
      {
        "line": 113,
        "column": 19
      },
      {
        "line": 114,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 112,
          "column": 9
        },
        "assert": "try {\n    map \u003d MapUtils.lazyMap((Map\u003cObject, Object\u003e) null, transformer);\n    fail(\"Expecting NullPointerException for null map\");\n} catch (final NullPointerException e) {\n    // expected\n}",
        "slice": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);final Transformer\u003cObject, Integer\u003e transformer \u003d TransformerUtils.asTransformer(factory);map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), transformer);try {\n    map \u003d MapUtils.lazyMap((Map\u003cObject, Object\u003e) null, transformer);\n    fail(\"Expecting NullPointerException for null map\");\n} catch (final NullPointerException e) {\n    // expected\n}"
      },
      {
        "testCodeLocation": {
          "line": 97,
          "column": 9
        },
        "assert": "try {\n    map \u003d MapUtils.lazyMap((Map\u003cObject, Object\u003e) null, factory);\n    fail(\"Expecting NullPointerException for null map\");\n} catch (final NullPointerException e) {\n    // expected\n}",
        "slice": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);try {\n    map \u003d MapUtils.lazyMap((Map\u003cObject, Object\u003e) null, factory);\n    fail(\"Expecting NullPointerException for null map\");\n} catch (final NullPointerException e) {\n    // expected\n}"
      },
      {
        "testCodeLocation": {
          "line": 103,
          "column": 9
        },
        "assert": "final Transformer\u003cObject, Integer\u003e transformer \u003d TransformerUtils.asTransformer(factory);map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), transformer);assertTrue(map instanceof LazyMap);",
        "slice": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);final Transformer\u003cObject, Integer\u003e transformer \u003d TransformerUtils.asTransformer(factory);map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), transformer);assertTrue(map instanceof LazyMap);"
      },
      {
        "testCodeLocation": {
          "line": 88,
          "column": 9
        },
        "assert": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);assertTrue(map instanceof LazyMap);",
        "slice": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);assertTrue(map instanceof LazyMap);"
      },
      {
        "testCodeLocation": {
          "line": 106,
          "column": 9
        },
        "assert": "try {\n    map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), (Transformer\u003cObject, Object\u003e) null);\n    fail(\"Expecting NullPointerException for null transformer\");\n} catch (final NullPointerException e) {\n    // expected\n}",
        "slice": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);final Transformer\u003cObject, Integer\u003e transformer \u003d TransformerUtils.asTransformer(factory);map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), transformer);try {\n    map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), (Transformer\u003cObject, Object\u003e) null);\n    fail(\"Expecting NullPointerException for null transformer\");\n} catch (final NullPointerException e) {\n    // expected\n}"
      },
      {
        "testCodeLocation": {
          "line": 91,
          "column": 9
        },
        "assert": "try {\n    map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), (Factory\u003cObject\u003e) null);\n    fail(\"Expecting NullPointerException for null factory\");\n} catch (final NullPointerException e) {\n    // expected\n}",
        "slice": "final Factory\u003cInteger\u003e factory \u003d FactoryUtils.constantFactory(Integer.valueOf(5));Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), factory);try {\n    map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), (Factory\u003cObject\u003e) null);\n    fail(\"Expecting NullPointerException for null factory\");\n} catch (final NullPointerException e) {\n    // expected\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testLazyMapTransformer()",
    "annotation": "@Test",
    "code": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});assertEquals(0, map.size());final Integer i1 \u003d (Integer) map.get(\"5\");assertEquals(Integer.valueOf(5), i1);assertEquals(1, map.size());final Integer i2 \u003d (Integer) map.get(new String(new char[] { \u00275\u0027 }));assertEquals(Integer.valueOf(5), i2);assertEquals(1, map.size());assertSame(i1, i2);",
    "offset": [
      {
        "line": 122,
        "column": 41
      },
      {
        "line": 122,
        "column": 58
      },
      {
        "line": 122,
        "column": 75
      },
      {
        "line": 126,
        "column": 28
      },
      {
        "line": 132,
        "column": 9
      },
      {
        "line": 132,
        "column": 25
      },
      {
        "line": 133,
        "column": 38
      },
      {
        "line": 134,
        "column": 9
      },
      {
        "line": 134,
        "column": 22
      },
      {
        "line": 135,
        "column": 9
      },
      {
        "line": 135,
        "column": 25
      },
      {
        "line": 136,
        "column": 38
      },
      {
        "line": 136,
        "column": 46
      },
      {
        "line": 137,
        "column": 9
      },
      {
        "line": 137,
        "column": 22
      },
      {
        "line": 138,
        "column": 9
      },
      {
        "line": 138,
        "column": 25
      },
      {
        "line": 139,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 133,
          "column": 9
        },
        "assert": "final Integer i1 \u003d (Integer) map.get(\"5\");assertEquals(Integer.valueOf(5), i1);",
        "slice": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});final Integer i1 \u003d (Integer) map.get(\"5\");assertEquals(Integer.valueOf(5), i1);"
      },
      {
        "testCodeLocation": {
          "line": 135,
          "column": 9
        },
        "assert": "assertEquals(1, map.size());",
        "slice": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});final Integer i1 \u003d (Integer) map.get(\"5\");assertEquals(1, map.size());"
      },
      {
        "testCodeLocation": {
          "line": 136,
          "column": 9
        },
        "assert": "final Integer i2 \u003d (Integer) map.get(new String(new char[] { \u00275\u0027 }));assertEquals(Integer.valueOf(5), i2);",
        "slice": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});final Integer i1 \u003d (Integer) map.get(\"5\");final Integer i2 \u003d (Integer) map.get(new String(new char[] { \u00275\u0027 }));assertEquals(Integer.valueOf(5), i2);"
      },
      {
        "testCodeLocation": {
          "line": 122,
          "column": 9
        },
        "assert": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});assertEquals(0, map.size());",
        "slice": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});assertEquals(0, map.size());"
      },
      {
        "testCodeLocation": {
          "line": 138,
          "column": 9
        },
        "assert": "assertEquals(1, map.size());",
        "slice": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});final Integer i1 \u003d (Integer) map.get(\"5\");final Integer i2 \u003d (Integer) map.get(new String(new char[] { \u00275\u0027 }));assertEquals(1, map.size());"
      },
      {
        "testCodeLocation": {
          "line": 139,
          "column": 9
        },
        "assert": "assertSame(i1, i2);",
        "slice": "final Map\u003cObject, Object\u003e map \u003d MapUtils.lazyMap(new HashMap\u003c\u003e(), new Transformer\u003cObject, Object\u003e() {\n\n    @Override\n    public Object transform(final Object mapKey) {\n        if (mapKey instanceof String) {\n            return Integer.valueOf((String) mapKey);\n        }\n        return null;\n    }\n});final Integer i1 \u003d (Integer) map.get(\"5\");final Integer i2 \u003d (Integer) map.get(new String(new char[] { \u00275\u0027 }));assertSame(i1, i2);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testInvertMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertTrue(inKeySet.equals(outValSet));assertTrue(inValSet.equals(outKeySet));assertEquals(\"1\", out.get(\"A\"));assertEquals(\"2\", out.get(\"B\"));assertEquals(\"3\", out.get(\"C\"));assertEquals(\"4\", out.get(\"D\"));assertEquals(\"5\", out.get(\"E\"));",
    "offset": [
      {
        "line": 144,
        "column": 40
      },
      {
        "line": 145,
        "column": 9
      },
      {
        "line": 146,
        "column": 9
      },
      {
        "line": 147,
        "column": 9
      },
      {
        "line": 148,
        "column": 9
      },
      {
        "line": 149,
        "column": 9
      },
      {
        "line": 151,
        "column": 38
      },
      {
        "line": 151,
        "column": 52
      },
      {
        "line": 152,
        "column": 38
      },
      {
        "line": 152,
        "column": 52
      },
      {
        "line": 154,
        "column": 42
      },
      {
        "line": 156,
        "column": 39
      },
      {
        "line": 156,
        "column": 53
      },
      {
        "line": 157,
        "column": 39
      },
      {
        "line": 157,
        "column": 53
      },
      {
        "line": 159,
        "column": 9
      },
      {
        "line": 159,
        "column": 21
      },
      {
        "line": 160,
        "column": 9
      },
      {
        "line": 160,
        "column": 21
      },
      {
        "line": 162,
        "column": 9
      },
      {
        "line": 162,
        "column": 28
      },
      {
        "line": 163,
        "column": 9
      },
      {
        "line": 163,
        "column": 28
      },
      {
        "line": 164,
        "column": 9
      },
      {
        "line": 164,
        "column": 28
      },
      {
        "line": 165,
        "column": 9
      },
      {
        "line": 165,
        "column": 28
      },
      {
        "line": 166,
        "column": 9
      },
      {
        "line": 166,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 144,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertTrue(inKeySet.equals(outValSet));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertTrue(inKeySet.equals(outValSet));"
      },
      {
        "testCodeLocation": {
          "line": 160,
          "column": 9
        },
        "assert": "assertTrue(inValSet.equals(outKeySet));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());assertTrue(inValSet.equals(outKeySet));"
      },
      {
        "testCodeLocation": {
          "line": 162,
          "column": 9
        },
        "assert": "assertEquals(\"1\", out.get(\"A\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertEquals(\"1\", out.get(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 163,
          "column": 9
        },
        "assert": "assertEquals(\"2\", out.get(\"B\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertEquals(\"2\", out.get(\"B\"));"
      },
      {
        "testCodeLocation": {
          "line": 164,
          "column": 9
        },
        "assert": "assertEquals(\"3\", out.get(\"C\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertEquals(\"3\", out.get(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 165,
          "column": 9
        },
        "assert": "assertEquals(\"4\", out.get(\"D\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertEquals(\"4\", out.get(\"D\"));"
      },
      {
        "testCodeLocation": {
          "line": 166,
          "column": 9
        },
        "assert": "assertEquals(\"5\", out.get(\"E\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final Set\u003cString\u003e inKeySet \u003d new HashSet\u003c\u003e(in.keySet());final Set\u003cString\u003e inValSet \u003d new HashSet\u003c\u003e(in.values());final Map\u003cString, String\u003e out \u003d MapUtils.invertMap(in);final Set\u003cString\u003e outKeySet \u003d new HashSet\u003c\u003e(out.keySet());final Set\u003cString\u003e outValSet \u003d new HashSet\u003c\u003e(out.values());assertEquals(\"5\", out.get(\"E\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testPutAll_Map_array()",
    "annotation": "@Test",
    "code": "try {\n    MapUtils.putAll(null, null);\n    fail();\n} catch (final NullPointerException ex) {\n}try {\n    MapUtils.putAll(null, new Object[0]);\n    fail();\n} catch (final NullPointerException ex) {\n}Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);assertEquals(0, test.size());// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(true, test.containsKey(\"RED\"));assertEquals(\"#FF0000\", test.get(\"RED\"));assertEquals(true, test.containsKey(\"GREEN\"));assertEquals(\"#00FF00\", test.get(\"GREEN\"));assertEquals(true, test.containsKey(\"BLUE\"));assertEquals(\"#0000FF\", test.get(\"BLUE\"));assertEquals(3, test.size());try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, null, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\" }, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, {}, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(true, test.containsKey(\"RED\"));assertEquals(\"#FF0000\", test.get(\"RED\"));assertEquals(true, test.containsKey(\"GREEN\"));assertEquals(\"#00FF00\", test.get(\"GREEN\"));assertEquals(true, test.containsKey(\"BLUE\"));assertEquals(\"#0000FF\", test.get(\"BLUE\"));assertEquals(3, test.size());test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(true, test.containsKey(\"RED\"));assertEquals(\"#FF0000\", test.get(\"RED\"));assertEquals(true, test.containsKey(\"GREEN\"));assertEquals(\"#00FF00\", test.get(\"GREEN\"));assertEquals(true, test.containsKey(\"BLUE\"));assertEquals(\"#0000FF\", test.get(\"BLUE\"));assertEquals(3, test.size());test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);assertEquals(0, test.size());// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"RED\"));assertEquals(\"#FF0000\", test.get(\"RED\"));assertEquals(true, test.containsKey(\"GREEN\"));assertEquals(\"#00FF00\", test.get(\"GREEN\"));assertEquals(true, test.containsKey(\"BLUE\"));assertEquals(\"#0000FF\", test.get(\"BLUE\"));assertEquals(3, test.size());// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"RED\"));assertEquals(\"#FF0000\", test.get(\"RED\"));assertEquals(true, test.containsKey(\"GREEN\"));assertEquals(\"#00FF00\", test.get(\"GREEN\"));assertEquals(true, test.containsKey(\"BLUE\"));assertEquals(\"#0000FF\", test.get(\"BLUE\"));assertEquals(3, test.size());",
    "offset": [
      {
        "line": 172,
        "column": 13
      },
      {
        "line": 173,
        "column": 13
      },
      {
        "line": 176,
        "column": 13
      },
      {
        "line": 177,
        "column": 13
      },
      {
        "line": 180,
        "column": 36
      },
      {
        "line": 180,
        "column": 52
      },
      {
        "line": 181,
        "column": 9
      },
      {
        "line": 181,
        "column": 25
      },
      {
        "line": 184,
        "column": 16
      },
      {
        "line": 184,
        "column": 32
      },
      {
        "line": 189,
        "column": 9
      },
      {
        "line": 189,
        "column": 28
      },
      {
        "line": 190,
        "column": 9
      },
      {
        "line": 190,
        "column": 33
      },
      {
        "line": 191,
        "column": 9
      },
      {
        "line": 191,
        "column": 28
      },
      {
        "line": 192,
        "column": 9
      },
      {
        "line": 192,
        "column": 33
      },
      {
        "line": 193,
        "column": 9
      },
      {
        "line": 193,
        "column": 28
      },
      {
        "line": 194,
        "column": 9
      },
      {
        "line": 194,
        "column": 33
      },
      {
        "line": 195,
        "column": 9
      },
      {
        "line": 195,
        "column": 25
      },
      {
        "line": 198,
        "column": 13
      },
      {
        "line": 198,
        "column": 29
      },
      {
        "line": 203,
        "column": 13
      },
      {
        "line": 207,
        "column": 13
      },
      {
        "line": 207,
        "column": 29
      },
      {
        "line": 212,
        "column": 13
      },
      {
        "line": 216,
        "column": 13
      },
      {
        "line": 216,
        "column": 29
      },
      {
        "line": 221,
        "column": 13
      },
      {
        "line": 225,
        "column": 16
      },
      {
        "line": 225,
        "column": 32
      },
      {
        "line": 230,
        "column": 9
      },
      {
        "line": 230,
        "column": 28
      },
      {
        "line": 231,
        "column": 9
      },
      {
        "line": 231,
        "column": 33
      },
      {
        "line": 232,
        "column": 9
      },
      {
        "line": 232,
        "column": 28
      },
      {
        "line": 233,
        "column": 9
      },
      {
        "line": 233,
        "column": 33
      },
      {
        "line": 234,
        "column": 9
      },
      {
        "line": 234,
        "column": 28
      },
      {
        "line": 235,
        "column": 9
      },
      {
        "line": 235,
        "column": 33
      },
      {
        "line": 236,
        "column": 9
      },
      {
        "line": 236,
        "column": 25
      },
      {
        "line": 238,
        "column": 16
      },
      {
        "line": 238,
        "column": 32
      },
      {
        "line": 244,
        "column": 9
      },
      {
        "line": 244,
        "column": 28
      },
      {
        "line": 245,
        "column": 9
      },
      {
        "line": 245,
        "column": 33
      },
      {
        "line": 246,
        "column": 9
      },
      {
        "line": 246,
        "column": 28
      },
      {
        "line": 247,
        "column": 9
      },
      {
        "line": 247,
        "column": 33
      },
      {
        "line": 248,
        "column": 9
      },
      {
        "line": 248,
        "column": 28
      },
      {
        "line": 249,
        "column": 9
      },
      {
        "line": 249,
        "column": 33
      },
      {
        "line": 250,
        "column": 9
      },
      {
        "line": 250,
        "column": 25
      },
      {
        "line": 252,
        "column": 16
      },
      {
        "line": 252,
        "column": 32
      },
      {
        "line": 253,
        "column": 9
      },
      {
        "line": 253,
        "column": 25
      },
      {
        "line": 256,
        "column": 16
      },
      {
        "line": 256,
        "column": 32
      },
      {
        "line": 257,
        "column": 13
      },
      {
        "line": 258,
        "column": 13
      },
      {
        "line": 259,
        "column": 13
      },
      {
        "line": 261,
        "column": 9
      },
      {
        "line": 261,
        "column": 28
      },
      {
        "line": 262,
        "column": 9
      },
      {
        "line": 262,
        "column": 33
      },
      {
        "line": 263,
        "column": 9
      },
      {
        "line": 263,
        "column": 28
      },
      {
        "line": 264,
        "column": 9
      },
      {
        "line": 264,
        "column": 33
      },
      {
        "line": 265,
        "column": 9
      },
      {
        "line": 265,
        "column": 28
      },
      {
        "line": 266,
        "column": 9
      },
      {
        "line": 266,
        "column": 33
      },
      {
        "line": 267,
        "column": 9
      },
      {
        "line": 267,
        "column": 25
      },
      {
        "line": 270,
        "column": 16
      },
      {
        "line": 270,
        "column": 32
      },
      {
        "line": 271,
        "column": 13
      },
      {
        "line": 272,
        "column": 13
      },
      {
        "line": 273,
        "column": 13
      },
      {
        "line": 275,
        "column": 9
      },
      {
        "line": 275,
        "column": 28
      },
      {
        "line": 276,
        "column": 9
      },
      {
        "line": 276,
        "column": 33
      },
      {
        "line": 277,
        "column": 9
      },
      {
        "line": 277,
        "column": 28
      },
      {
        "line": 278,
        "column": 9
      },
      {
        "line": 278,
        "column": 33
      },
      {
        "line": 279,
        "column": 9
      },
      {
        "line": 279,
        "column": 28
      },
      {
        "line": 280,
        "column": 9
      },
      {
        "line": 280,
        "column": 33
      },
      {
        "line": 281,
        "column": 9
      },
      {
        "line": 281,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 192,
          "column": 9
        },
        "assert": "assertEquals(\"#00FF00\", test.get(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(\"#00FF00\", test.get(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 256,
          "column": 9
        },
        "assert": "// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 193,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(true, test.containsKey(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 194,
          "column": 9
        },
        "assert": "assertEquals(\"#0000FF\", test.get(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(\"#0000FF\", test.get(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 195,
          "column": 9
        },
        "assert": "assertEquals(3, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(3, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 197,
          "column": 9
        },
        "assert": "try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, null, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, null, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 262,
          "column": 9
        },
        "assert": "assertEquals(\"#FF0000\", test.get(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(\"#FF0000\", test.get(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 263,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 264,
          "column": 9
        },
        "assert": "assertEquals(\"#00FF00\", test.get(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(\"#00FF00\", test.get(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 265,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 266,
          "column": 9
        },
        "assert": "assertEquals(\"#0000FF\", test.get(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(\"#0000FF\", test.get(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 267,
          "column": 9
        },
        "assert": "assertEquals(3, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(3, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 206,
          "column": 9
        },
        "assert": "try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\" }, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\" }, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 270,
          "column": 9
        },
        "assert": "// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 276,
          "column": 9
        },
        "assert": "assertEquals(\"#FF0000\", test.get(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(\"#FF0000\", test.get(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 277,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 278,
          "column": 9
        },
        "assert": "assertEquals(\"#00FF00\", test.get(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(\"#00FF00\", test.get(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 215,
          "column": 9
        },
        "assert": "try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, {}, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });try {\n    MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, {}, { \"BLUE\", \"#0000FF\" } });\n    fail();\n} catch (final IllegalArgumentException ex) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 279,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(true, test.containsKey(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 280,
          "column": 9
        },
        "assert": "assertEquals(\"#0000FF\", test.get(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(\"#0000FF\", test.get(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 281,
          "column": 9
        },
        "assert": "assertEquals(3, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);// map entry\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultMapEntry\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultMapEntry\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultMapEntry\u003c\u003e(\"BLUE\", \"#0000FF\") });// key value\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new Object[] { new DefaultKeyValue\u003c\u003e(\"RED\", \"#FF0000\"), new DefaultKeyValue\u003c\u003e(\"GREEN\", \"#00FF00\"), new DefaultKeyValue\u003c\u003e(\"BLUE\", \"#0000FF\") });assertEquals(3, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 225,
          "column": 9
        },
        "assert": "// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(true, test.containsKey(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(true, test.containsKey(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 231,
          "column": 9
        },
        "assert": "assertEquals(\"#FF0000\", test.get(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(\"#FF0000\", test.get(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 232,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(true, test.containsKey(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 233,
          "column": 9
        },
        "assert": "assertEquals(\"#00FF00\", test.get(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(\"#00FF00\", test.get(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 234,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(true, test.containsKey(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 171,
          "column": 9
        },
        "assert": "try {\n    MapUtils.putAll(null, null);\n    fail();\n} catch (final NullPointerException ex) {\n}",
        "slice": "try {\n    MapUtils.putAll(null, null);\n    fail();\n} catch (final NullPointerException ex) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 235,
          "column": 9
        },
        "assert": "assertEquals(\"#0000FF\", test.get(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(\"#0000FF\", test.get(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 236,
          "column": 9
        },
        "assert": "assertEquals(3, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });assertEquals(3, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 238,
          "column": 9
        },
        "assert": "test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(true, test.containsKey(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(true, test.containsKey(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 175,
          "column": 9
        },
        "assert": "try {\n    MapUtils.putAll(null, new Object[0]);\n    fail();\n} catch (final NullPointerException ex) {\n}",
        "slice": "try {\n    MapUtils.putAll(null, new Object[0]);\n    fail();\n} catch (final NullPointerException ex) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 180,
          "column": 9
        },
        "assert": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);assertEquals(0, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);assertEquals(0, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 245,
          "column": 9
        },
        "assert": "assertEquals(\"#FF0000\", test.get(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(\"#FF0000\", test.get(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 246,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(true, test.containsKey(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 247,
          "column": 9
        },
        "assert": "assertEquals(\"#00FF00\", test.get(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(\"#00FF00\", test.get(\"GREEN\"));"
      },
      {
        "testCodeLocation": {
          "line": 184,
          "column": 9
        },
        "assert": "// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(true, test.containsKey(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(true, test.containsKey(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 248,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(true, test.containsKey(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 249,
          "column": 9
        },
        "assert": "assertEquals(\"#0000FF\", test.get(\"BLUE\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(\"#0000FF\", test.get(\"BLUE\"));"
      },
      {
        "testCodeLocation": {
          "line": 250,
          "column": 9
        },
        "assert": "assertEquals(3, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });assertEquals(3, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 252,
          "column": 9
        },
        "assert": "test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);assertEquals(0, test.size());",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });// flat array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\", // ignored\n\"PURPLE\" });test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), null);assertEquals(0, test.size());"
      },
      {
        "testCodeLocation": {
          "line": 190,
          "column": 9
        },
        "assert": "assertEquals(\"#FF0000\", test.get(\"RED\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(\"#FF0000\", test.get(\"RED\"));"
      },
      {
        "testCodeLocation": {
          "line": 191,
          "column": 9
        },
        "assert": "assertEquals(true, test.containsKey(\"GREEN\"));",
        "slice": "Map\u003cString, String\u003e test \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[0]);// sub array\ntest \u003d MapUtils.putAll(new HashMap\u003cString, String\u003e(), new String[][] { { \"RED\", \"#FF0000\" }, { \"GREEN\", \"#00FF00\" }, { \"BLUE\", \"#0000FF\" } });assertEquals(true, test.containsKey(\"GREEN\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testConvertResourceBundle()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final ResourceBundle b \u003d new ListResourceBundle() {\n\n    @Override\n    public Object[][] getContents() {\n        final Object[][] contents \u003d new Object[in.size()][2];\n        final Iterator\u003cString\u003e i \u003d in.keySet().iterator();\n        int n \u003d 0;\n        while (i.hasNext()) {\n            final Object key \u003d i.next();\n            final Object val \u003d in.get(key);\n            contents[n][0] \u003d key;\n            contents[n][1] \u003d val;\n            ++n;\n        }\n        return contents;\n    }\n};final Map\u003cString, Object\u003e out \u003d MapUtils.toMap(b);assertTrue(in.equals(out));",
    "offset": [
      {
        "line": 286,
        "column": 40
      },
      {
        "line": 287,
        "column": 9
      },
      {
        "line": 288,
        "column": 9
      },
      {
        "line": 289,
        "column": 9
      },
      {
        "line": 290,
        "column": 9
      },
      {
        "line": 291,
        "column": 9
      },
      {
        "line": 293,
        "column": 34
      },
      {
        "line": 296,
        "column": 57
      },
      {
        "line": 297,
        "column": 44
      },
      {
        "line": 297,
        "column": 44
      },
      {
        "line": 299,
        "column": 25
      },
      {
        "line": 300,
        "column": 40
      },
      {
        "line": 301,
        "column": 40
      },
      {
        "line": 310,
        "column": 41
      },
      {
        "line": 312,
        "column": 9
      },
      {
        "line": 312,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 286,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final ResourceBundle b \u003d new ListResourceBundle() {\n\n    @Override\n    public Object[][] getContents() {\n        final Object[][] contents \u003d new Object[in.size()][2];\n        final Iterator\u003cString\u003e i \u003d in.keySet().iterator();\n        int n \u003d 0;\n        while (i.hasNext()) {\n            final Object key \u003d i.next();\n            final Object val \u003d in.get(key);\n            contents[n][0] \u003d key;\n            contents[n][1] \u003d val;\n            ++n;\n        }\n        return contents;\n    }\n};final Map\u003cString, Object\u003e out \u003d MapUtils.toMap(b);assertTrue(in.equals(out));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e(5, 1);in.put(\"1\", \"A\");in.put(\"2\", \"B\");in.put(\"3\", \"C\");in.put(\"4\", \"D\");in.put(\"5\", \"E\");final ResourceBundle b \u003d new ListResourceBundle() {\n\n    @Override\n    public Object[][] getContents() {\n        final Object[][] contents \u003d new Object[in.size()][2];\n        final Iterator\u003cString\u003e i \u003d in.keySet().iterator();\n        int n \u003d 0;\n        while (i.hasNext()) {\n            final Object key \u003d i.next();\n            final Object val \u003d in.get(key);\n            contents[n][0] \u003d key;\n            contents[n][1] \u003d val;\n            ++n;\n        }\n        return contents;\n    }\n};final Map\u003cString, Object\u003e out \u003d MapUtils.toMap(b);assertTrue(in.equals(out));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugAndVerbosePrintCasting()",
    "annotation": "@Test",
    "code": "final Map\u003cInteger, String\u003e inner \u003d new HashMap\u003c\u003e(2, 1);inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new HashMap\u003c\u003e(2, 1);outer.put(0, inner);outer.put(1, \"A\");final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);try {\n    MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n} catch (final ClassCastException e) {\n    fail(\"No Casting should be occurring!\");\n}",
    "offset": [
      {
        "line": 317,
        "column": 44
      },
      {
        "line": 318,
        "column": 9
      },
      {
        "line": 319,
        "column": 9
      },
      {
        "line": 321,
        "column": 44
      },
      {
        "line": 322,
        "column": 9
      },
      {
        "line": 323,
        "column": 9
      },
      {
        "line": 325,
        "column": 43
      },
      {
        "line": 326,
        "column": 38
      },
      {
        "line": 329,
        "column": 13
      },
      {
        "line": 331,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 317,
          "column": 9
        },
        "assert": "final Map\u003cInteger, String\u003e inner \u003d new HashMap\u003c\u003e(2, 1);inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new HashMap\u003c\u003e(2, 1);outer.put(0, inner);outer.put(1, \"A\");final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);try {\n    MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n} catch (final ClassCastException e) {\n    fail(\"No Casting should be occurring!\");\n}",
        "slice": "final Map\u003cInteger, String\u003e inner \u003d new HashMap\u003c\u003e(2, 1);inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new HashMap\u003c\u003e(2, 1);outer.put(0, inner);outer.put(1, \"A\");final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);try {\n    MapUtils.debugPrint(outPrint, \"Print Map\", outer);\n} catch (final ClassCastException e) {\n    fail(\"No Casting should be occurring!\");\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugAndVerbosePrintNullMap()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";outPrint.println(LABEL + \" \u003d \" + String.valueOf((Object) null));final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, LABEL, null);assertEquals(EXPECTED_OUT, out.toString());out.reset();MapUtils.verbosePrint(outPrint, LABEL, null);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 337,
        "column": 43
      },
      {
        "line": 338,
        "column": 38
      },
      {
        "line": 341,
        "column": 9
      },
      {
        "line": 341,
        "column": 42
      },
      {
        "line": 342,
        "column": 37
      },
      {
        "line": 344,
        "column": 9
      },
      {
        "line": 346,
        "column": 9
      },
      {
        "line": 347,
        "column": 9
      },
      {
        "line": 347,
        "column": 36
      },
      {
        "line": 349,
        "column": 9
      },
      {
        "line": 351,
        "column": 9
      },
      {
        "line": 352,
        "column": 9
      },
      {
        "line": 352,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 337,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";outPrint.println(LABEL + \" \u003d \" + String.valueOf((Object) null));final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, LABEL, null);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";outPrint.println(LABEL + \" \u003d \" + String.valueOf((Object) null));final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, LABEL, null);assertEquals(EXPECTED_OUT, out.toString());"
      },
      {
        "testCodeLocation": {
          "line": 349,
          "column": 9
        },
        "assert": "out.reset();MapUtils.verbosePrint(outPrint, LABEL, null);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";outPrint.println(LABEL + \" \u003d \" + String.valueOf((Object) null));final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, LABEL, null);out.reset();MapUtils.verbosePrint(outPrint, LABEL, null);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullLabel()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(2, \"B\");map.put(3, \"C\");map.put(4, null);outPrint.println(\"{\");outPrint.println(INDENT + \"2 \u003d B\");outPrint.println(INDENT + \"3 \u003d C\");outPrint.println(INDENT + \"4 \u003d null\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 357,
        "column": 43
      },
      {
        "line": 358,
        "column": 38
      },
      {
        "line": 362,
        "column": 42
      },
      {
        "line": 363,
        "column": 9
      },
      {
        "line": 364,
        "column": 9
      },
      {
        "line": 365,
        "column": 9
      },
      {
        "line": 367,
        "column": 9
      },
      {
        "line": 368,
        "column": 9
      },
      {
        "line": 369,
        "column": 9
      },
      {
        "line": 370,
        "column": 9
      },
      {
        "line": 371,
        "column": 9
      },
      {
        "line": 372,
        "column": 37
      },
      {
        "line": 373,
        "column": 9
      },
      {
        "line": 375,
        "column": 9
      },
      {
        "line": 376,
        "column": 9
      },
      {
        "line": 376,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 357,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(2, \"B\");map.put(3, \"C\");map.put(4, null);outPrint.println(\"{\");outPrint.println(INDENT + \"2 \u003d B\");outPrint.println(INDENT + \"3 \u003d C\");outPrint.println(INDENT + \"4 \u003d null\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(2, \"B\");map.put(3, \"C\");map.put(4, null);outPrint.println(\"{\");outPrint.println(INDENT + \"2 \u003d B\");outPrint.println(INDENT + \"3 \u003d C\");outPrint.println(INDENT + \"4 \u003d null\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintNullLabel()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(2, \"B\");map.put(3, \"C\");map.put(4, null);outPrint.println(\"{\");outPrint.println(INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + \"3 \u003d C \" + String.class.getName());outPrint.println(INDENT + \"4 \u003d null\");outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 381,
        "column": 43
      },
      {
        "line": 382,
        "column": 38
      },
      {
        "line": 386,
        "column": 42
      },
      {
        "line": 387,
        "column": 9
      },
      {
        "line": 388,
        "column": 9
      },
      {
        "line": 389,
        "column": 9
      },
      {
        "line": 391,
        "column": 9
      },
      {
        "line": 392,
        "column": 9
      },
      {
        "line": 392,
        "column": 46
      },
      {
        "line": 393,
        "column": 9
      },
      {
        "line": 393,
        "column": 46
      },
      {
        "line": 394,
        "column": 9
      },
      {
        "line": 395,
        "column": 9
      },
      {
        "line": 395,
        "column": 33
      },
      {
        "line": 396,
        "column": 37
      },
      {
        "line": 397,
        "column": 9
      },
      {
        "line": 399,
        "column": 9
      },
      {
        "line": 400,
        "column": 9
      },
      {
        "line": 400,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 381,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(2, \"B\");map.put(3, \"C\");map.put(4, null);outPrint.println(\"{\");outPrint.println(INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + \"3 \u003d C \" + String.class.getName());outPrint.println(INDENT + \"4 \u003d null\");outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(2, \"B\");map.put(3, \"C\");map.put(4, null);outPrint.println(\"{\");outPrint.println(INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + \"3 \u003d C \" + String.class.getName());outPrint.println(INDENT + \"4 \u003d null\");outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullLabelAndMap()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);outPrint.println(\"null\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, null);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 405,
        "column": 43
      },
      {
        "line": 406,
        "column": 38
      },
      {
        "line": 408,
        "column": 9
      },
      {
        "line": 409,
        "column": 37
      },
      {
        "line": 410,
        "column": 9
      },
      {
        "line": 412,
        "column": 9
      },
      {
        "line": 413,
        "column": 9
      },
      {
        "line": 413,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 405,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);outPrint.println(\"null\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, null);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);outPrint.println(\"null\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, null);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintNullLabelAndMap()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);outPrint.println(\"null\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, null);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 418,
        "column": 43
      },
      {
        "line": 419,
        "column": 38
      },
      {
        "line": 421,
        "column": 9
      },
      {
        "line": 422,
        "column": 37
      },
      {
        "line": 423,
        "column": 9
      },
      {
        "line": 425,
        "column": 9
      },
      {
        "line": 426,
        "column": 9
      },
      {
        "line": 426,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 418,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);outPrint.println(\"null\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, null);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);outPrint.println(\"null\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, null);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullStream()",
    "annotation": "@Test",
    "code": "try {\n    MapUtils.verbosePrint(null, \"Map\", new HashMap\u003c\u003e());\n    fail(\"Should generate NullPointerException\");\n} catch (final NullPointerException expected) {\n}",
    "offset": [
      {
        "line": 432,
        "column": 13
      },
      {
        "line": 432,
        "column": 48
      },
      {
        "line": 433,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 431,
          "column": 9
        },
        "assert": "try {\n    MapUtils.verbosePrint(null, \"Map\", new HashMap\u003c\u003e());\n    fail(\"Should generate NullPointerException\");\n} catch (final NullPointerException expected) {\n}",
        "slice": "try {\n    MapUtils.verbosePrint(null, \"Map\", new HashMap\u003c\u003e());\n    fail(\"Should generate NullPointerException\");\n} catch (final NullPointerException expected) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintNullStream()",
    "annotation": "@Test",
    "code": "try {\n    MapUtils.debugPrint(null, \"Map\", new HashMap\u003c\u003e());\n    fail(\"Should generate NullPointerException\");\n} catch (final NullPointerException expected) {\n}",
    "offset": [
      {
        "line": 441,
        "column": 13
      },
      {
        "line": 441,
        "column": 46
      },
      {
        "line": 442,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 440,
          "column": 9
        },
        "assert": "try {\n    MapUtils.debugPrint(null, \"Map\", new HashMap\u003c\u003e());\n    fail(\"Should generate NullPointerException\");\n} catch (final NullPointerException expected) {\n}",
        "slice": "try {\n    MapUtils.debugPrint(null, \"Map\", new HashMap\u003c\u003e());\n    fail(\"Should generate NullPointerException\");\n} catch (final NullPointerException expected) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintNullKey()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, String\u003e map \u003d new HashMap\u003c\u003e();map.put(null, \"A\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d A \" + String.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 449,
        "column": 43
      },
      {
        "line": 450,
        "column": 38
      },
      {
        "line": 454,
        "column": 41
      },
      {
        "line": 455,
        "column": 9
      },
      {
        "line": 457,
        "column": 9
      },
      {
        "line": 458,
        "column": 9
      },
      {
        "line": 458,
        "column": 49
      },
      {
        "line": 459,
        "column": 9
      },
      {
        "line": 459,
        "column": 33
      },
      {
        "line": 460,
        "column": 37
      },
      {
        "line": 461,
        "column": 9
      },
      {
        "line": 463,
        "column": 9
      },
      {
        "line": 464,
        "column": 9
      },
      {
        "line": 464,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 449,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, String\u003e map \u003d new HashMap\u003c\u003e();map.put(null, \"A\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d A \" + String.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, String\u003e map \u003d new HashMap\u003c\u003e();map.put(null, \"A\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d A \" + String.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullKey()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, String\u003e map \u003d new HashMap\u003c\u003e();map.put(null, \"A\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d A\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 469,
        "column": 43
      },
      {
        "line": 470,
        "column": 38
      },
      {
        "line": 474,
        "column": 41
      },
      {
        "line": 475,
        "column": 9
      },
      {
        "line": 477,
        "column": 9
      },
      {
        "line": 478,
        "column": 9
      },
      {
        "line": 479,
        "column": 9
      },
      {
        "line": 480,
        "column": 37
      },
      {
        "line": 481,
        "column": 9
      },
      {
        "line": 483,
        "column": 9
      },
      {
        "line": 484,
        "column": 9
      },
      {
        "line": 484,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 469,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, String\u003e map \u003d new HashMap\u003c\u003e();map.put(null, \"A\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d A\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, String\u003e map \u003d new HashMap\u003c\u003e();map.put(null, \"A\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d A\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintNullKeyToMap1()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Map\u003c?, ?\u003e\u003e map \u003d new HashMap\u003c\u003e();map.put(null, map);outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d (this Map) \" + HashMap.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 489,
        "column": 43
      },
      {
        "line": 490,
        "column": 38
      },
      {
        "line": 494,
        "column": 44
      },
      {
        "line": 495,
        "column": 9
      },
      {
        "line": 497,
        "column": 9
      },
      {
        "line": 498,
        "column": 9
      },
      {
        "line": 498,
        "column": 58
      },
      {
        "line": 499,
        "column": 9
      },
      {
        "line": 499,
        "column": 33
      },
      {
        "line": 500,
        "column": 37
      },
      {
        "line": 501,
        "column": 9
      },
      {
        "line": 503,
        "column": 9
      },
      {
        "line": 504,
        "column": 9
      },
      {
        "line": 504,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 489,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Map\u003c?, ?\u003e\u003e map \u003d new HashMap\u003c\u003e();map.put(null, map);outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d (this Map) \" + HashMap.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Map\u003c?, ?\u003e\u003e map \u003d new HashMap\u003c\u003e();map.put(null, map);outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d (this Map) \" + HashMap.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullKeyToMap1()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Map\u003c?, ?\u003e\u003e map \u003d new HashMap\u003c\u003e();map.put(null, map);outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d (this Map)\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 509,
        "column": 43
      },
      {
        "line": 510,
        "column": 38
      },
      {
        "line": 514,
        "column": 44
      },
      {
        "line": 515,
        "column": 9
      },
      {
        "line": 517,
        "column": 9
      },
      {
        "line": 518,
        "column": 9
      },
      {
        "line": 519,
        "column": 9
      },
      {
        "line": 520,
        "column": 37
      },
      {
        "line": 521,
        "column": 9
      },
      {
        "line": 523,
        "column": 9
      },
      {
        "line": 524,
        "column": 9
      },
      {
        "line": 524,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 509,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Map\u003c?, ?\u003e\u003e map \u003d new HashMap\u003c\u003e();map.put(null, map);outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d (this Map)\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Map\u003c?, ?\u003e\u003e map \u003d new HashMap\u003c\u003e();map.put(null, map);outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d (this Map)\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintNullKeyToMap2()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();final Map\u003cObject, Object\u003e map2 \u003d new HashMap\u003c\u003e();map.put(null, map2);map2.put(\"2\", \"B\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + \"} \" + HashMap.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 529,
        "column": 43
      },
      {
        "line": 530,
        "column": 38
      },
      {
        "line": 534,
        "column": 41
      },
      {
        "line": 535,
        "column": 41
      },
      {
        "line": 536,
        "column": 9
      },
      {
        "line": 537,
        "column": 9
      },
      {
        "line": 539,
        "column": 9
      },
      {
        "line": 540,
        "column": 9
      },
      {
        "line": 541,
        "column": 9
      },
      {
        "line": 542,
        "column": 9
      },
      {
        "line": 542,
        "column": 55
      },
      {
        "line": 543,
        "column": 9
      },
      {
        "line": 543,
        "column": 42
      },
      {
        "line": 544,
        "column": 9
      },
      {
        "line": 544,
        "column": 33
      },
      {
        "line": 545,
        "column": 37
      },
      {
        "line": 546,
        "column": 9
      },
      {
        "line": 548,
        "column": 9
      },
      {
        "line": 549,
        "column": 9
      },
      {
        "line": 549,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 529,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();final Map\u003cObject, Object\u003e map2 \u003d new HashMap\u003c\u003e();map.put(null, map2);map2.put(\"2\", \"B\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + \"} \" + HashMap.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();final Map\u003cObject, Object\u003e map2 \u003d new HashMap\u003c\u003e();map.put(null, map2);map2.put(\"2\", \"B\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + \"} \" + HashMap.class.getName());outPrint.println(\"} \" + HashMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintNullKeyToMap2()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();final Map\u003cObject, Object\u003e map2 \u003d new HashMap\u003c\u003e();map.put(null, map2);map2.put(\"2\", \"B\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + \"}\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 554,
        "column": 43
      },
      {
        "line": 555,
        "column": 38
      },
      {
        "line": 559,
        "column": 41
      },
      {
        "line": 560,
        "column": 41
      },
      {
        "line": 561,
        "column": 9
      },
      {
        "line": 562,
        "column": 9
      },
      {
        "line": 564,
        "column": 9
      },
      {
        "line": 565,
        "column": 9
      },
      {
        "line": 566,
        "column": 9
      },
      {
        "line": 567,
        "column": 9
      },
      {
        "line": 568,
        "column": 9
      },
      {
        "line": 569,
        "column": 9
      },
      {
        "line": 570,
        "column": 37
      },
      {
        "line": 571,
        "column": 9
      },
      {
        "line": 573,
        "column": 9
      },
      {
        "line": 574,
        "column": 9
      },
      {
        "line": 574,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 554,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();final Map\u003cObject, Object\u003e map2 \u003d new HashMap\u003c\u003e();map.put(null, map2);map2.put(\"2\", \"B\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + \"}\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String INDENT \u003d \"    \";final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();final Map\u003cObject, Object\u003e map2 \u003d new HashMap\u003c\u003e();map.put(null, map2);map2.put(\"2\", \"B\");outPrint.println(\"{\");outPrint.println(INDENT + \"null \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + \"}\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, null, map);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrint()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A\");outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + INDENT + \"3 \u003d C\");outPrint.println(INDENT + \"}\");outPrint.println(INDENT + \"7 \u003d (this Map)\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e inner \u003d new TreeMap\u003c\u003e();inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new TreeMap\u003c\u003e();outer.put(1, inner);outer.put(0, \"A\");outer.put(7, outer);MapUtils.verbosePrint(outPrint, \"Print Map\", outer);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 579,
        "column": 43
      },
      {
        "line": 580,
        "column": 38
      },
      {
        "line": 585,
        "column": 9
      },
      {
        "line": 586,
        "column": 9
      },
      {
        "line": 587,
        "column": 9
      },
      {
        "line": 588,
        "column": 9
      },
      {
        "line": 589,
        "column": 9
      },
      {
        "line": 590,
        "column": 9
      },
      {
        "line": 591,
        "column": 9
      },
      {
        "line": 592,
        "column": 9
      },
      {
        "line": 593,
        "column": 9
      },
      {
        "line": 594,
        "column": 9
      },
      {
        "line": 596,
        "column": 37
      },
      {
        "line": 598,
        "column": 9
      },
      {
        "line": 600,
        "column": 44
      },
      {
        "line": 601,
        "column": 9
      },
      {
        "line": 602,
        "column": 9
      },
      {
        "line": 604,
        "column": 44
      },
      {
        "line": 605,
        "column": 9
      },
      {
        "line": 606,
        "column": 9
      },
      {
        "line": 607,
        "column": 9
      },
      {
        "line": 609,
        "column": 9
      },
      {
        "line": 610,
        "column": 9
      },
      {
        "line": 610,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 579,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A\");outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + INDENT + \"3 \u003d C\");outPrint.println(INDENT + \"}\");outPrint.println(INDENT + \"7 \u003d (this Map)\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e inner \u003d new TreeMap\u003c\u003e();inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new TreeMap\u003c\u003e();outer.put(1, inner);outer.put(0, \"A\");outer.put(7, outer);MapUtils.verbosePrint(outPrint, \"Print Map\", outer);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A\");outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + INDENT + \"3 \u003d C\");outPrint.println(INDENT + \"}\");outPrint.println(INDENT + \"7 \u003d (this Map)\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e inner \u003d new TreeMap\u003c\u003e();inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new TreeMap\u003c\u003e();outer.put(1, inner);outer.put(0, \"A\");outer.put(7, outer);MapUtils.verbosePrint(outPrint, \"Print Map\", outer);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrint()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A \" + String.class.getName());outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + INDENT + \"3 \u003d C \" + String.class.getName());outPrint.println(INDENT + \"} \" + TreeMap.class.getName());outPrint.println(INDENT + \"7 \u003d (this Map) \" + TreeMap.class.getName());outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e inner \u003d new TreeMap\u003c\u003e();inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new TreeMap\u003c\u003e();outer.put(1, inner);outer.put(0, \"A\");outer.put(7, outer);MapUtils.debugPrint(outPrint, \"Print Map\", outer);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 615,
        "column": 43
      },
      {
        "line": 616,
        "column": 38
      },
      {
        "line": 621,
        "column": 9
      },
      {
        "line": 622,
        "column": 9
      },
      {
        "line": 623,
        "column": 9
      },
      {
        "line": 623,
        "column": 46
      },
      {
        "line": 624,
        "column": 9
      },
      {
        "line": 625,
        "column": 9
      },
      {
        "line": 626,
        "column": 9
      },
      {
        "line": 626,
        "column": 55
      },
      {
        "line": 627,
        "column": 9
      },
      {
        "line": 627,
        "column": 55
      },
      {
        "line": 628,
        "column": 9
      },
      {
        "line": 628,
        "column": 42
      },
      {
        "line": 629,
        "column": 9
      },
      {
        "line": 629,
        "column": 55
      },
      {
        "line": 630,
        "column": 9
      },
      {
        "line": 630,
        "column": 33
      },
      {
        "line": 632,
        "column": 37
      },
      {
        "line": 634,
        "column": 9
      },
      {
        "line": 636,
        "column": 44
      },
      {
        "line": 637,
        "column": 9
      },
      {
        "line": 638,
        "column": 9
      },
      {
        "line": 640,
        "column": 44
      },
      {
        "line": 641,
        "column": 9
      },
      {
        "line": 642,
        "column": 9
      },
      {
        "line": 643,
        "column": 9
      },
      {
        "line": 645,
        "column": 9
      },
      {
        "line": 646,
        "column": 9
      },
      {
        "line": 646,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 615,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A \" + String.class.getName());outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + INDENT + \"3 \u003d C \" + String.class.getName());outPrint.println(INDENT + \"} \" + TreeMap.class.getName());outPrint.println(INDENT + \"7 \u003d (this Map) \" + TreeMap.class.getName());outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e inner \u003d new TreeMap\u003c\u003e();inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new TreeMap\u003c\u003e();outer.put(1, inner);outer.put(0, \"A\");outer.put(7, outer);MapUtils.debugPrint(outPrint, \"Print Map\", outer);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A \" + String.class.getName());outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + INDENT + \"3 \u003d C \" + String.class.getName());outPrint.println(INDENT + \"} \" + TreeMap.class.getName());outPrint.println(INDENT + \"7 \u003d (this Map) \" + TreeMap.class.getName());outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, String\u003e inner \u003d new TreeMap\u003c\u003e();inner.put(2, \"B\");inner.put(3, \"C\");final Map\u003cInteger, Object\u003e outer \u003d new TreeMap\u003c\u003e();outer.put(1, inner);outer.put(0, \"A\");outer.put(7, outer);MapUtils.debugPrint(outPrint, \"Print Map\", outer);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testVerbosePrintSelfReference()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, Object\u003e grandfather \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e father \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e son \u003d new TreeMap\u003c\u003e();grandfather.put(0, \"A\");grandfather.put(1, father);father.put(2, \"B\");father.put(3, grandfather);father.put(4, son);son.put(5, \"C\");son.put(6, grandfather);son.put(7, father);outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A\");outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + INDENT + \"3 \u003d (ancestor[0] Map)\");outPrint.println(INDENT + INDENT + \"4 \u003d \");outPrint.println(INDENT + INDENT + \"{\");outPrint.println(INDENT + INDENT + INDENT + \"5 \u003d C\");outPrint.println(INDENT + INDENT + INDENT + \"6 \u003d (ancestor[1] Map)\");outPrint.println(INDENT + INDENT + INDENT + \"7 \u003d (ancestor[0] Map)\");outPrint.println(INDENT + INDENT + \"}\");outPrint.println(INDENT + \"}\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, \"Print Map\", grandfather);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 651,
        "column": 43
      },
      {
        "line": 652,
        "column": 38
      },
      {
        "line": 657,
        "column": 50
      },
      {
        "line": 658,
        "column": 45
      },
      {
        "line": 659,
        "column": 45
      },
      {
        "line": 661,
        "column": 9
      },
      {
        "line": 662,
        "column": 9
      },
      {
        "line": 664,
        "column": 9
      },
      {
        "line": 665,
        "column": 9
      },
      {
        "line": 666,
        "column": 9
      },
      {
        "line": 668,
        "column": 9
      },
      {
        "line": 669,
        "column": 9
      },
      {
        "line": 670,
        "column": 9
      },
      {
        "line": 672,
        "column": 9
      },
      {
        "line": 673,
        "column": 9
      },
      {
        "line": 674,
        "column": 9
      },
      {
        "line": 675,
        "column": 9
      },
      {
        "line": 676,
        "column": 9
      },
      {
        "line": 677,
        "column": 9
      },
      {
        "line": 678,
        "column": 9
      },
      {
        "line": 679,
        "column": 9
      },
      {
        "line": 680,
        "column": 9
      },
      {
        "line": 681,
        "column": 9
      },
      {
        "line": 682,
        "column": 9
      },
      {
        "line": 683,
        "column": 9
      },
      {
        "line": 684,
        "column": 9
      },
      {
        "line": 685,
        "column": 9
      },
      {
        "line": 686,
        "column": 9
      },
      {
        "line": 688,
        "column": 37
      },
      {
        "line": 690,
        "column": 9
      },
      {
        "line": 691,
        "column": 9
      },
      {
        "line": 693,
        "column": 9
      },
      {
        "line": 693,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 651,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, Object\u003e grandfather \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e father \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e son \u003d new TreeMap\u003c\u003e();grandfather.put(0, \"A\");grandfather.put(1, father);father.put(2, \"B\");father.put(3, grandfather);father.put(4, son);son.put(5, \"C\");son.put(6, grandfather);son.put(7, father);outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A\");outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + INDENT + \"3 \u003d (ancestor[0] Map)\");outPrint.println(INDENT + INDENT + \"4 \u003d \");outPrint.println(INDENT + INDENT + \"{\");outPrint.println(INDENT + INDENT + INDENT + \"5 \u003d C\");outPrint.println(INDENT + INDENT + INDENT + \"6 \u003d (ancestor[1] Map)\");outPrint.println(INDENT + INDENT + INDENT + \"7 \u003d (ancestor[0] Map)\");outPrint.println(INDENT + INDENT + \"}\");outPrint.println(INDENT + \"}\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, \"Print Map\", grandfather);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, Object\u003e grandfather \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e father \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e son \u003d new TreeMap\u003c\u003e();grandfather.put(0, \"A\");grandfather.put(1, father);father.put(2, \"B\");father.put(3, grandfather);father.put(4, son);son.put(5, \"C\");son.put(6, grandfather);son.put(7, father);outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A\");outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B\");outPrint.println(INDENT + INDENT + \"3 \u003d (ancestor[0] Map)\");outPrint.println(INDENT + INDENT + \"4 \u003d \");outPrint.println(INDENT + INDENT + \"{\");outPrint.println(INDENT + INDENT + INDENT + \"5 \u003d C\");outPrint.println(INDENT + INDENT + INDENT + \"6 \u003d (ancestor[1] Map)\");outPrint.println(INDENT + INDENT + INDENT + \"7 \u003d (ancestor[0] Map)\");outPrint.println(INDENT + INDENT + \"}\");outPrint.println(INDENT + \"}\");outPrint.println(\"}\");final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.verbosePrint(outPrint, \"Print Map\", grandfather);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testDebugPrintSelfReference()",
    "annotation": "@Test",
    "code": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, Object\u003e grandfather \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e father \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e son \u003d new TreeMap\u003c\u003e();grandfather.put(0, \"A\");grandfather.put(1, father);father.put(2, \"B\");father.put(3, grandfather);father.put(4, son);son.put(5, \"C\");son.put(6, grandfather);son.put(7, father);outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A \" + String.class.getName());outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + INDENT + \"3 \u003d (ancestor[0] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + \"4 \u003d \");outPrint.println(INDENT + INDENT + \"{\");outPrint.println(INDENT + INDENT + INDENT + \"5 \u003d C \" + String.class.getName());outPrint.println(INDENT + INDENT + INDENT + \"6 \u003d (ancestor[1] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + INDENT + \"7 \u003d (ancestor[0] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + \"} \" + TreeMap.class.getName());outPrint.println(INDENT + \"} \" + TreeMap.class.getName());outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, \"Print Map\", grandfather);assertEquals(EXPECTED_OUT, out.toString());",
    "offset": [
      {
        "line": 698,
        "column": 43
      },
      {
        "line": 699,
        "column": 38
      },
      {
        "line": 704,
        "column": 50
      },
      {
        "line": 705,
        "column": 45
      },
      {
        "line": 706,
        "column": 45
      },
      {
        "line": 708,
        "column": 9
      },
      {
        "line": 709,
        "column": 9
      },
      {
        "line": 711,
        "column": 9
      },
      {
        "line": 712,
        "column": 9
      },
      {
        "line": 713,
        "column": 9
      },
      {
        "line": 715,
        "column": 9
      },
      {
        "line": 716,
        "column": 9
      },
      {
        "line": 717,
        "column": 9
      },
      {
        "line": 719,
        "column": 9
      },
      {
        "line": 720,
        "column": 9
      },
      {
        "line": 721,
        "column": 9
      },
      {
        "line": 721,
        "column": 46
      },
      {
        "line": 722,
        "column": 9
      },
      {
        "line": 723,
        "column": 9
      },
      {
        "line": 724,
        "column": 9
      },
      {
        "line": 724,
        "column": 55
      },
      {
        "line": 725,
        "column": 9
      },
      {
        "line": 725,
        "column": 71
      },
      {
        "line": 726,
        "column": 9
      },
      {
        "line": 727,
        "column": 9
      },
      {
        "line": 728,
        "column": 9
      },
      {
        "line": 728,
        "column": 64
      },
      {
        "line": 729,
        "column": 9
      },
      {
        "line": 729,
        "column": 80
      },
      {
        "line": 730,
        "column": 9
      },
      {
        "line": 730,
        "column": 80
      },
      {
        "line": 731,
        "column": 9
      },
      {
        "line": 731,
        "column": 51
      },
      {
        "line": 732,
        "column": 9
      },
      {
        "line": 732,
        "column": 42
      },
      {
        "line": 733,
        "column": 9
      },
      {
        "line": 733,
        "column": 33
      },
      {
        "line": 735,
        "column": 37
      },
      {
        "line": 737,
        "column": 9
      },
      {
        "line": 738,
        "column": 9
      },
      {
        "line": 740,
        "column": 9
      },
      {
        "line": 740,
        "column": 36
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 698,
          "column": 9
        },
        "assert": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, Object\u003e grandfather \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e father \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e son \u003d new TreeMap\u003c\u003e();grandfather.put(0, \"A\");grandfather.put(1, father);father.put(2, \"B\");father.put(3, grandfather);father.put(4, son);son.put(5, \"C\");son.put(6, grandfather);son.put(7, father);outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A \" + String.class.getName());outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + INDENT + \"3 \u003d (ancestor[0] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + \"4 \u003d \");outPrint.println(INDENT + INDENT + \"{\");outPrint.println(INDENT + INDENT + INDENT + \"5 \u003d C \" + String.class.getName());outPrint.println(INDENT + INDENT + INDENT + \"6 \u003d (ancestor[1] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + INDENT + \"7 \u003d (ancestor[0] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + \"} \" + TreeMap.class.getName());outPrint.println(INDENT + \"} \" + TreeMap.class.getName());outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, \"Print Map\", grandfather);assertEquals(EXPECTED_OUT, out.toString());",
        "slice": "final ByteArrayOutputStream out \u003d new ByteArrayOutputStream();final PrintStream outPrint \u003d new PrintStream(out);final String LABEL \u003d \"Print Map\";final String INDENT \u003d \"    \";// treeMap guarantees order across JDKs for test\nfinal Map\u003cInteger, Object\u003e grandfather \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e father \u003d new TreeMap\u003c\u003e();final Map\u003cInteger, Object\u003e son \u003d new TreeMap\u003c\u003e();grandfather.put(0, \"A\");grandfather.put(1, father);father.put(2, \"B\");father.put(3, grandfather);father.put(4, son);son.put(5, \"C\");son.put(6, grandfather);son.put(7, father);outPrint.println(LABEL + \" \u003d \");outPrint.println(\"{\");outPrint.println(INDENT + \"0 \u003d A \" + String.class.getName());outPrint.println(INDENT + \"1 \u003d \");outPrint.println(INDENT + \"{\");outPrint.println(INDENT + INDENT + \"2 \u003d B \" + String.class.getName());outPrint.println(INDENT + INDENT + \"3 \u003d (ancestor[0] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + \"4 \u003d \");outPrint.println(INDENT + INDENT + \"{\");outPrint.println(INDENT + INDENT + INDENT + \"5 \u003d C \" + String.class.getName());outPrint.println(INDENT + INDENT + INDENT + \"6 \u003d (ancestor[1] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + INDENT + \"7 \u003d (ancestor[0] Map) \" + TreeMap.class.getName());outPrint.println(INDENT + INDENT + \"} \" + TreeMap.class.getName());outPrint.println(INDENT + \"} \" + TreeMap.class.getName());outPrint.println(\"} \" + TreeMap.class.getName());final String EXPECTED_OUT \u003d out.toString();out.reset();MapUtils.debugPrint(outPrint, \"Print Map\", grandfather);assertEquals(EXPECTED_OUT, out.toString());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testEmptyIfNull()",
    "annotation": "@Test",
    "code": "assertTrue(MapUtils.emptyIfNull(null).isEmpty());final Map\u003cLong, Long\u003e map \u003d new HashMap\u003c\u003e();assertSame(map, MapUtils.emptyIfNull(map));",
    "offset": [
      {
        "line": 747,
        "column": 9
      },
      {
        "line": 747,
        "column": 20
      },
      {
        "line": 747,
        "column": 20
      },
      {
        "line": 749,
        "column": 37
      },
      {
        "line": 750,
        "column": 9
      },
      {
        "line": 750,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 747,
          "column": 9
        },
        "assert": "assertTrue(MapUtils.emptyIfNull(null).isEmpty());",
        "slice": "assertTrue(MapUtils.emptyIfNull(null).isEmpty());"
      },
      {
        "testCodeLocation": {
          "line": 749,
          "column": 9
        },
        "assert": "final Map\u003cLong, Long\u003e map \u003d new HashMap\u003c\u003e();assertSame(map, MapUtils.emptyIfNull(map));",
        "slice": "final Map\u003cLong, Long\u003e map \u003d new HashMap\u003c\u003e();assertSame(map, MapUtils.emptyIfNull(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIsEmptyWithEmptyMap()",
    "annotation": "@Test",
    "code": "final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();assertEquals(true, MapUtils.isEmpty(map));",
    "offset": [
      {
        "line": 755,
        "column": 41
      },
      {
        "line": 756,
        "column": 9
      },
      {
        "line": 756,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 755,
          "column": 9
        },
        "assert": "final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();assertEquals(true, MapUtils.isEmpty(map));",
        "slice": "final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();assertEquals(true, MapUtils.isEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIsEmptyWithNonEmptyMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"item\", \"value\");assertEquals(false, MapUtils.isEmpty(map));",
    "offset": [
      {
        "line": 761,
        "column": 41
      },
      {
        "line": 762,
        "column": 9
      },
      {
        "line": 763,
        "column": 9
      },
      {
        "line": 763,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 761,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"item\", \"value\");assertEquals(false, MapUtils.isEmpty(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"item\", \"value\");assertEquals(false, MapUtils.isEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIsEmptyWithNull()",
    "annotation": "@Test",
    "code": "final Map\u003cObject, Object\u003e map \u003d null;assertEquals(true, MapUtils.isEmpty(map));",
    "offset": [
      {
        "line": 769,
        "column": 9
      },
      {
        "line": 769,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 768,
          "column": 9
        },
        "assert": "final Map\u003cObject, Object\u003e map \u003d null;assertEquals(true, MapUtils.isEmpty(map));",
        "slice": "final Map\u003cObject, Object\u003e map \u003d null;assertEquals(true, MapUtils.isEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIsNotEmptyWithEmptyMap()",
    "annotation": "@Test",
    "code": "final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();assertEquals(false, MapUtils.isNotEmpty(map));",
    "offset": [
      {
        "line": 774,
        "column": 41
      },
      {
        "line": 775,
        "column": 9
      },
      {
        "line": 775,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 774,
          "column": 9
        },
        "assert": "final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();assertEquals(false, MapUtils.isNotEmpty(map));",
        "slice": "final Map\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();assertEquals(false, MapUtils.isNotEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIsNotEmptyWithNonEmptyMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"item\", \"value\");assertEquals(true, MapUtils.isNotEmpty(map));",
    "offset": [
      {
        "line": 780,
        "column": 41
      },
      {
        "line": 781,
        "column": 9
      },
      {
        "line": 782,
        "column": 9
      },
      {
        "line": 782,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 780,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"item\", \"value\");assertEquals(true, MapUtils.isNotEmpty(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"item\", \"value\");assertEquals(true, MapUtils.isNotEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIsNotEmptyWithNull()",
    "annotation": "@Test",
    "code": "final Map\u003cObject, Object\u003e map \u003d null;assertEquals(false, MapUtils.isNotEmpty(map));",
    "offset": [
      {
        "line": 788,
        "column": 9
      },
      {
        "line": 788,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 787,
          "column": 9
        },
        "assert": "final Map\u003cObject, Object\u003e map \u003d null;assertEquals(false, MapUtils.isNotEmpty(map));",
        "slice": "final Map\u003cObject, Object\u003e map \u003d null;assertEquals(false, MapUtils.isNotEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testPopulateMap()",
    "annotation": "@Test",
    "code": "// Setup Test Data\nfinal List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"3\");list.add(\"5\");list.add(\"7\");list.add(\"2\");list.add(\"4\");list.add(\"6\");// Now test key transform population\nMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(), map.size());for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n    assertEquals(false, map.containsKey(list.get(i)));\n    assertEquals(true, map.containsValue(list.get(i)));\n    assertEquals(list.get(i), map.get(Integer.valueOf(list.get(i))));\n}// Now test both Key-Value transform population\nmap \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(), map.size());for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n    assertEquals(false, map.containsKey(list.get(i)));\n    assertEquals(true, map.containsValue(Integer.valueOf(list.get(i))));\n    assertEquals(Integer.valueOf(list.get(i)), map.get(Integer.valueOf(list.get(i))));\n}",
    "offset": [
      {
        "line": 794,
        "column": 35
      },
      {
        "line": 795,
        "column": 9
      },
      {
        "line": 796,
        "column": 9
      },
      {
        "line": 797,
        "column": 9
      },
      {
        "line": 798,
        "column": 9
      },
      {
        "line": 799,
        "column": 9
      },
      {
        "line": 800,
        "column": 9
      },
      {
        "line": 801,
        "column": 9
      },
      {
        "line": 804,
        "column": 35
      },
      {
        "line": 805,
        "column": 9
      },
      {
        "line": 806,
        "column": 9
      },
      {
        "line": 806,
        "column": 22
      },
      {
        "line": 806,
        "column": 35
      },
      {
        "line": 808,
        "column": 29
      },
      {
        "line": 809,
        "column": 13
      },
      {
        "line": 809,
        "column": 32
      },
      {
        "line": 809,
        "column": 48
      },
      {
        "line": 809,
        "column": 64
      },
      {
        "line": 810,
        "column": 13
      },
      {
        "line": 810,
        "column": 33
      },
      {
        "line": 810,
        "column": 49
      },
      {
        "line": 811,
        "column": 13
      },
      {
        "line": 811,
        "column": 32
      },
      {
        "line": 811,
        "column": 50
      },
      {
        "line": 812,
        "column": 13
      },
      {
        "line": 812,
        "column": 26
      },
      {
        "line": 812,
        "column": 39
      },
      {
        "line": 812,
        "column": 47
      },
      {
        "line": 812,
        "column": 63
      },
      {
        "line": 816,
        "column": 15
      },
      {
        "line": 817,
        "column": 9
      },
      {
        "line": 819,
        "column": 9
      },
      {
        "line": 819,
        "column": 22
      },
      {
        "line": 819,
        "column": 35
      },
      {
        "line": 820,
        "column": 29
      },
      {
        "line": 821,
        "column": 13
      },
      {
        "line": 821,
        "column": 32
      },
      {
        "line": 821,
        "column": 48
      },
      {
        "line": 821,
        "column": 64
      },
      {
        "line": 822,
        "column": 13
      },
      {
        "line": 822,
        "column": 33
      },
      {
        "line": 822,
        "column": 49
      },
      {
        "line": 823,
        "column": 13
      },
      {
        "line": 823,
        "column": 32
      },
      {
        "line": 823,
        "column": 50
      },
      {
        "line": 823,
        "column": 66
      },
      {
        "line": 824,
        "column": 13
      },
      {
        "line": 824,
        "column": 26
      },
      {
        "line": 824,
        "column": 42
      },
      {
        "line": 824,
        "column": 56
      },
      {
        "line": 824,
        "column": 64
      },
      {
        "line": 824,
        "column": 80
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 816,
          "column": 9
        },
        "assert": "// Now test both Key-Value transform population\nmap \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(), map.size());",
        "slice": "// Setup Test Data\nfinal List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"3\");list.add(\"5\");list.add(\"7\");list.add(\"2\");list.add(\"4\");list.add(\"6\");// Now test key transform population\nMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);// Now test both Key-Value transform population\nmap \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(), map.size());"
      },
      {
        "testCodeLocation": {
          "line": 820,
          "column": 9
        },
        "assert": "for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n    assertEquals(false, map.containsKey(list.get(i)));\n    assertEquals(true, map.containsValue(Integer.valueOf(list.get(i))));\n    assertEquals(Integer.valueOf(list.get(i)), map.get(Integer.valueOf(list.get(i))));\n}",
        "slice": "// Setup Test Data\nfinal List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"3\");list.add(\"5\");list.add(\"7\");list.add(\"2\");list.add(\"4\");list.add(\"6\");// Now test key transform population\nMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();// Now test both Key-Value transform population\nmap \u003d new HashMap\u003c\u003e();for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n    assertEquals(false, map.containsKey(list.get(i)));\n    assertEquals(true, map.containsValue(Integer.valueOf(list.get(i))));\n    assertEquals(Integer.valueOf(list.get(i)), map.get(Integer.valueOf(list.get(i))));\n}"
      },
      {
        "testCodeLocation": {
          "line": 808,
          "column": 9
        },
        "assert": "for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n    assertEquals(false, map.containsKey(list.get(i)));\n    assertEquals(true, map.containsValue(list.get(i)));\n    assertEquals(list.get(i), map.get(Integer.valueOf(list.get(i))));\n}",
        "slice": "// Setup Test Data\nfinal List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"3\");list.add(\"5\");list.add(\"7\");list.add(\"2\");list.add(\"4\");list.add(\"6\");// Now test key transform population\nMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(Integer.valueOf(list.get(i))));\n    assertEquals(false, map.containsKey(list.get(i)));\n    assertEquals(true, map.containsValue(list.get(i)));\n    assertEquals(list.get(i), map.get(Integer.valueOf(list.get(i))));\n}"
      },
      {
        "testCodeLocation": {
          "line": 794,
          "column": 9
        },
        "assert": "// Setup Test Data\nfinal List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"3\");list.add(\"5\");list.add(\"7\");list.add(\"2\");list.add(\"4\");list.add(\"6\");// Now test key transform population\nMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(), map.size());",
        "slice": "// Setup Test Data\nfinal List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"3\");list.add(\"5\");list.add(\"7\");list.add(\"2\");list.add(\"4\");list.add(\"6\");// Now test key transform population\nMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();MapUtils.populateMap(map, list, TransformedCollectionTest.STRING_TO_INTEGER_TRANSFORMER);assertEquals(list.size(), map.size());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testPopulateMultiMap()",
    "annotation": "@Test",
    "code": "// Setup Test Data\nfinal List\u003cX\u003e list \u003d new ArrayList\u003c\u003e();list.add(new X(1, \"x1\"));list.add(new X(2, \"x2\"));list.add(new X(2, \"x3\"));list.add(new X(5, \"x4\"));list.add(new X(5, \"x5\"));// Now test key transform population\nfinal MultiValueMap\u003cInteger, X\u003e map \u003d MultiValueMap.multiValueMap(new TreeMap\u003cInteger, Collection\u003cX\u003e\u003e());MapUtils.populateMap(map, list, new Transformer\u003cX, Integer\u003e() {\n\n    @Override\n    public Integer transform(final X input) {\n        return input.key;\n    }\n}, TransformerUtils.\u003cX\u003enopTransformer());assertEquals(list.size(), map.totalSize());for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(list.get(i).key));\n    assertEquals(true, map.containsValue(list.get(i)));\n}",
    "offset": [
      {
        "line": 850,
        "column": 30
      },
      {
        "line": 851,
        "column": 9
      },
      {
        "line": 851,
        "column": 18
      },
      {
        "line": 852,
        "column": 9
      },
      {
        "line": 852,
        "column": 18
      },
      {
        "line": 853,
        "column": 9
      },
      {
        "line": 853,
        "column": 18
      },
      {
        "line": 854,
        "column": 9
      },
      {
        "line": 854,
        "column": 18
      },
      {
        "line": 855,
        "column": 9
      },
      {
        "line": 855,
        "column": 18
      },
      {
        "line": 858,
        "column": 47
      },
      {
        "line": 858,
        "column": 75
      },
      {
        "line": 859,
        "column": 9
      },
      {
        "line": 859,
        "column": 41
      },
      {
        "line": 864,
        "column": 12
      },
      {
        "line": 865,
        "column": 9
      },
      {
        "line": 865,
        "column": 22
      },
      {
        "line": 865,
        "column": 35
      },
      {
        "line": 867,
        "column": 29
      },
      {
        "line": 868,
        "column": 13
      },
      {
        "line": 868,
        "column": 32
      },
      {
        "line": 868,
        "column": 48
      },
      {
        "line": 869,
        "column": 13
      },
      {
        "line": 869,
        "column": 32
      },
      {
        "line": 869,
        "column": 50
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 850,
          "column": 9
        },
        "assert": "// Setup Test Data\nfinal List\u003cX\u003e list \u003d new ArrayList\u003c\u003e();list.add(new X(1, \"x1\"));list.add(new X(2, \"x2\"));list.add(new X(2, \"x3\"));list.add(new X(5, \"x4\"));list.add(new X(5, \"x5\"));// Now test key transform population\nfinal MultiValueMap\u003cInteger, X\u003e map \u003d MultiValueMap.multiValueMap(new TreeMap\u003cInteger, Collection\u003cX\u003e\u003e());MapUtils.populateMap(map, list, new Transformer\u003cX, Integer\u003e() {\n\n    @Override\n    public Integer transform(final X input) {\n        return input.key;\n    }\n}, TransformerUtils.\u003cX\u003enopTransformer());assertEquals(list.size(), map.totalSize());",
        "slice": "// Setup Test Data\nfinal List\u003cX\u003e list \u003d new ArrayList\u003c\u003e();list.add(new X(1, \"x1\"));list.add(new X(2, \"x2\"));list.add(new X(2, \"x3\"));list.add(new X(5, \"x4\"));list.add(new X(5, \"x5\"));// Now test key transform population\nfinal MultiValueMap\u003cInteger, X\u003e map \u003d MultiValueMap.multiValueMap(new TreeMap\u003cInteger, Collection\u003cX\u003e\u003e());MapUtils.populateMap(map, list, new Transformer\u003cX, Integer\u003e() {\n\n    @Override\n    public Integer transform(final X input) {\n        return input.key;\n    }\n}, TransformerUtils.\u003cX\u003enopTransformer());assertEquals(list.size(), map.totalSize());"
      },
      {
        "testCodeLocation": {
          "line": 867,
          "column": 9
        },
        "assert": "for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(list.get(i).key));\n    assertEquals(true, map.containsValue(list.get(i)));\n}",
        "slice": "// Setup Test Data\nfinal List\u003cX\u003e list \u003d new ArrayList\u003c\u003e();list.add(new X(1, \"x1\"));list.add(new X(2, \"x2\"));list.add(new X(2, \"x3\"));list.add(new X(5, \"x4\"));list.add(new X(5, \"x5\"));// Now test key transform population\nfinal MultiValueMap\u003cInteger, X\u003e map \u003d MultiValueMap.multiValueMap(new TreeMap\u003cInteger, Collection\u003cX\u003e\u003e());for (int i \u003d 0; i \u003c list.size(); i++) {\n    assertEquals(true, map.containsKey(list.get(i).key));\n    assertEquals(true, map.containsValue(list.get(i)));\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIterableMap()",
    "annotation": "@Test",
    "code": "try {\n    MapUtils.iterableMap(null);\n    fail(\"Should throw NullPointerException\");\n} catch (final NullPointerException e) {\n}final HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableMap\u003cString, String\u003e iMap \u003d MapUtils.iterableMap(map);assertEquals(map, iMap);assertNotSame(map, iMap);final HashedMap\u003cString, String\u003e hMap \u003d new HashedMap\u003c\u003e(map);assertSame(hMap, MapUtils.iterableMap(hMap));",
    "offset": [
      {
        "line": 876,
        "column": 13
      },
      {
        "line": 877,
        "column": 13
      },
      {
        "line": 880,
        "column": 45
      },
      {
        "line": 881,
        "column": 9
      },
      {
        "line": 882,
        "column": 9
      },
      {
        "line": 883,
        "column": 9
      },
      {
        "line": 884,
        "column": 50
      },
      {
        "line": 885,
        "column": 9
      },
      {
        "line": 886,
        "column": 9
      },
      {
        "line": 887,
        "column": 48
      },
      {
        "line": 888,
        "column": 9
      },
      {
        "line": 888,
        "column": 26
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 880,
          "column": 9
        },
        "assert": "final HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableMap\u003cString, String\u003e iMap \u003d MapUtils.iterableMap(map);assertEquals(map, iMap);",
        "slice": "final HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableMap\u003cString, String\u003e iMap \u003d MapUtils.iterableMap(map);assertEquals(map, iMap);"
      },
      {
        "testCodeLocation": {
          "line": 886,
          "column": 9
        },
        "assert": "assertNotSame(map, iMap);",
        "slice": "final HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableMap\u003cString, String\u003e iMap \u003d MapUtils.iterableMap(map);assertNotSame(map, iMap);"
      },
      {
        "testCodeLocation": {
          "line": 887,
          "column": 9
        },
        "assert": "final HashedMap\u003cString, String\u003e hMap \u003d new HashedMap\u003c\u003e(map);assertSame(hMap, MapUtils.iterableMap(hMap));",
        "slice": "final HashMap\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableMap\u003cString, String\u003e iMap \u003d MapUtils.iterableMap(map);final HashedMap\u003cString, String\u003e hMap \u003d new HashedMap\u003c\u003e(map);assertSame(hMap, MapUtils.iterableMap(hMap));"
      },
      {
        "testCodeLocation": {
          "line": 875,
          "column": 9
        },
        "assert": "try {\n    MapUtils.iterableMap(null);\n    fail(\"Should throw NullPointerException\");\n} catch (final NullPointerException e) {\n}",
        "slice": "try {\n    MapUtils.iterableMap(null);\n    fail(\"Should throw NullPointerException\");\n} catch (final NullPointerException e) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testIterableSortedMap()",
    "annotation": "@Test",
    "code": "try {\n    MapUtils.iterableSortedMap(null);\n    fail(\"Should throw NullPointerException\");\n} catch (final NullPointerException e) {\n}final TreeMap\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableSortedMap\u003cString, String\u003e iMap \u003d MapUtils.iterableSortedMap(map);assertEquals(map, iMap);assertNotSame(map, iMap);assertSame(iMap, MapUtils.iterableMap(iMap));",
    "offset": [
      {
        "line": 894,
        "column": 13
      },
      {
        "line": 895,
        "column": 13
      },
      {
        "line": 898,
        "column": 45
      },
      {
        "line": 899,
        "column": 9
      },
      {
        "line": 900,
        "column": 9
      },
      {
        "line": 901,
        "column": 9
      },
      {
        "line": 902,
        "column": 56
      },
      {
        "line": 903,
        "column": 9
      },
      {
        "line": 904,
        "column": 9
      },
      {
        "line": 905,
        "column": 9
      },
      {
        "line": 905,
        "column": 26
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 898,
          "column": 9
        },
        "assert": "final TreeMap\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableSortedMap\u003cString, String\u003e iMap \u003d MapUtils.iterableSortedMap(map);assertEquals(map, iMap);",
        "slice": "final TreeMap\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableSortedMap\u003cString, String\u003e iMap \u003d MapUtils.iterableSortedMap(map);assertEquals(map, iMap);"
      },
      {
        "testCodeLocation": {
          "line": 904,
          "column": 9
        },
        "assert": "assertNotSame(map, iMap);",
        "slice": "final TreeMap\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableSortedMap\u003cString, String\u003e iMap \u003d MapUtils.iterableSortedMap(map);assertNotSame(map, iMap);"
      },
      {
        "testCodeLocation": {
          "line": 905,
          "column": 9
        },
        "assert": "assertSame(iMap, MapUtils.iterableMap(iMap));",
        "slice": "final TreeMap\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();map.put(\"foo\", \"foov\");map.put(\"bar\", \"barv\");map.put(\"baz\", \"bazv\");final IterableSortedMap\u003cString, String\u003e iMap \u003d MapUtils.iterableSortedMap(map);assertSame(iMap, MapUtils.iterableMap(iMap));"
      },
      {
        "testCodeLocation": {
          "line": 893,
          "column": 9
        },
        "assert": "try {\n    MapUtils.iterableSortedMap(null);\n    fail(\"Should throw NullPointerException\");\n} catch (final NullPointerException e) {\n}",
        "slice": "try {\n    MapUtils.iterableSortedMap(null);\n    fail(\"Should throw NullPointerException\");\n} catch (final NullPointerException e) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testSize0()",
    "annotation": "@Test",
    "code": "assertEquals(0, MapUtils.size(new HashMap\u003c\u003e()));",
    "offset": [
      {
        "line": 910,
        "column": 9
      },
      {
        "line": 910,
        "column": 25
      },
      {
        "line": 910,
        "column": 39
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 910,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.size(new HashMap\u003c\u003e()));",
        "slice": "assertEquals(0, MapUtils.size(new HashMap\u003c\u003e()));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testSizeNull()",
    "annotation": "@Test",
    "code": "assertEquals(0, MapUtils.size(null));",
    "offset": [
      {
        "line": 915,
        "column": 9
      },
      {
        "line": 915,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 915,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.size(null));",
        "slice": "assertEquals(0, MapUtils.size(null));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testSize()",
    "annotation": "@Test",
    "code": "final HashMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();map.put(\"A\", \"1\");map.put(\"B\", \"2\");assertEquals(2, MapUtils.size(map));",
    "offset": [
      {
        "line": 920,
        "column": 45
      },
      {
        "line": 921,
        "column": 9
      },
      {
        "line": 922,
        "column": 9
      },
      {
        "line": 923,
        "column": 9
      },
      {
        "line": 923,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 920,
          "column": 9
        },
        "assert": "final HashMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();map.put(\"A\", \"1\");map.put(\"B\", \"2\");assertEquals(2, MapUtils.size(map));",
        "slice": "final HashMap\u003cObject, Object\u003e map \u003d new HashMap\u003c\u003e();map.put(\"A\", \"1\");map.put(\"B\", \"2\");assertEquals(2, MapUtils.size(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testToProperties()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key1\", \"A\");in.put(\"key2\", \"B\");in.put(\"key3\", \"C\");final Properties out \u003d MapUtils.toProperties(in);assertEquals(in.get(\"key1\"), out.get(\"key1\"));assertEquals(in.get(\"key2\"), out.get(\"key2\"));assertEquals(in.get(\"key3\"), out.get(\"key3\"));",
    "offset": [
      {
        "line": 928,
        "column": 40
      },
      {
        "line": 929,
        "column": 9
      },
      {
        "line": 930,
        "column": 9
      },
      {
        "line": 931,
        "column": 9
      },
      {
        "line": 933,
        "column": 33
      },
      {
        "line": 935,
        "column": 9
      },
      {
        "line": 935,
        "column": 22
      },
      {
        "line": 935,
        "column": 38
      },
      {
        "line": 936,
        "column": 9
      },
      {
        "line": 936,
        "column": 22
      },
      {
        "line": 936,
        "column": 38
      },
      {
        "line": 937,
        "column": 9
      },
      {
        "line": 937,
        "column": 22
      },
      {
        "line": 937,
        "column": 38
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 928,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key1\", \"A\");in.put(\"key2\", \"B\");in.put(\"key3\", \"C\");final Properties out \u003d MapUtils.toProperties(in);assertEquals(in.get(\"key1\"), out.get(\"key1\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key1\", \"A\");in.put(\"key2\", \"B\");in.put(\"key3\", \"C\");final Properties out \u003d MapUtils.toProperties(in);assertEquals(in.get(\"key1\"), out.get(\"key1\"));"
      },
      {
        "testCodeLocation": {
          "line": 936,
          "column": 9
        },
        "assert": "assertEquals(in.get(\"key2\"), out.get(\"key2\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key1\", \"A\");in.put(\"key2\", \"B\");in.put(\"key3\", \"C\");final Properties out \u003d MapUtils.toProperties(in);assertEquals(in.get(\"key2\"), out.get(\"key2\"));"
      },
      {
        "testCodeLocation": {
          "line": 937,
          "column": 9
        },
        "assert": "assertEquals(in.get(\"key3\"), out.get(\"key3\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key1\", \"A\");in.put(\"key2\", \"B\");in.put(\"key3\", \"C\");final Properties out \u003d MapUtils.toProperties(in);assertEquals(in.get(\"key3\"), out.get(\"key3\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testToPropertiesEmpty()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e in \u003d null;final Properties out \u003d MapUtils.toProperties(in);assertEquals(out.size(), 0);",
    "offset": [
      {
        "line": 943,
        "column": 33
      },
      {
        "line": 945,
        "column": 9
      },
      {
        "line": 945,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 942,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e in \u003d null;final Properties out \u003d MapUtils.toProperties(in);assertEquals(out.size(), 0);",
        "slice": "final Map\u003cString, String\u003e in \u003d null;final Properties out \u003d MapUtils.toProperties(in);assertEquals(out.size(), 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetDoubleValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\", 0.0), 0);assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\"), 0);assertEquals(1.0, MapUtils.getDoubleValue(in, \"noKey\", 1.0), 0);assertEquals(0, MapUtils.getDoubleValue(in, \"noKey\"), 0);assertEquals(2.0, MapUtils.getDouble(in, \"key\", 0.0), 0);assertEquals(1.0, MapUtils.getDouble(in, \"noKey\", 1.0), 0);final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();final char decimalSeparator \u003d getDecimalSeparator();inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");assertEquals(MapUtils.getDoubleValue(inStr, \"str1\", 0.0), 2.0, 0);",
    "offset": [
      {
        "line": 950,
        "column": 40
      },
      {
        "line": 951,
        "column": 9
      },
      {
        "line": 953,
        "column": 9
      },
      {
        "line": 953,
        "column": 27
      },
      {
        "line": 954,
        "column": 9
      },
      {
        "line": 954,
        "column": 27
      },
      {
        "line": 955,
        "column": 9
      },
      {
        "line": 955,
        "column": 27
      },
      {
        "line": 956,
        "column": 9
      },
      {
        "line": 956,
        "column": 25
      },
      {
        "line": 957,
        "column": 9
      },
      {
        "line": 957,
        "column": 27
      },
      {
        "line": 958,
        "column": 9
      },
      {
        "line": 958,
        "column": 27
      },
      {
        "line": 961,
        "column": 43
      },
      {
        "line": 962,
        "column": 39
      },
      {
        "line": 963,
        "column": 9
      },
      {
        "line": 965,
        "column": 9
      },
      {
        "line": 965,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 961,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();final char decimalSeparator \u003d getDecimalSeparator();inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");assertEquals(MapUtils.getDoubleValue(inStr, \"str1\", 0.0), 2.0, 0);",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();final char decimalSeparator \u003d getDecimalSeparator();inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");assertEquals(MapUtils.getDoubleValue(inStr, \"str1\", 0.0), 2.0, 0);"
      },
      {
        "testCodeLocation": {
          "line": 950,
          "column": 9
        },
        "assert": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\", 0.0), 0);",
        "slice": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\", 0.0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 954,
          "column": 9
        },
        "assert": "assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\"), 0);",
        "slice": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(2.0, MapUtils.getDoubleValue(in, \"key\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 955,
          "column": 9
        },
        "assert": "assertEquals(1.0, MapUtils.getDoubleValue(in, \"noKey\", 1.0), 0);",
        "slice": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(1.0, MapUtils.getDoubleValue(in, \"noKey\", 1.0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 956,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getDoubleValue(in, \"noKey\"), 0);",
        "slice": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(0, MapUtils.getDoubleValue(in, \"noKey\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 957,
          "column": 9
        },
        "assert": "assertEquals(2.0, MapUtils.getDouble(in, \"key\", 0.0), 0);",
        "slice": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(2.0, MapUtils.getDouble(in, \"key\", 0.0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 958,
          "column": 9
        },
        "assert": "assertEquals(1.0, MapUtils.getDouble(in, \"noKey\", 1.0), 0);",
        "slice": "final Map\u003cString, Double\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0);assertEquals(1.0, MapUtils.getDouble(in, \"noKey\", 1.0), 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetFloatValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(2.0, MapUtils.getFloatValue(in, \"key\", 0.0f), 0);assertEquals(2.0, MapUtils.getFloatValue(in, \"key\"), 0);assertEquals(1.0, MapUtils.getFloatValue(in, \"noKey\", 1.0f), 0);assertEquals(0, MapUtils.getFloatValue(in, \"noKey\"), 0);assertEquals(2.0, MapUtils.getFloat(in, \"key\", 0.0f), 0);assertEquals(1.0, MapUtils.getFloat(in, \"noKey\", 1.0f), 0);final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();final char decimalSeparator \u003d getDecimalSeparator();inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");assertEquals(MapUtils.getFloatValue(inStr, \"str1\", 0.0f), 2.0, 0);",
    "offset": [
      {
        "line": 970,
        "column": 39
      },
      {
        "line": 971,
        "column": 9
      },
      {
        "line": 973,
        "column": 9
      },
      {
        "line": 973,
        "column": 27
      },
      {
        "line": 974,
        "column": 9
      },
      {
        "line": 974,
        "column": 27
      },
      {
        "line": 975,
        "column": 9
      },
      {
        "line": 975,
        "column": 27
      },
      {
        "line": 976,
        "column": 9
      },
      {
        "line": 976,
        "column": 25
      },
      {
        "line": 977,
        "column": 9
      },
      {
        "line": 977,
        "column": 27
      },
      {
        "line": 978,
        "column": 9
      },
      {
        "line": 978,
        "column": 27
      },
      {
        "line": 980,
        "column": 43
      },
      {
        "line": 981,
        "column": 39
      },
      {
        "line": 982,
        "column": 9
      },
      {
        "line": 984,
        "column": 9
      },
      {
        "line": 984,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 976,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getFloatValue(in, \"noKey\"), 0);",
        "slice": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(0, MapUtils.getFloatValue(in, \"noKey\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 977,
          "column": 9
        },
        "assert": "assertEquals(2.0, MapUtils.getFloat(in, \"key\", 0.0f), 0);",
        "slice": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(2.0, MapUtils.getFloat(in, \"key\", 0.0f), 0);"
      },
      {
        "testCodeLocation": {
          "line": 978,
          "column": 9
        },
        "assert": "assertEquals(1.0, MapUtils.getFloat(in, \"noKey\", 1.0f), 0);",
        "slice": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(1.0, MapUtils.getFloat(in, \"noKey\", 1.0f), 0);"
      },
      {
        "testCodeLocation": {
          "line": 980,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();final char decimalSeparator \u003d getDecimalSeparator();inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");assertEquals(MapUtils.getFloatValue(inStr, \"str1\", 0.0f), 2.0, 0);",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();final char decimalSeparator \u003d getDecimalSeparator();inStr.put(\"str1\", \"2\" + decimalSeparator + \"0\");assertEquals(MapUtils.getFloatValue(inStr, \"str1\", 0.0f), 2.0, 0);"
      },
      {
        "testCodeLocation": {
          "line": 970,
          "column": 9
        },
        "assert": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(2.0, MapUtils.getFloatValue(in, \"key\", 0.0f), 0);",
        "slice": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(2.0, MapUtils.getFloatValue(in, \"key\", 0.0f), 0);"
      },
      {
        "testCodeLocation": {
          "line": 974,
          "column": 9
        },
        "assert": "assertEquals(2.0, MapUtils.getFloatValue(in, \"key\"), 0);",
        "slice": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(2.0, MapUtils.getFloatValue(in, \"key\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 975,
          "column": 9
        },
        "assert": "assertEquals(1.0, MapUtils.getFloatValue(in, \"noKey\", 1.0f), 0);",
        "slice": "final Map\u003cString, Float\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2.0f);assertEquals(1.0, MapUtils.getFloatValue(in, \"noKey\", 1.0f), 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetLongValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(2.0, MapUtils.getLongValue(in, \"key\", 0L), 0);assertEquals(2.0, MapUtils.getLongValue(in, \"key\"), 0);assertEquals(1, MapUtils.getLongValue(in, \"noKey\", 1L), 0);assertEquals(0, MapUtils.getLongValue(in, \"noKey\"), 0);assertEquals(2.0, MapUtils.getLong(in, \"key\", 0L), 0);assertEquals(1, MapUtils.getLong(in, \"noKey\", 1L), 0);final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getLongValue(inStr, \"str1\", 0L), 2, 0);assertEquals(MapUtils.getLong(inStr, \"str1\", 1L), 2, 0);",
    "offset": [
      {
        "line": 989,
        "column": 38
      },
      {
        "line": 990,
        "column": 9
      },
      {
        "line": 992,
        "column": 9
      },
      {
        "line": 992,
        "column": 27
      },
      {
        "line": 993,
        "column": 9
      },
      {
        "line": 993,
        "column": 27
      },
      {
        "line": 994,
        "column": 9
      },
      {
        "line": 994,
        "column": 25
      },
      {
        "line": 995,
        "column": 9
      },
      {
        "line": 995,
        "column": 25
      },
      {
        "line": 996,
        "column": 9
      },
      {
        "line": 996,
        "column": 27
      },
      {
        "line": 997,
        "column": 9
      },
      {
        "line": 997,
        "column": 25
      },
      {
        "line": 999,
        "column": 43
      },
      {
        "line": 1000,
        "column": 9
      },
      {
        "line": 1002,
        "column": 9
      },
      {
        "line": 1002,
        "column": 22
      },
      {
        "line": 1003,
        "column": 9
      },
      {
        "line": 1003,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 993,
          "column": 9
        },
        "assert": "assertEquals(2.0, MapUtils.getLongValue(in, \"key\"), 0);",
        "slice": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(2.0, MapUtils.getLongValue(in, \"key\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 994,
          "column": 9
        },
        "assert": "assertEquals(1, MapUtils.getLongValue(in, \"noKey\", 1L), 0);",
        "slice": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(1, MapUtils.getLongValue(in, \"noKey\", 1L), 0);"
      },
      {
        "testCodeLocation": {
          "line": 995,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getLongValue(in, \"noKey\"), 0);",
        "slice": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(0, MapUtils.getLongValue(in, \"noKey\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 996,
          "column": 9
        },
        "assert": "assertEquals(2.0, MapUtils.getLong(in, \"key\", 0L), 0);",
        "slice": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(2.0, MapUtils.getLong(in, \"key\", 0L), 0);"
      },
      {
        "testCodeLocation": {
          "line": 997,
          "column": 9
        },
        "assert": "assertEquals(1, MapUtils.getLong(in, \"noKey\", 1L), 0);",
        "slice": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(1, MapUtils.getLong(in, \"noKey\", 1L), 0);"
      },
      {
        "testCodeLocation": {
          "line": 999,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getLongValue(inStr, \"str1\", 0L), 2, 0);",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getLongValue(inStr, \"str1\", 0L), 2, 0);"
      },
      {
        "testCodeLocation": {
          "line": 1003,
          "column": 9
        },
        "assert": "assertEquals(MapUtils.getLong(inStr, \"str1\", 1L), 2, 0);",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getLong(inStr, \"str1\", 1L), 2, 0);"
      },
      {
        "testCodeLocation": {
          "line": 989,
          "column": 9
        },
        "assert": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(2.0, MapUtils.getLongValue(in, \"key\", 0L), 0);",
        "slice": "final Map\u003cString, Long\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2L);assertEquals(2.0, MapUtils.getLongValue(in, \"key\", 0L), 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetIntValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(2, MapUtils.getIntValue(in, \"key\", 0), 0);assertEquals(2, MapUtils.getIntValue(in, \"key\"), 0);assertEquals(0, MapUtils.getIntValue(in, \"noKey\", 0), 0);assertEquals(0, MapUtils.getIntValue(in, \"noKey\"), 0);assertEquals(2, MapUtils.getInteger(in, \"key\", 0), 0);assertEquals(0, MapUtils.getInteger(in, \"noKey\", 0), 0);final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getIntValue(inStr, \"str1\", 0), 2, 0);",
    "offset": [
      {
        "line": 1009,
        "column": 41
      },
      {
        "line": 1010,
        "column": 9
      },
      {
        "line": 1012,
        "column": 9
      },
      {
        "line": 1012,
        "column": 25
      },
      {
        "line": 1013,
        "column": 9
      },
      {
        "line": 1013,
        "column": 25
      },
      {
        "line": 1014,
        "column": 9
      },
      {
        "line": 1014,
        "column": 25
      },
      {
        "line": 1015,
        "column": 9
      },
      {
        "line": 1015,
        "column": 25
      },
      {
        "line": 1016,
        "column": 9
      },
      {
        "line": 1016,
        "column": 25
      },
      {
        "line": 1017,
        "column": 9
      },
      {
        "line": 1017,
        "column": 25
      },
      {
        "line": 1019,
        "column": 43
      },
      {
        "line": 1020,
        "column": 9
      },
      {
        "line": 1022,
        "column": 9
      },
      {
        "line": 1022,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1009,
          "column": 9
        },
        "assert": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(2, MapUtils.getIntValue(in, \"key\", 0), 0);",
        "slice": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(2, MapUtils.getIntValue(in, \"key\", 0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1013,
          "column": 9
        },
        "assert": "assertEquals(2, MapUtils.getIntValue(in, \"key\"), 0);",
        "slice": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(2, MapUtils.getIntValue(in, \"key\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1014,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getIntValue(in, \"noKey\", 0), 0);",
        "slice": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(0, MapUtils.getIntValue(in, \"noKey\", 0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1015,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getIntValue(in, \"noKey\"), 0);",
        "slice": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(0, MapUtils.getIntValue(in, \"noKey\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1016,
          "column": 9
        },
        "assert": "assertEquals(2, MapUtils.getInteger(in, \"key\", 0), 0);",
        "slice": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(2, MapUtils.getInteger(in, \"key\", 0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1017,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getInteger(in, \"noKey\", 0), 0);",
        "slice": "final Map\u003cString, Integer\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", 2);assertEquals(0, MapUtils.getInteger(in, \"noKey\", 0), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1019,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getIntValue(inStr, \"str1\", 0), 2, 0);",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"2\");assertEquals(MapUtils.getIntValue(inStr, \"str1\", 0), 2, 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetShortValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShortValue(in, \"key\", val), 0);assertEquals(val, MapUtils.getShortValue(in, \"key\"), 0);assertEquals(val, MapUtils.getShortValue(in, \"noKey\", val), 0);assertEquals(0, MapUtils.getShortValue(in, \"noKey\"), 0);assertEquals(val, MapUtils.getShort(in, \"key\", val), 0);assertEquals(val, MapUtils.getShort(in, \"noKey\", val), 0);final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"10\");assertEquals(MapUtils.getShortValue(inStr, \"str1\", val), val, 0);",
    "offset": [
      {
        "line": 1027,
        "column": 39
      },
      {
        "line": 1029,
        "column": 9
      },
      {
        "line": 1031,
        "column": 9
      },
      {
        "line": 1031,
        "column": 27
      },
      {
        "line": 1032,
        "column": 9
      },
      {
        "line": 1032,
        "column": 27
      },
      {
        "line": 1033,
        "column": 9
      },
      {
        "line": 1033,
        "column": 27
      },
      {
        "line": 1034,
        "column": 9
      },
      {
        "line": 1034,
        "column": 25
      },
      {
        "line": 1035,
        "column": 9
      },
      {
        "line": 1035,
        "column": 27
      },
      {
        "line": 1036,
        "column": 9
      },
      {
        "line": 1036,
        "column": 26
      },
      {
        "line": 1038,
        "column": 43
      },
      {
        "line": 1039,
        "column": 9
      },
      {
        "line": 1041,
        "column": 9
      },
      {
        "line": 1041,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1027,
          "column": 9
        },
        "assert": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShortValue(in, \"key\", val), 0);",
        "slice": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShortValue(in, \"key\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1032,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getShortValue(in, \"key\"), 0);",
        "slice": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShortValue(in, \"key\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1033,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getShortValue(in, \"noKey\", val), 0);",
        "slice": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShortValue(in, \"noKey\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1034,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getShortValue(in, \"noKey\"), 0);",
        "slice": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(0, MapUtils.getShortValue(in, \"noKey\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1035,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getShort(in, \"key\", val), 0);",
        "slice": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShort(in, \"key\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1036,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getShort(in, \"noKey\", val), 0);",
        "slice": "final Map\u003cString, Short\u003e in \u003d new HashMap\u003c\u003e();final short val \u003d 10;in.put(\"key\", val);assertEquals(val, MapUtils.getShort(in, \"noKey\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1038,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"10\");assertEquals(MapUtils.getShortValue(inStr, \"str1\", val), val, 0);",
        "slice": "final short val \u003d 10;final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"10\");assertEquals(MapUtils.getShortValue(inStr, \"str1\", val), val, 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetByteValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByteValue(in, \"key\", val), 0);assertEquals(val, MapUtils.getByteValue(in, \"key\"), 0);assertEquals(val, MapUtils.getByteValue(in, \"noKey\", val), 0);assertEquals(0, MapUtils.getByteValue(in, \"noKey\"), 0);assertEquals(val, MapUtils.getByte(in, \"key\", val), 0);assertEquals(val, MapUtils.getByte(in, \"noKey\", val), 0);final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"100\");assertEquals(MapUtils.getByteValue(inStr, \"str1\", val), val, 0);",
    "offset": [
      {
        "line": 1046,
        "column": 38
      },
      {
        "line": 1048,
        "column": 9
      },
      {
        "line": 1050,
        "column": 9
      },
      {
        "line": 1050,
        "column": 27
      },
      {
        "line": 1051,
        "column": 9
      },
      {
        "line": 1051,
        "column": 27
      },
      {
        "line": 1052,
        "column": 9
      },
      {
        "line": 1052,
        "column": 27
      },
      {
        "line": 1053,
        "column": 9
      },
      {
        "line": 1053,
        "column": 25
      },
      {
        "line": 1054,
        "column": 9
      },
      {
        "line": 1054,
        "column": 27
      },
      {
        "line": 1055,
        "column": 9
      },
      {
        "line": 1055,
        "column": 27
      },
      {
        "line": 1058,
        "column": 43
      },
      {
        "line": 1059,
        "column": 9
      },
      {
        "line": 1061,
        "column": 9
      },
      {
        "line": 1061,
        "column": 22
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1058,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"100\");assertEquals(MapUtils.getByteValue(inStr, \"str1\", val), val, 0);",
        "slice": "final byte val \u003d 100;final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"100\");assertEquals(MapUtils.getByteValue(inStr, \"str1\", val), val, 0);"
      },
      {
        "testCodeLocation": {
          "line": 1046,
          "column": 9
        },
        "assert": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByteValue(in, \"key\", val), 0);",
        "slice": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByteValue(in, \"key\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1051,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getByteValue(in, \"key\"), 0);",
        "slice": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByteValue(in, \"key\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1052,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getByteValue(in, \"noKey\", val), 0);",
        "slice": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByteValue(in, \"noKey\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1053,
          "column": 9
        },
        "assert": "assertEquals(0, MapUtils.getByteValue(in, \"noKey\"), 0);",
        "slice": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(0, MapUtils.getByteValue(in, \"noKey\"), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1054,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getByte(in, \"key\", val), 0);",
        "slice": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByte(in, \"key\", val), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1055,
          "column": 9
        },
        "assert": "assertEquals(val, MapUtils.getByte(in, \"noKey\", val), 0);",
        "slice": "final Map\u003cString, Byte\u003e in \u003d new HashMap\u003c\u003e();final byte val \u003d 100;in.put(\"key\", val);assertEquals(val, MapUtils.getByte(in, \"noKey\", val), 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetNumber()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Number\u003e in \u003d new HashMap\u003c\u003e();final Number val \u003d 1000;in.put(\"key\", val);assertEquals(val.intValue(), MapUtils.getNumber(in, \"key\", val).intValue(), 0);assertEquals(val.intValue(), MapUtils.getNumber(in, \"noKey\", val).intValue(), 0);",
    "offset": [
      {
        "line": 1066,
        "column": 40
      },
      {
        "line": 1068,
        "column": 9
      },
      {
        "line": 1070,
        "column": 9
      },
      {
        "line": 1070,
        "column": 22
      },
      {
        "line": 1070,
        "column": 38
      },
      {
        "line": 1070,
        "column": 38
      },
      {
        "line": 1071,
        "column": 9
      },
      {
        "line": 1071,
        "column": 22
      },
      {
        "line": 1071,
        "column": 38
      },
      {
        "line": 1071,
        "column": 38
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1066,
          "column": 9
        },
        "assert": "final Map\u003cString, Number\u003e in \u003d new HashMap\u003c\u003e();final Number val \u003d 1000;in.put(\"key\", val);assertEquals(val.intValue(), MapUtils.getNumber(in, \"key\", val).intValue(), 0);",
        "slice": "final Map\u003cString, Number\u003e in \u003d new HashMap\u003c\u003e();final Number val \u003d 1000;in.put(\"key\", val);assertEquals(val.intValue(), MapUtils.getNumber(in, \"key\", val).intValue(), 0);"
      },
      {
        "testCodeLocation": {
          "line": 1071,
          "column": 9
        },
        "assert": "assertEquals(val.intValue(), MapUtils.getNumber(in, \"noKey\", val).intValue(), 0);",
        "slice": "final Map\u003cString, Number\u003e in \u003d new HashMap\u003c\u003e();final Number val \u003d 1000;in.put(\"key\", val);assertEquals(val.intValue(), MapUtils.getNumber(in, \"noKey\", val).intValue(), 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetString()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getString(in, \"key\", \"defualt\"));assertEquals(\"str\", MapUtils.getString(in, \"key\"));assertEquals(null, MapUtils.getString(null, \"key\"));assertEquals(\"default\", MapUtils.getString(in, \"noKey\", \"default\"));assertEquals(\"default\", MapUtils.getString(null, \"noKey\", \"default\"));",
    "offset": [
      {
        "line": 1077,
        "column": 40
      },
      {
        "line": 1078,
        "column": 9
      },
      {
        "line": 1080,
        "column": 9
      },
      {
        "line": 1080,
        "column": 29
      },
      {
        "line": 1081,
        "column": 9
      },
      {
        "line": 1081,
        "column": 29
      },
      {
        "line": 1082,
        "column": 9
      },
      {
        "line": 1082,
        "column": 28
      },
      {
        "line": 1083,
        "column": 9
      },
      {
        "line": 1083,
        "column": 33
      },
      {
        "line": 1084,
        "column": 9
      },
      {
        "line": 1084,
        "column": 33
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1077,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getString(in, \"key\", \"defualt\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getString(in, \"key\", \"defualt\"));"
      },
      {
        "testCodeLocation": {
          "line": 1081,
          "column": 9
        },
        "assert": "assertEquals(\"str\", MapUtils.getString(in, \"key\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getString(in, \"key\"));"
      },
      {
        "testCodeLocation": {
          "line": 1082,
          "column": 9
        },
        "assert": "assertEquals(null, MapUtils.getString(null, \"key\"));",
        "slice": "assertEquals(null, MapUtils.getString(null, \"key\"));"
      },
      {
        "testCodeLocation": {
          "line": 1083,
          "column": 9
        },
        "assert": "assertEquals(\"default\", MapUtils.getString(in, \"noKey\", \"default\"));",
        "slice": "final Map\u003cString, String\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"default\", MapUtils.getString(in, \"noKey\", \"default\"));"
      },
      {
        "testCodeLocation": {
          "line": 1084,
          "column": 9
        },
        "assert": "assertEquals(\"default\", MapUtils.getString(null, \"noKey\", \"default\"));",
        "slice": "assertEquals(\"default\", MapUtils.getString(null, \"noKey\", \"default\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetObject()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Object\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getObject(in, \"key\", \"defualt\"));assertEquals(\"str\", MapUtils.getObject(in, \"key\"));assertEquals(null, MapUtils.getObject(null, \"key\"));assertEquals(\"default\", MapUtils.getObject(in, \"noKey\", \"default\"));assertEquals(\"default\", MapUtils.getObject(null, \"noKey\", \"default\"));",
    "offset": [
      {
        "line": 1090,
        "column": 40
      },
      {
        "line": 1091,
        "column": 9
      },
      {
        "line": 1093,
        "column": 9
      },
      {
        "line": 1093,
        "column": 29
      },
      {
        "line": 1094,
        "column": 9
      },
      {
        "line": 1094,
        "column": 29
      },
      {
        "line": 1095,
        "column": 9
      },
      {
        "line": 1095,
        "column": 28
      },
      {
        "line": 1096,
        "column": 9
      },
      {
        "line": 1096,
        "column": 33
      },
      {
        "line": 1097,
        "column": 9
      },
      {
        "line": 1097,
        "column": 33
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1090,
          "column": 9
        },
        "assert": "final Map\u003cString, Object\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getObject(in, \"key\", \"defualt\"));",
        "slice": "final Map\u003cString, Object\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getObject(in, \"key\", \"defualt\"));"
      },
      {
        "testCodeLocation": {
          "line": 1094,
          "column": 9
        },
        "assert": "assertEquals(\"str\", MapUtils.getObject(in, \"key\"));",
        "slice": "final Map\u003cString, Object\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"str\", MapUtils.getObject(in, \"key\"));"
      },
      {
        "testCodeLocation": {
          "line": 1095,
          "column": 9
        },
        "assert": "assertEquals(null, MapUtils.getObject(null, \"key\"));",
        "slice": "assertEquals(null, MapUtils.getObject(null, \"key\"));"
      },
      {
        "testCodeLocation": {
          "line": 1096,
          "column": 9
        },
        "assert": "assertEquals(\"default\", MapUtils.getObject(in, \"noKey\", \"default\"));",
        "slice": "final Map\u003cString, Object\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", \"str\");assertEquals(\"default\", MapUtils.getObject(in, \"noKey\", \"default\"));"
      },
      {
        "testCodeLocation": {
          "line": 1097,
          "column": 9
        },
        "assert": "assertEquals(\"default\", MapUtils.getObject(null, \"noKey\", \"default\"));",
        "slice": "assertEquals(\"default\", MapUtils.getObject(null, \"noKey\", \"default\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetBooleanValue()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBooleanValue(in, \"key\", true));assertTrue(MapUtils.getBooleanValue(in, \"key\"));assertTrue(MapUtils.getBooleanValue(in, \"noKey\", true));assertTrue(!MapUtils.getBooleanValue(in, \"noKey\"));assertTrue(MapUtils.getBoolean(in, \"key\", true));assertTrue(MapUtils.getBoolean(in, \"noKey\", true));assertEquals(null, MapUtils.getBoolean(null, \"noKey\"));final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"true\");assertTrue(MapUtils.getBooleanValue(inStr, \"str1\", true));assertTrue(MapUtils.getBoolean(inStr, \"str1\", true));",
    "offset": [
      {
        "line": 1103,
        "column": 41
      },
      {
        "line": 1104,
        "column": 9
      },
      {
        "line": 1106,
        "column": 9
      },
      {
        "line": 1106,
        "column": 20
      },
      {
        "line": 1107,
        "column": 9
      },
      {
        "line": 1107,
        "column": 20
      },
      {
        "line": 1108,
        "column": 9
      },
      {
        "line": 1108,
        "column": 20
      },
      {
        "line": 1109,
        "column": 9
      },
      {
        "line": 1109,
        "column": 21
      },
      {
        "line": 1110,
        "column": 9
      },
      {
        "line": 1110,
        "column": 20
      },
      {
        "line": 1111,
        "column": 9
      },
      {
        "line": 1111,
        "column": 20
      },
      {
        "line": 1112,
        "column": 9
      },
      {
        "line": 1112,
        "column": 28
      },
      {
        "line": 1116,
        "column": 43
      },
      {
        "line": 1117,
        "column": 9
      },
      {
        "line": 1119,
        "column": 9
      },
      {
        "line": 1119,
        "column": 20
      },
      {
        "line": 1120,
        "column": 9
      },
      {
        "line": 1120,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1120,
          "column": 9
        },
        "assert": "assertTrue(MapUtils.getBoolean(inStr, \"str1\", true));",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"true\");assertTrue(MapUtils.getBoolean(inStr, \"str1\", true));"
      },
      {
        "testCodeLocation": {
          "line": 1107,
          "column": 9
        },
        "assert": "assertTrue(MapUtils.getBooleanValue(in, \"key\"));",
        "slice": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBooleanValue(in, \"key\"));"
      },
      {
        "testCodeLocation": {
          "line": 1108,
          "column": 9
        },
        "assert": "assertTrue(MapUtils.getBooleanValue(in, \"noKey\", true));",
        "slice": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBooleanValue(in, \"noKey\", true));"
      },
      {
        "testCodeLocation": {
          "line": 1109,
          "column": 9
        },
        "assert": "assertTrue(!MapUtils.getBooleanValue(in, \"noKey\"));",
        "slice": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(!MapUtils.getBooleanValue(in, \"noKey\"));"
      },
      {
        "testCodeLocation": {
          "line": 1110,
          "column": 9
        },
        "assert": "assertTrue(MapUtils.getBoolean(in, \"key\", true));",
        "slice": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBoolean(in, \"key\", true));"
      },
      {
        "testCodeLocation": {
          "line": 1111,
          "column": 9
        },
        "assert": "assertTrue(MapUtils.getBoolean(in, \"noKey\", true));",
        "slice": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBoolean(in, \"noKey\", true));"
      },
      {
        "testCodeLocation": {
          "line": 1112,
          "column": 9
        },
        "assert": "assertEquals(null, MapUtils.getBoolean(null, \"noKey\"));",
        "slice": "assertEquals(null, MapUtils.getBoolean(null, \"noKey\"));"
      },
      {
        "testCodeLocation": {
          "line": 1116,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"true\");assertTrue(MapUtils.getBooleanValue(inStr, \"str1\", true));",
        "slice": "final Map\u003cString, String\u003e inStr \u003d new HashMap\u003c\u003e();inStr.put(\"str1\", \"true\");assertTrue(MapUtils.getBooleanValue(inStr, \"str1\", true));"
      },
      {
        "testCodeLocation": {
          "line": 1103,
          "column": 9
        },
        "assert": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBooleanValue(in, \"key\", true));",
        "slice": "final Map\u003cString, Boolean\u003e in \u003d new HashMap\u003c\u003e();in.put(\"key\", true);assertTrue(MapUtils.getBooleanValue(in, \"key\", true));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testgetMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Map\u003cString, String\u003e\u003e in \u003d new HashMap\u003c\u003e();final Map\u003cString, String\u003e valMap \u003d new HashMap\u003c\u003e();valMap.put(\"key1\", \"value1\");in.put(\"key1\", valMap);final Map\u003c?, ?\u003e outValue \u003d MapUtils.getMap(in, \"key1\", null);assertEquals(\"value1\", outValue.get(\"key1\"));assertEquals(null, outValue.get(\"key2\"));assertEquals(null, MapUtils.getMap(in, \"key2\", null));assertEquals(null, MapUtils.getMap(null, \"key2\", null));",
    "offset": [
      {
        "line": 1127,
        "column": 52
      },
      {
        "line": 1128,
        "column": 44
      },
      {
        "line": 1129,
        "column": 9
      },
      {
        "line": 1130,
        "column": 9
      },
      {
        "line": 1131,
        "column": 37
      },
      {
        "line": 1133,
        "column": 9
      },
      {
        "line": 1133,
        "column": 32
      },
      {
        "line": 1134,
        "column": 9
      },
      {
        "line": 1134,
        "column": 28
      },
      {
        "line": 1135,
        "column": 9
      },
      {
        "line": 1135,
        "column": 28
      },
      {
        "line": 1136,
        "column": 9
      },
      {
        "line": 1136,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1136,
          "column": 9
        },
        "assert": "assertEquals(null, MapUtils.getMap(null, \"key2\", null));",
        "slice": "final Map\u003cString, Map\u003cString, String\u003e\u003e in \u003d new HashMap\u003c\u003e();final Map\u003cString, String\u003e valMap \u003d new HashMap\u003c\u003e();valMap.put(\"key1\", \"value1\");in.put(\"key1\", valMap);final Map\u003c?, ?\u003e outValue \u003d MapUtils.getMap(in, \"key1\", null);assertEquals(null, MapUtils.getMap(null, \"key2\", null));"
      },
      {
        "testCodeLocation": {
          "line": 1127,
          "column": 9
        },
        "assert": "final Map\u003cString, Map\u003cString, String\u003e\u003e in \u003d new HashMap\u003c\u003e();final Map\u003cString, String\u003e valMap \u003d new HashMap\u003c\u003e();valMap.put(\"key1\", \"value1\");in.put(\"key1\", valMap);final Map\u003c?, ?\u003e outValue \u003d MapUtils.getMap(in, \"key1\", null);assertEquals(\"value1\", outValue.get(\"key1\"));",
        "slice": "final Map\u003cString, Map\u003cString, String\u003e\u003e in \u003d new HashMap\u003c\u003e();final Map\u003cString, String\u003e valMap \u003d new HashMap\u003c\u003e();valMap.put(\"key1\", \"value1\");in.put(\"key1\", valMap);final Map\u003c?, ?\u003e outValue \u003d MapUtils.getMap(in, \"key1\", null);assertEquals(\"value1\", outValue.get(\"key1\"));"
      },
      {
        "testCodeLocation": {
          "line": 1134,
          "column": 9
        },
        "assert": "assertEquals(null, outValue.get(\"key2\"));",
        "slice": "final Map\u003cString, Map\u003cString, String\u003e\u003e in \u003d new HashMap\u003c\u003e();final Map\u003cString, String\u003e valMap \u003d new HashMap\u003c\u003e();valMap.put(\"key1\", \"value1\");in.put(\"key1\", valMap);final Map\u003c?, ?\u003e outValue \u003d MapUtils.getMap(in, \"key1\", null);assertEquals(null, outValue.get(\"key2\"));"
      },
      {
        "testCodeLocation": {
          "line": 1135,
          "column": 9
        },
        "assert": "assertEquals(null, MapUtils.getMap(in, \"key2\", null));",
        "slice": "final Map\u003cString, Map\u003cString, String\u003e\u003e in \u003d new HashMap\u003c\u003e();final Map\u003cString, String\u003e valMap \u003d new HashMap\u003c\u003e();valMap.put(\"key1\", \"value1\");in.put(\"key1\", valMap);final Map\u003c?, ?\u003e outValue \u003d MapUtils.getMap(in, \"key1\", null);assertEquals(null, MapUtils.getMap(in, \"key2\", null));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testSafeAddToMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, Object\u003e inMap \u003d new HashMap\u003c\u003e();MapUtils.safeAddToMap(inMap, \"key1\", \"value1\");MapUtils.safeAddToMap(inMap, \"key2\", null);assertEquals(\"value1\", inMap.get(\"key1\"));assertEquals(\"\", inMap.get(\"key2\"));",
    "offset": [
      {
        "line": 1142,
        "column": 43
      },
      {
        "line": 1144,
        "column": 9
      },
      {
        "line": 1145,
        "column": 9
      },
      {
        "line": 1146,
        "column": 9
      },
      {
        "line": 1146,
        "column": 32
      },
      {
        "line": 1147,
        "column": 9
      },
      {
        "line": 1147,
        "column": 26
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1142,
          "column": 9
        },
        "assert": "final Map\u003cString, Object\u003e inMap \u003d new HashMap\u003c\u003e();MapUtils.safeAddToMap(inMap, \"key1\", \"value1\");MapUtils.safeAddToMap(inMap, \"key2\", null);assertEquals(\"value1\", inMap.get(\"key1\"));",
        "slice": "final Map\u003cString, Object\u003e inMap \u003d new HashMap\u003c\u003e();MapUtils.safeAddToMap(inMap, \"key1\", \"value1\");MapUtils.safeAddToMap(inMap, \"key2\", null);assertEquals(\"value1\", inMap.get(\"key1\"));"
      },
      {
        "testCodeLocation": {
          "line": 1147,
          "column": 9
        },
        "assert": "assertEquals(\"\", inMap.get(\"key2\"));",
        "slice": "final Map\u003cString, Object\u003e inMap \u003d new HashMap\u003c\u003e();assertEquals(\"\", inMap.get(\"key2\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.MapUtilsTest.testOrderedMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e inMap \u003d new HashMap\u003c\u003e();inMap.put(\"key1\", \"value1\");inMap.put(\"key2\", \"value2\");final Map\u003cString, String\u003e map \u003d MapUtils.orderedMap(inMap);assertTrue(\"returned object should be a OrderedMap\", map instanceof OrderedMap);",
    "offset": [
      {
        "line": 1152,
        "column": 40
      },
      {
        "line": 1153,
        "column": 6
      },
      {
        "line": 1154,
        "column": 6
      },
      {
        "line": 1155,
        "column": 41
      },
      {
        "line": 1156,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1152,
          "column": 6
        },
        "assert": "final Map\u003cString, String\u003e inMap \u003d new HashMap\u003c\u003e();inMap.put(\"key1\", \"value1\");inMap.put(\"key2\", \"value2\");final Map\u003cString, String\u003e map \u003d MapUtils.orderedMap(inMap);assertTrue(\"returned object should be a OrderedMap\", map instanceof OrderedMap);",
        "slice": "final Map\u003cString, String\u003e inMap \u003d new HashMap\u003c\u003e();inMap.put(\"key1\", \"value1\");inMap.put(\"key2\", \"value2\");final Map\u003cString, String\u003e map \u003d MapUtils.orderedMap(inMap);assertTrue(\"returned object should be a OrderedMap\", map instanceof OrderedMap);"
      }
    ]
  }
]