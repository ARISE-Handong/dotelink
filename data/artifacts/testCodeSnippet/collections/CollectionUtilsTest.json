[
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getCardinalityMap()",
    "annotation": "@Test",
    "code": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertEquals(1, (int) freqA.get(1));assertEquals(2, (int) freqA.get(2));assertEquals(3, (int) freqA.get(3));assertEquals(4, (int) freqA.get(4));assertNull(freqA.get(5));final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertNull(freqB.get(1L));assertEquals(4, (int) freqB.get(2L));assertEquals(3, (int) freqB.get(3L));assertEquals(2, (int) freqB.get(4L));assertEquals(1, (int) freqB.get(5L));",
    "offset": [
      {
        "line": 179,
        "column": 44
      },
      {
        "line": 180,
        "column": 9
      },
      {
        "line": 180,
        "column": 31
      },
      {
        "line": 181,
        "column": 9
      },
      {
        "line": 181,
        "column": 31
      },
      {
        "line": 182,
        "column": 9
      },
      {
        "line": 182,
        "column": 31
      },
      {
        "line": 183,
        "column": 9
      },
      {
        "line": 183,
        "column": 31
      },
      {
        "line": 184,
        "column": 9
      },
      {
        "line": 184,
        "column": 20
      },
      {
        "line": 186,
        "column": 42
      },
      {
        "line": 187,
        "column": 9
      },
      {
        "line": 187,
        "column": 20
      },
      {
        "line": 188,
        "column": 9
      },
      {
        "line": 188,
        "column": 31
      },
      {
        "line": 189,
        "column": 9
      },
      {
        "line": 189,
        "column": 31
      },
      {
        "line": 190,
        "column": 9
      },
      {
        "line": 190,
        "column": 31
      },
      {
        "line": 191,
        "column": 9
      },
      {
        "line": 191,
        "column": 31
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 179,
          "column": 9
        },
        "assert": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertEquals(1, (int) freqA.get(1));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertEquals(1, (int) freqA.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 181,
          "column": 9
        },
        "assert": "assertEquals(2, (int) freqA.get(2));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertEquals(2, (int) freqA.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 182,
          "column": 9
        },
        "assert": "assertEquals(3, (int) freqA.get(3));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertEquals(3, (int) freqA.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 183,
          "column": 9
        },
        "assert": "assertEquals(4, (int) freqA.get(4));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertEquals(4, (int) freqA.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 184,
          "column": 9
        },
        "assert": "assertNull(freqA.get(5));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);assertNull(freqA.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 186,
          "column": 9
        },
        "assert": "final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertNull(freqB.get(1L));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertNull(freqB.get(1L));"
      },
      {
        "testCodeLocation": {
          "line": 188,
          "column": 9
        },
        "assert": "assertEquals(4, (int) freqB.get(2L));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertEquals(4, (int) freqB.get(2L));"
      },
      {
        "testCodeLocation": {
          "line": 189,
          "column": 9
        },
        "assert": "assertEquals(3, (int) freqB.get(3L));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertEquals(3, (int) freqB.get(3L));"
      },
      {
        "testCodeLocation": {
          "line": 190,
          "column": 9
        },
        "assert": "assertEquals(2, (int) freqB.get(4L));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertEquals(2, (int) freqB.get(4L));"
      },
      {
        "testCodeLocation": {
          "line": 191,
          "column": 9
        },
        "assert": "assertEquals(1, (int) freqB.get(5L));",
        "slice": "final Map\u003cNumber, Integer\u003e freqA \u003d CollectionUtils.\u003cNumber\u003egetCardinalityMap(iterableA);final Map\u003cLong, Integer\u003e freqB \u003d CollectionUtils.getCardinalityMap(iterableB);assertEquals(1, (int) freqB.get(5L));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.containsAll()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final Collection\u003cString\u003e multiples \u003d new ArrayList\u003c\u003e(3);multiples.add(\"1\");multiples.add(\"3\");multiples.add(\"1\");assertTrue(\"containsAll({1},{1,3}) should return false.\", !CollectionUtils.containsAll(one, odds));assertTrue(\"containsAll({1,3},{1}) should return true.\", CollectionUtils.containsAll(odds, one));assertTrue(\"containsAll({3},{1,3}) should return false.\", !CollectionUtils.containsAll(three, odds));assertTrue(\"containsAll({1,3},{3}) should return true.\", CollectionUtils.containsAll(odds, three));assertTrue(\"containsAll({2},{2}) should return true.\", CollectionUtils.containsAll(two, two));assertTrue(\"containsAll({1,3},{1,3}) should return true.\", CollectionUtils.containsAll(odds, odds));assertTrue(\"containsAll({2},{1,3}) should return false.\", !CollectionUtils.containsAll(two, odds));assertTrue(\"containsAll({1,3},{2}) should return false.\", !CollectionUtils.containsAll(odds, two));assertTrue(\"containsAll({1},{3}) should return false.\", !CollectionUtils.containsAll(one, three));assertTrue(\"containsAll({3},{1}) should return false.\", !CollectionUtils.containsAll(three, one));assertTrue(\"containsAll({1,3},{}) should return true.\", CollectionUtils.containsAll(odds, empty));assertTrue(\"containsAll({},{1,3}) should return false.\", !CollectionUtils.containsAll(empty, odds));assertTrue(\"containsAll({},{}) should return true.\", CollectionUtils.containsAll(empty, empty));assertTrue(\"containsAll({1,3},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, multiples));assertTrue(\"containsAll({1,3,1},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, odds));",
    "offset": [
      {
        "line": 287,
        "column": 42
      },
      {
        "line": 288,
        "column": 40
      },
      {
        "line": 289,
        "column": 9
      },
      {
        "line": 290,
        "column": 40
      },
      {
        "line": 291,
        "column": 9
      },
      {
        "line": 292,
        "column": 42
      },
      {
        "line": 293,
        "column": 9
      },
      {
        "line": 294,
        "column": 41
      },
      {
        "line": 295,
        "column": 9
      },
      {
        "line": 296,
        "column": 9
      },
      {
        "line": 297,
        "column": 46
      },
      {
        "line": 298,
        "column": 9
      },
      {
        "line": 299,
        "column": 9
      },
      {
        "line": 300,
        "column": 9
      },
      {
        "line": 302,
        "column": 9
      },
      {
        "line": 302,
        "column": 68
      },
      {
        "line": 303,
        "column": 9
      },
      {
        "line": 303,
        "column": 66
      },
      {
        "line": 304,
        "column": 9
      },
      {
        "line": 304,
        "column": 68
      },
      {
        "line": 305,
        "column": 9
      },
      {
        "line": 305,
        "column": 66
      },
      {
        "line": 306,
        "column": 9
      },
      {
        "line": 306,
        "column": 64
      },
      {
        "line": 307,
        "column": 9
      },
      {
        "line": 307,
        "column": 68
      },
      {
        "line": 309,
        "column": 9
      },
      {
        "line": 309,
        "column": 68
      },
      {
        "line": 310,
        "column": 9
      },
      {
        "line": 310,
        "column": 68
      },
      {
        "line": 311,
        "column": 9
      },
      {
        "line": 311,
        "column": 66
      },
      {
        "line": 312,
        "column": 9
      },
      {
        "line": 312,
        "column": 66
      },
      {
        "line": 313,
        "column": 9
      },
      {
        "line": 313,
        "column": 65
      },
      {
        "line": 314,
        "column": 9
      },
      {
        "line": 314,
        "column": 67
      },
      {
        "line": 315,
        "column": 9
      },
      {
        "line": 315,
        "column": 62
      },
      {
        "line": 317,
        "column": 9
      },
      {
        "line": 317,
        "column": 70
      },
      {
        "line": 318,
        "column": 9
      },
      {
        "line": 318,
        "column": 72
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 303,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3},{1}) should return true.\", CollectionUtils.containsAll(odds, one));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({1,3},{1}) should return true.\", CollectionUtils.containsAll(odds, one));"
      },
      {
        "testCodeLocation": {
          "line": 304,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({3},{1,3}) should return false.\", !CollectionUtils.containsAll(three, odds));",
        "slice": "final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({3},{1,3}) should return false.\", !CollectionUtils.containsAll(three, odds));"
      },
      {
        "testCodeLocation": {
          "line": 305,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3},{3}) should return true.\", CollectionUtils.containsAll(odds, three));",
        "slice": "final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({1,3},{3}) should return true.\", CollectionUtils.containsAll(odds, three));"
      },
      {
        "testCodeLocation": {
          "line": 306,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({2},{2}) should return true.\", CollectionUtils.containsAll(two, two));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");assertTrue(\"containsAll({2},{2}) should return true.\", CollectionUtils.containsAll(two, two));"
      },
      {
        "testCodeLocation": {
          "line": 307,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3},{1,3}) should return true.\", CollectionUtils.containsAll(odds, odds));",
        "slice": "final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({1,3},{1,3}) should return true.\", CollectionUtils.containsAll(odds, odds));"
      },
      {
        "testCodeLocation": {
          "line": 309,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({2},{1,3}) should return false.\", !CollectionUtils.containsAll(two, odds));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({2},{1,3}) should return false.\", !CollectionUtils.containsAll(two, odds));"
      },
      {
        "testCodeLocation": {
          "line": 310,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3},{2}) should return false.\", !CollectionUtils.containsAll(odds, two));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({1,3},{2}) should return false.\", !CollectionUtils.containsAll(odds, two));"
      },
      {
        "testCodeLocation": {
          "line": 311,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1},{3}) should return false.\", !CollectionUtils.containsAll(one, three));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");assertTrue(\"containsAll({1},{3}) should return false.\", !CollectionUtils.containsAll(one, three));"
      },
      {
        "testCodeLocation": {
          "line": 312,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({3},{1}) should return false.\", !CollectionUtils.containsAll(three, one));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");assertTrue(\"containsAll({3},{1}) should return false.\", !CollectionUtils.containsAll(three, one));"
      },
      {
        "testCodeLocation": {
          "line": 313,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3},{}) should return true.\", CollectionUtils.containsAll(odds, empty));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({1,3},{}) should return true.\", CollectionUtils.containsAll(odds, empty));"
      },
      {
        "testCodeLocation": {
          "line": 314,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({},{1,3}) should return false.\", !CollectionUtils.containsAll(empty, odds));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({},{1,3}) should return false.\", !CollectionUtils.containsAll(empty, odds));"
      },
      {
        "testCodeLocation": {
          "line": 315,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({},{}) should return true.\", CollectionUtils.containsAll(empty, empty));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);assertTrue(\"containsAll({},{}) should return true.\", CollectionUtils.containsAll(empty, empty));"
      },
      {
        "testCodeLocation": {
          "line": 317,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, multiples));",
        "slice": "final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final Collection\u003cString\u003e multiples \u003d new ArrayList\u003c\u003e(3);multiples.add(\"1\");multiples.add(\"3\");multiples.add(\"1\");assertTrue(\"containsAll({1,3},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, multiples));"
      },
      {
        "testCodeLocation": {
          "line": 318,
          "column": 9
        },
        "assert": "assertTrue(\"containsAll({1,3,1},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, odds));",
        "slice": "final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAll({1,3,1},{1,3,1}) should return true.\", CollectionUtils.containsAll(odds, odds));"
      },
      {
        "testCodeLocation": {
          "line": 287,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final Collection\u003cString\u003e multiples \u003d new ArrayList\u003c\u003e(3);multiples.add(\"1\");multiples.add(\"3\");multiples.add(\"1\");assertTrue(\"containsAll({1},{1,3}) should return false.\", !CollectionUtils.containsAll(one, odds));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final Collection\u003cString\u003e multiples \u003d new ArrayList\u003c\u003e(3);multiples.add(\"1\");multiples.add(\"3\");multiples.add(\"1\");assertTrue(\"containsAll({1},{1,3}) should return false.\", !CollectionUtils.containsAll(one, odds));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.containsAnyInCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1},{1,3}) should return true.\", CollectionUtils.containsAny(one, odds));assertTrue(\"containsAny({1,3},{1}) should return true.\", CollectionUtils.containsAny(odds, one));assertTrue(\"containsAny({3},{1,3}) should return true.\", CollectionUtils.containsAny(three, odds));assertTrue(\"containsAny({1,3},{3}) should return true.\", CollectionUtils.containsAny(odds, three));assertTrue(\"containsAny({2},{2}) should return true.\", CollectionUtils.containsAny(two, two));assertTrue(\"containsAny({1,3},{1,3}) should return true.\", CollectionUtils.containsAny(odds, odds));assertTrue(\"containsAny({2},{1,3}) should return false.\", !CollectionUtils.containsAny(two, odds));assertTrue(\"containsAny({1,3},{2}) should return false.\", !CollectionUtils.containsAny(odds, two));assertTrue(\"containsAny({1},{3}) should return false.\", !CollectionUtils.containsAny(one, three));assertTrue(\"containsAny({3},{1}) should return false.\", !CollectionUtils.containsAny(three, one));assertTrue(\"containsAny({1,3},{}) should return false.\", !CollectionUtils.containsAny(odds, empty));assertTrue(\"containsAny({},{1,3}) should return false.\", !CollectionUtils.containsAny(empty, odds));assertTrue(\"containsAny({},{}) should return false.\", !CollectionUtils.containsAny(empty, empty));",
    "offset": [
      {
        "line": 323,
        "column": 42
      },
      {
        "line": 324,
        "column": 40
      },
      {
        "line": 325,
        "column": 9
      },
      {
        "line": 326,
        "column": 40
      },
      {
        "line": 327,
        "column": 9
      },
      {
        "line": 328,
        "column": 42
      },
      {
        "line": 329,
        "column": 9
      },
      {
        "line": 330,
        "column": 41
      },
      {
        "line": 331,
        "column": 9
      },
      {
        "line": 332,
        "column": 9
      },
      {
        "line": 334,
        "column": 9
      },
      {
        "line": 334,
        "column": 66
      },
      {
        "line": 335,
        "column": 9
      },
      {
        "line": 335,
        "column": 66
      },
      {
        "line": 336,
        "column": 9
      },
      {
        "line": 336,
        "column": 66
      },
      {
        "line": 337,
        "column": 9
      },
      {
        "line": 337,
        "column": 66
      },
      {
        "line": 338,
        "column": 9
      },
      {
        "line": 338,
        "column": 64
      },
      {
        "line": 339,
        "column": 9
      },
      {
        "line": 339,
        "column": 68
      },
      {
        "line": 341,
        "column": 9
      },
      {
        "line": 341,
        "column": 68
      },
      {
        "line": 342,
        "column": 9
      },
      {
        "line": 342,
        "column": 68
      },
      {
        "line": 343,
        "column": 9
      },
      {
        "line": 343,
        "column": 66
      },
      {
        "line": 344,
        "column": 9
      },
      {
        "line": 344,
        "column": 66
      },
      {
        "line": 345,
        "column": 9
      },
      {
        "line": 345,
        "column": 67
      },
      {
        "line": 346,
        "column": 9
      },
      {
        "line": 346,
        "column": 67
      },
      {
        "line": 347,
        "column": 9
      },
      {
        "line": 347,
        "column": 64
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 323,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1},{1,3}) should return true.\", CollectionUtils.containsAny(one, odds));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1},{1,3}) should return true.\", CollectionUtils.containsAny(one, odds));"
      },
      {
        "testCodeLocation": {
          "line": 335,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{1}) should return true.\", CollectionUtils.containsAny(odds, one));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{1}) should return true.\", CollectionUtils.containsAny(odds, one));"
      },
      {
        "testCodeLocation": {
          "line": 336,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({3},{1,3}) should return true.\", CollectionUtils.containsAny(three, odds));",
        "slice": "final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({3},{1,3}) should return true.\", CollectionUtils.containsAny(three, odds));"
      },
      {
        "testCodeLocation": {
          "line": 337,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{3}) should return true.\", CollectionUtils.containsAny(odds, three));",
        "slice": "final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{3}) should return true.\", CollectionUtils.containsAny(odds, three));"
      },
      {
        "testCodeLocation": {
          "line": 338,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({2},{2}) should return true.\", CollectionUtils.containsAny(two, two));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");assertTrue(\"containsAny({2},{2}) should return true.\", CollectionUtils.containsAny(two, two));"
      },
      {
        "testCodeLocation": {
          "line": 339,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{1,3}) should return true.\", CollectionUtils.containsAny(odds, odds));",
        "slice": "final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{1,3}) should return true.\", CollectionUtils.containsAny(odds, odds));"
      },
      {
        "testCodeLocation": {
          "line": 341,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({2},{1,3}) should return false.\", !CollectionUtils.containsAny(two, odds));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({2},{1,3}) should return false.\", !CollectionUtils.containsAny(two, odds));"
      },
      {
        "testCodeLocation": {
          "line": 342,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{2}) should return false.\", !CollectionUtils.containsAny(odds, two));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{2}) should return false.\", !CollectionUtils.containsAny(odds, two));"
      },
      {
        "testCodeLocation": {
          "line": 343,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1},{3}) should return false.\", !CollectionUtils.containsAny(one, three));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");assertTrue(\"containsAny({1},{3}) should return false.\", !CollectionUtils.containsAny(one, three));"
      },
      {
        "testCodeLocation": {
          "line": 344,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({3},{1}) should return false.\", !CollectionUtils.containsAny(three, one));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");assertTrue(\"containsAny({3},{1}) should return false.\", !CollectionUtils.containsAny(three, one));"
      },
      {
        "testCodeLocation": {
          "line": 345,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{}) should return false.\", !CollectionUtils.containsAny(odds, empty));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{}) should return false.\", !CollectionUtils.containsAny(odds, empty));"
      },
      {
        "testCodeLocation": {
          "line": 346,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({},{1,3}) should return false.\", !CollectionUtils.containsAny(empty, odds));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({},{1,3}) should return false.\", !CollectionUtils.containsAny(empty, odds));"
      },
      {
        "testCodeLocation": {
          "line": 347,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({},{}) should return false.\", !CollectionUtils.containsAny(empty, empty));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);assertTrue(\"containsAny({},{}) should return false.\", !CollectionUtils.containsAny(empty, empty));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.containsAnyInArray()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final String[] emptyArr \u003d {};final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final String[] oneArr \u003d { \"1\" };final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final String[] twoArr \u003d { \"2\" };final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final String[] threeArr \u003d { \"3\" };final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({1},{1,3}) should return true.\", CollectionUtils.containsAny(one, oddsArr));assertTrue(\"containsAny({1,3},{1}) should return true.\", CollectionUtils.containsAny(odds, oneArr));assertTrue(\"containsAny({3},{1,3}) should return true.\", CollectionUtils.containsAny(three, oddsArr));assertTrue(\"containsAny({1,3},{3}) should return true.\", CollectionUtils.containsAny(odds, threeArr));assertTrue(\"containsAny({2},{2}) should return true.\", CollectionUtils.containsAny(two, twoArr));assertTrue(\"containsAny({1,3},{1,3}) should return true.\", CollectionUtils.containsAny(odds, oddsArr));assertTrue(\"containsAny({2},{1,3}) should return false.\", !CollectionUtils.containsAny(two, oddsArr));assertTrue(\"containsAny({1,3},{2}) should return false.\", !CollectionUtils.containsAny(odds, twoArr));assertTrue(\"containsAny({1},{3}) should return false.\", !CollectionUtils.containsAny(one, threeArr));assertTrue(\"containsAny({3},{1}) should return false.\", !CollectionUtils.containsAny(three, oneArr));assertTrue(\"containsAny({1,3},{}) should return false.\", !CollectionUtils.containsAny(odds, emptyArr));assertTrue(\"containsAny({},{1,3}) should return false.\", !CollectionUtils.containsAny(empty, oddsArr));assertTrue(\"containsAny({},{}) should return false.\", !CollectionUtils.containsAny(empty, emptyArr));",
    "offset": [
      {
        "line": 352,
        "column": 42
      },
      {
        "line": 354,
        "column": 40
      },
      {
        "line": 355,
        "column": 9
      },
      {
        "line": 357,
        "column": 40
      },
      {
        "line": 358,
        "column": 9
      },
      {
        "line": 360,
        "column": 42
      },
      {
        "line": 361,
        "column": 9
      },
      {
        "line": 363,
        "column": 41
      },
      {
        "line": 364,
        "column": 9
      },
      {
        "line": 365,
        "column": 9
      },
      {
        "line": 368,
        "column": 9
      },
      {
        "line": 368,
        "column": 66
      },
      {
        "line": 369,
        "column": 9
      },
      {
        "line": 369,
        "column": 66
      },
      {
        "line": 370,
        "column": 9
      },
      {
        "line": 370,
        "column": 66
      },
      {
        "line": 371,
        "column": 9
      },
      {
        "line": 371,
        "column": 66
      },
      {
        "line": 372,
        "column": 9
      },
      {
        "line": 372,
        "column": 64
      },
      {
        "line": 373,
        "column": 9
      },
      {
        "line": 373,
        "column": 68
      },
      {
        "line": 375,
        "column": 9
      },
      {
        "line": 375,
        "column": 68
      },
      {
        "line": 376,
        "column": 9
      },
      {
        "line": 376,
        "column": 68
      },
      {
        "line": 377,
        "column": 9
      },
      {
        "line": 377,
        "column": 66
      },
      {
        "line": 378,
        "column": 9
      },
      {
        "line": 378,
        "column": 66
      },
      {
        "line": 379,
        "column": 9
      },
      {
        "line": 379,
        "column": 67
      },
      {
        "line": 380,
        "column": 9
      },
      {
        "line": 380,
        "column": 67
      },
      {
        "line": 381,
        "column": 9
      },
      {
        "line": 381,
        "column": 64
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 352,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final String[] emptyArr \u003d {};final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final String[] oneArr \u003d { \"1\" };final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final String[] twoArr \u003d { \"2\" };final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final String[] threeArr \u003d { \"3\" };final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({1},{1,3}) should return true.\", CollectionUtils.containsAny(one, oddsArr));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final String[] emptyArr \u003d {};final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final String[] oneArr \u003d { \"1\" };final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final String[] twoArr \u003d { \"2\" };final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final String[] threeArr \u003d { \"3\" };final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({1},{1,3}) should return true.\", CollectionUtils.containsAny(one, oddsArr));"
      },
      {
        "testCodeLocation": {
          "line": 369,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{1}) should return true.\", CollectionUtils.containsAny(odds, oneArr));",
        "slice": "final String[] oneArr \u003d { \"1\" };final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{1}) should return true.\", CollectionUtils.containsAny(odds, oneArr));"
      },
      {
        "testCodeLocation": {
          "line": 370,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({3},{1,3}) should return true.\", CollectionUtils.containsAny(three, oddsArr));",
        "slice": "final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({3},{1,3}) should return true.\", CollectionUtils.containsAny(three, oddsArr));"
      },
      {
        "testCodeLocation": {
          "line": 371,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{3}) should return true.\", CollectionUtils.containsAny(odds, threeArr));",
        "slice": "final String[] threeArr \u003d { \"3\" };final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{3}) should return true.\", CollectionUtils.containsAny(odds, threeArr));"
      },
      {
        "testCodeLocation": {
          "line": 372,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({2},{2}) should return true.\", CollectionUtils.containsAny(two, twoArr));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final String[] twoArr \u003d { \"2\" };assertTrue(\"containsAny({2},{2}) should return true.\", CollectionUtils.containsAny(two, twoArr));"
      },
      {
        "testCodeLocation": {
          "line": 373,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{1,3}) should return true.\", CollectionUtils.containsAny(odds, oddsArr));",
        "slice": "final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({1,3},{1,3}) should return true.\", CollectionUtils.containsAny(odds, oddsArr));"
      },
      {
        "testCodeLocation": {
          "line": 375,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({2},{1,3}) should return false.\", !CollectionUtils.containsAny(two, oddsArr));",
        "slice": "final Collection\u003cString\u003e two \u003d new ArrayList\u003c\u003e(1);two.add(\"2\");final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({2},{1,3}) should return false.\", !CollectionUtils.containsAny(two, oddsArr));"
      },
      {
        "testCodeLocation": {
          "line": 376,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{2}) should return false.\", !CollectionUtils.containsAny(odds, twoArr));",
        "slice": "final String[] twoArr \u003d { \"2\" };final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{2}) should return false.\", !CollectionUtils.containsAny(odds, twoArr));"
      },
      {
        "testCodeLocation": {
          "line": 377,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1},{3}) should return false.\", !CollectionUtils.containsAny(one, threeArr));",
        "slice": "final Collection\u003cString\u003e one \u003d new ArrayList\u003c\u003e(1);one.add(\"1\");final String[] threeArr \u003d { \"3\" };assertTrue(\"containsAny({1},{3}) should return false.\", !CollectionUtils.containsAny(one, threeArr));"
      },
      {
        "testCodeLocation": {
          "line": 378,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({3},{1}) should return false.\", !CollectionUtils.containsAny(three, oneArr));",
        "slice": "final String[] oneArr \u003d { \"1\" };final Collection\u003cString\u003e three \u003d new ArrayList\u003c\u003e(1);three.add(\"3\");assertTrue(\"containsAny({3},{1}) should return false.\", !CollectionUtils.containsAny(three, oneArr));"
      },
      {
        "testCodeLocation": {
          "line": 379,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({1,3},{}) should return false.\", !CollectionUtils.containsAny(odds, emptyArr));",
        "slice": "final String[] emptyArr \u003d {};final Collection\u003cString\u003e odds \u003d new ArrayList\u003c\u003e(2);odds.add(\"1\");odds.add(\"3\");assertTrue(\"containsAny({1,3},{}) should return false.\", !CollectionUtils.containsAny(odds, emptyArr));"
      },
      {
        "testCodeLocation": {
          "line": 380,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({},{1,3}) should return false.\", !CollectionUtils.containsAny(empty, oddsArr));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final String[] oddsArr \u003d { \"1\", \"3\" };assertTrue(\"containsAny({},{1,3}) should return false.\", !CollectionUtils.containsAny(empty, oddsArr));"
      },
      {
        "testCodeLocation": {
          "line": 381,
          "column": 9
        },
        "assert": "assertTrue(\"containsAny({},{}) should return false.\", !CollectionUtils.containsAny(empty, emptyArr));",
        "slice": "final Collection\u003cString\u003e empty \u003d new ArrayList\u003c\u003e(0);final String[] emptyArr \u003d {};assertTrue(\"containsAny({},{}) should return false.\", !CollectionUtils.containsAny(empty, emptyArr));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.union()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));assertEquals(Integer.valueOf(4), freq.get(2));assertEquals(Integer.valueOf(3), freq.get(3));assertEquals(Integer.valueOf(4), freq.get(4));assertEquals(Integer.valueOf(1), freq.get(5));final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(1));assertEquals(Integer.valueOf(4), freq2.get(2));assertEquals(Integer.valueOf(3), freq2.get(3));assertEquals(Integer.valueOf(4), freq2.get(4));assertEquals(Integer.valueOf(1), freq2.get(5));",
    "offset": [
      {
        "line": 386,
        "column": 41
      },
      {
        "line": 387,
        "column": 44
      },
      {
        "line": 388,
        "column": 9
      },
      {
        "line": 388,
        "column": 22
      },
      {
        "line": 388,
        "column": 42
      },
      {
        "line": 389,
        "column": 9
      },
      {
        "line": 389,
        "column": 22
      },
      {
        "line": 389,
        "column": 42
      },
      {
        "line": 390,
        "column": 9
      },
      {
        "line": 390,
        "column": 22
      },
      {
        "line": 390,
        "column": 42
      },
      {
        "line": 391,
        "column": 9
      },
      {
        "line": 391,
        "column": 22
      },
      {
        "line": 391,
        "column": 42
      },
      {
        "line": 392,
        "column": 9
      },
      {
        "line": 392,
        "column": 22
      },
      {
        "line": 392,
        "column": 42
      },
      {
        "line": 394,
        "column": 41
      },
      {
        "line": 395,
        "column": 44
      },
      {
        "line": 396,
        "column": 9
      },
      {
        "line": 396,
        "column": 22
      },
      {
        "line": 396,
        "column": 42
      },
      {
        "line": 397,
        "column": 9
      },
      {
        "line": 397,
        "column": 22
      },
      {
        "line": 397,
        "column": 42
      },
      {
        "line": 398,
        "column": 9
      },
      {
        "line": 398,
        "column": 22
      },
      {
        "line": 398,
        "column": 42
      },
      {
        "line": 399,
        "column": 9
      },
      {
        "line": 399,
        "column": 22
      },
      {
        "line": 399,
        "column": 42
      },
      {
        "line": 400,
        "column": 9
      },
      {
        "line": 400,
        "column": 22
      },
      {
        "line": 400,
        "column": 42
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 400,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(1), freq2.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 386,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 389,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(4), freq.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(4), freq.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 390,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(3), freq.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(3), freq.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 391,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(4), freq.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(4), freq.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 392,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(1), freq.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 394,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 397,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(4), freq2.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(4), freq2.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 398,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(3), freq2.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(3), freq2.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 399,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(4), freq2.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.union(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.union(collectionC2, iterableA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(4), freq2.get(4));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.intersection()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(1));assertEquals(Integer.valueOf(2), freq.get(2));assertEquals(Integer.valueOf(3), freq.get(3));assertEquals(Integer.valueOf(2), freq.get(4));assertNull(freq.get(5));final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(1));assertEquals(Integer.valueOf(2), freq2.get(2));assertEquals(Integer.valueOf(3), freq2.get(3));assertEquals(Integer.valueOf(2), freq2.get(4));assertNull(freq2.get(5));",
    "offset": [
      {
        "line": 405,
        "column": 41
      },
      {
        "line": 406,
        "column": 44
      },
      {
        "line": 407,
        "column": 9
      },
      {
        "line": 407,
        "column": 20
      },
      {
        "line": 408,
        "column": 9
      },
      {
        "line": 408,
        "column": 22
      },
      {
        "line": 408,
        "column": 42
      },
      {
        "line": 409,
        "column": 9
      },
      {
        "line": 409,
        "column": 22
      },
      {
        "line": 409,
        "column": 42
      },
      {
        "line": 410,
        "column": 9
      },
      {
        "line": 410,
        "column": 22
      },
      {
        "line": 410,
        "column": 42
      },
      {
        "line": 411,
        "column": 9
      },
      {
        "line": 411,
        "column": 20
      },
      {
        "line": 413,
        "column": 41
      },
      {
        "line": 414,
        "column": 44
      },
      {
        "line": 415,
        "column": 9
      },
      {
        "line": 415,
        "column": 20
      },
      {
        "line": 416,
        "column": 9
      },
      {
        "line": 416,
        "column": 22
      },
      {
        "line": 416,
        "column": 42
      },
      {
        "line": 417,
        "column": 9
      },
      {
        "line": 417,
        "column": 22
      },
      {
        "line": 417,
        "column": 42
      },
      {
        "line": 418,
        "column": 9
      },
      {
        "line": 418,
        "column": 22
      },
      {
        "line": 418,
        "column": 42
      },
      {
        "line": 419,
        "column": 9
      },
      {
        "line": 419,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 416,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(2), freq2.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 417,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(3), freq2.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(3), freq2.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 418,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(2), freq2.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 419,
          "column": 9
        },
        "assert": "assertNull(freq2.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 405,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 408,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 409,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(3), freq.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(3), freq.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 410,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 411,
          "column": 9
        },
        "assert": "assertNull(freq.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 413,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.intersection(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.intersection(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(1));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.disjunction()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));assertEquals(Integer.valueOf(2), freq.get(2));assertNull(freq.get(3));assertEquals(Integer.valueOf(2), freq.get(4));assertEquals(Integer.valueOf(1), freq.get(5));final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(1));assertEquals(Integer.valueOf(2), freq2.get(2));assertNull(freq2.get(3));assertEquals(Integer.valueOf(2), freq2.get(4));assertEquals(Integer.valueOf(1), freq2.get(5));",
    "offset": [
      {
        "line": 424,
        "column": 41
      },
      {
        "line": 425,
        "column": 44
      },
      {
        "line": 426,
        "column": 9
      },
      {
        "line": 426,
        "column": 22
      },
      {
        "line": 426,
        "column": 42
      },
      {
        "line": 427,
        "column": 9
      },
      {
        "line": 427,
        "column": 22
      },
      {
        "line": 427,
        "column": 42
      },
      {
        "line": 428,
        "column": 9
      },
      {
        "line": 428,
        "column": 20
      },
      {
        "line": 429,
        "column": 9
      },
      {
        "line": 429,
        "column": 22
      },
      {
        "line": 429,
        "column": 42
      },
      {
        "line": 430,
        "column": 9
      },
      {
        "line": 430,
        "column": 22
      },
      {
        "line": 430,
        "column": 42
      },
      {
        "line": 432,
        "column": 41
      },
      {
        "line": 433,
        "column": 44
      },
      {
        "line": 434,
        "column": 9
      },
      {
        "line": 434,
        "column": 22
      },
      {
        "line": 434,
        "column": 42
      },
      {
        "line": 435,
        "column": 9
      },
      {
        "line": 435,
        "column": 22
      },
      {
        "line": 435,
        "column": 42
      },
      {
        "line": 436,
        "column": 9
      },
      {
        "line": 436,
        "column": 20
      },
      {
        "line": 437,
        "column": 9
      },
      {
        "line": 437,
        "column": 22
      },
      {
        "line": 437,
        "column": 42
      },
      {
        "line": 438,
        "column": 9
      },
      {
        "line": 438,
        "column": 22
      },
      {
        "line": 438,
        "column": 42
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 432,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 435,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(2), freq2.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 436,
          "column": 9
        },
        "assert": "assertNull(freq2.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 437,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(2), freq2.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 438,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(1), freq2.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.disjunction(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 424,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 427,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 428,
          "column": 9
        },
        "assert": "assertNull(freq.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 429,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 430,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(1), freq.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.disjunction(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(5));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsUnionMinusIntersection()",
    "annotation": "@Test",
    "code": "final Collection\u003cNumber\u003e dis \u003d CollectionUtils.\u003cNumber\u003edisjunction(collectionA, collectionC);final Collection\u003cNumber\u003e un \u003d CollectionUtils.\u003cNumber\u003eunion(collectionA, collectionC);final Collection\u003cNumber\u003e inter \u003d CollectionUtils.\u003cNumber\u003eintersection(collectionA, collectionC);assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.subtract(un, inter)));",
    "offset": [
      {
        "line": 443,
        "column": 40
      },
      {
        "line": 444,
        "column": 39
      },
      {
        "line": 445,
        "column": 42
      },
      {
        "line": 446,
        "column": 9
      },
      {
        "line": 446,
        "column": 20
      },
      {
        "line": 446,
        "column": 59
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 443,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e dis \u003d CollectionUtils.\u003cNumber\u003edisjunction(collectionA, collectionC);final Collection\u003cNumber\u003e un \u003d CollectionUtils.\u003cNumber\u003eunion(collectionA, collectionC);final Collection\u003cNumber\u003e inter \u003d CollectionUtils.\u003cNumber\u003eintersection(collectionA, collectionC);assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.subtract(un, inter)));",
        "slice": "final Collection\u003cNumber\u003e dis \u003d CollectionUtils.\u003cNumber\u003edisjunction(collectionA, collectionC);final Collection\u003cNumber\u003e un \u003d CollectionUtils.\u003cNumber\u003eunion(collectionA, collectionC);final Collection\u003cNumber\u003e inter \u003d CollectionUtils.\u003cNumber\u003eintersection(collectionA, collectionC);assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.subtract(un, inter)));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testDisjunctionAsSymmetricDifference()",
    "annotation": "@Test",
    "code": "final Collection\u003cNumber\u003e dis \u003d CollectionUtils.\u003cNumber\u003edisjunction(collectionA, collectionC);final Collection\u003cNumber\u003e amb \u003d CollectionUtils.\u003cNumber\u003esubtract(collectionA, collectionC);final Collection\u003cNumber\u003e bma \u003d CollectionUtils.\u003cNumber\u003esubtract(collectionC, collectionA);assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.union(amb, bma)));",
    "offset": [
      {
        "line": 451,
        "column": 40
      },
      {
        "line": 452,
        "column": 40
      },
      {
        "line": 453,
        "column": 40
      },
      {
        "line": 454,
        "column": 9
      },
      {
        "line": 454,
        "column": 20
      },
      {
        "line": 454,
        "column": 59
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 451,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e dis \u003d CollectionUtils.\u003cNumber\u003edisjunction(collectionA, collectionC);final Collection\u003cNumber\u003e amb \u003d CollectionUtils.\u003cNumber\u003esubtract(collectionA, collectionC);final Collection\u003cNumber\u003e bma \u003d CollectionUtils.\u003cNumber\u003esubtract(collectionC, collectionA);assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.union(amb, bma)));",
        "slice": "final Collection\u003cNumber\u003e dis \u003d CollectionUtils.\u003cNumber\u003edisjunction(collectionA, collectionC);final Collection\u003cNumber\u003e amb \u003d CollectionUtils.\u003cNumber\u003esubtract(collectionA, collectionC);final Collection\u003cNumber\u003e bma \u003d CollectionUtils.\u003cNumber\u003esubtract(collectionC, collectionA);assertTrue(CollectionUtils.isEqualCollection(dis, CollectionUtils.union(amb, bma)));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSubtract()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));assertNull(freq.get(2));assertNull(freq.get(3));assertEquals(Integer.valueOf(2), freq.get(4));assertNull(freq.get(5));final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(5));assertNull(freq2.get(4));assertNull(freq2.get(3));assertEquals(Integer.valueOf(2), freq2.get(2));assertNull(freq2.get(1));",
    "offset": [
      {
        "line": 459,
        "column": 41
      },
      {
        "line": 460,
        "column": 44
      },
      {
        "line": 461,
        "column": 9
      },
      {
        "line": 461,
        "column": 22
      },
      {
        "line": 461,
        "column": 42
      },
      {
        "line": 462,
        "column": 9
      },
      {
        "line": 462,
        "column": 20
      },
      {
        "line": 463,
        "column": 9
      },
      {
        "line": 463,
        "column": 20
      },
      {
        "line": 464,
        "column": 9
      },
      {
        "line": 464,
        "column": 22
      },
      {
        "line": 464,
        "column": 42
      },
      {
        "line": 465,
        "column": 9
      },
      {
        "line": 465,
        "column": 20
      },
      {
        "line": 467,
        "column": 41
      },
      {
        "line": 468,
        "column": 44
      },
      {
        "line": 469,
        "column": 9
      },
      {
        "line": 469,
        "column": 22
      },
      {
        "line": 469,
        "column": 42
      },
      {
        "line": 470,
        "column": 9
      },
      {
        "line": 470,
        "column": 20
      },
      {
        "line": 471,
        "column": 9
      },
      {
        "line": 471,
        "column": 20
      },
      {
        "line": 472,
        "column": 9
      },
      {
        "line": 472,
        "column": 22
      },
      {
        "line": 472,
        "column": 42
      },
      {
        "line": 473,
        "column": 9
      },
      {
        "line": 473,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 464,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 465,
          "column": 9
        },
        "assert": "assertNull(freq.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 467,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(5));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(1), freq2.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 470,
          "column": 9
        },
        "assert": "assertNull(freq2.get(4));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 471,
          "column": 9
        },
        "assert": "assertNull(freq2.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 472,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertEquals(Integer.valueOf(2), freq2.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 473,
          "column": 9
        },
        "assert": "assertNull(freq2.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);final Collection\u003cNumber\u003e col2 \u003d CollectionUtils.subtract(collectionC2, collectionA);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col2);assertNull(freq2.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 459,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 462,
          "column": 9
        },
        "assert": "assertNull(freq.get(2));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 463,
          "column": 9
        },
        "assert": "assertNull(freq.get(3));",
        "slice": "final Collection\u003cInteger\u003e col \u003d CollectionUtils.subtract(iterableA, iterableC);final Map\u003cInteger, Integer\u003e freq \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq.get(3));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSubtractWithPredicate()",
    "annotation": "@Test",
    "code": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq2.get(1));assertEquals(Integer.valueOf(2), freq2.get(2));assertEquals(Integer.valueOf(3), freq2.get(3));assertEquals(Integer.valueOf(2), freq2.get(4));assertNull(freq2.get(5));",
    "offset": [
      {
        "line": 479,
        "column": 45
      },
      {
        "line": 482,
        "column": 24
      },
      {
        "line": 486,
        "column": 40
      },
      {
        "line": 487,
        "column": 44
      },
      {
        "line": 488,
        "column": 9
      },
      {
        "line": 488,
        "column": 22
      },
      {
        "line": 488,
        "column": 42
      },
      {
        "line": 489,
        "column": 9
      },
      {
        "line": 489,
        "column": 22
      },
      {
        "line": 489,
        "column": 42
      },
      {
        "line": 490,
        "column": 9
      },
      {
        "line": 490,
        "column": 22
      },
      {
        "line": 490,
        "column": 42
      },
      {
        "line": 491,
        "column": 9
      },
      {
        "line": 491,
        "column": 22
      },
      {
        "line": 491,
        "column": 42
      },
      {
        "line": 492,
        "column": 9
      },
      {
        "line": 492,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 489,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(2));",
        "slice": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq2.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 490,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(3), freq2.get(3));",
        "slice": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(3), freq2.get(3));"
      },
      {
        "testCodeLocation": {
          "line": 491,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(2), freq2.get(4));",
        "slice": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(2), freq2.get(4));"
      },
      {
        "testCodeLocation": {
          "line": 492,
          "column": 9
        },
        "assert": "assertNull(freq2.get(5));",
        "slice": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertNull(freq2.get(5));"
      },
      {
        "testCodeLocation": {
          "line": 479,
          "column": 9
        },
        "assert": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq2.get(1));",
        "slice": "// greater than 3\nfinal Predicate\u003cNumber\u003e predicate \u003d new Predicate\u003cNumber\u003e() {\n\n    @Override\n    public boolean evaluate(final Number n) {\n        return n.longValue() \u003e 3L;\n    }\n};final Collection\u003cNumber\u003e col \u003d CollectionUtils.subtract(iterableA, collectionC, predicate);final Map\u003cNumber, Integer\u003e freq2 \u003d CollectionUtils.getCardinalityMap(col);assertEquals(Integer.valueOf(1), freq2.get(1));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsSubCollectionOfSelf()",
    "annotation": "@Test",
    "code": "assertTrue(CollectionUtils.isSubCollection(collectionA, collectionA));assertTrue(CollectionUtils.isSubCollection(collectionB, collectionB));",
    "offset": [
      {
        "line": 497,
        "column": 9
      },
      {
        "line": 497,
        "column": 20
      },
      {
        "line": 498,
        "column": 9
      },
      {
        "line": 498,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 497,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isSubCollection(collectionA, collectionA));",
        "slice": "assertTrue(CollectionUtils.isSubCollection(collectionA, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 498,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isSubCollection(collectionB, collectionB));",
        "slice": "assertTrue(CollectionUtils.isSubCollection(collectionB, collectionB));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsSubCollection()",
    "annotation": "@Test",
    "code": "assertTrue(!CollectionUtils.isSubCollection(collectionA, collectionC));assertTrue(!CollectionUtils.isSubCollection(collectionC, collectionA));",
    "offset": [
      {
        "line": 503,
        "column": 9
      },
      {
        "line": 503,
        "column": 21
      },
      {
        "line": 504,
        "column": 9
      },
      {
        "line": 504,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 503,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, collectionC));",
        "slice": "assertTrue(!CollectionUtils.isSubCollection(collectionA, collectionC));"
      },
      {
        "testCodeLocation": {
          "line": 504,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionC, collectionA));",
        "slice": "assertTrue(!CollectionUtils.isSubCollection(collectionC, collectionA));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsSubCollection2()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(1);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(2);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(2);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(!CollectionUtils.isSubCollection(collectionA, c));c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));assertTrue(CollectionUtils.isSubCollection(collectionA, c));c.add(5);assertTrue(!CollectionUtils.isSubCollection(c, collectionA));assertTrue(CollectionUtils.isSubCollection(collectionA, c));",
    "offset": [
      {
        "line": 509,
        "column": 39
      },
      {
        "line": 510,
        "column": 9
      },
      {
        "line": 510,
        "column": 20
      },
      {
        "line": 511,
        "column": 9
      },
      {
        "line": 511,
        "column": 21
      },
      {
        "line": 512,
        "column": 9
      },
      {
        "line": 513,
        "column": 9
      },
      {
        "line": 513,
        "column": 20
      },
      {
        "line": 514,
        "column": 9
      },
      {
        "line": 514,
        "column": 21
      },
      {
        "line": 515,
        "column": 9
      },
      {
        "line": 516,
        "column": 9
      },
      {
        "line": 516,
        "column": 20
      },
      {
        "line": 517,
        "column": 9
      },
      {
        "line": 517,
        "column": 21
      },
      {
        "line": 518,
        "column": 9
      },
      {
        "line": 519,
        "column": 9
      },
      {
        "line": 519,
        "column": 20
      },
      {
        "line": 520,
        "column": 9
      },
      {
        "line": 520,
        "column": 21
      },
      {
        "line": 521,
        "column": 9
      },
      {
        "line": 522,
        "column": 9
      },
      {
        "line": 522,
        "column": 20
      },
      {
        "line": 523,
        "column": 9
      },
      {
        "line": 523,
        "column": 21
      },
      {
        "line": 524,
        "column": 9
      },
      {
        "line": 525,
        "column": 9
      },
      {
        "line": 525,
        "column": 20
      },
      {
        "line": 526,
        "column": 9
      },
      {
        "line": 526,
        "column": 21
      },
      {
        "line": 527,
        "column": 9
      },
      {
        "line": 528,
        "column": 9
      },
      {
        "line": 528,
        "column": 20
      },
      {
        "line": 529,
        "column": 9
      },
      {
        "line": 529,
        "column": 21
      },
      {
        "line": 530,
        "column": 9
      },
      {
        "line": 531,
        "column": 9
      },
      {
        "line": 531,
        "column": 20
      },
      {
        "line": 532,
        "column": 9
      },
      {
        "line": 532,
        "column": 21
      },
      {
        "line": 533,
        "column": 9
      },
      {
        "line": 534,
        "column": 9
      },
      {
        "line": 534,
        "column": 20
      },
      {
        "line": 535,
        "column": 9
      },
      {
        "line": 535,
        "column": 21
      },
      {
        "line": 536,
        "column": 9
      },
      {
        "line": 537,
        "column": 9
      },
      {
        "line": 537,
        "column": 20
      },
      {
        "line": 538,
        "column": 9
      },
      {
        "line": 538,
        "column": 21
      },
      {
        "line": 539,
        "column": 9
      },
      {
        "line": 540,
        "column": 9
      },
      {
        "line": 540,
        "column": 20
      },
      {
        "line": 541,
        "column": 9
      },
      {
        "line": 541,
        "column": 20
      },
      {
        "line": 542,
        "column": 9
      },
      {
        "line": 543,
        "column": 9
      },
      {
        "line": 543,
        "column": 21
      },
      {
        "line": 544,
        "column": 9
      },
      {
        "line": 544,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 512,
          "column": 9
        },
        "assert": "c.add(1);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 544,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);c.add(4);c.add(4);c.add(5);assertTrue(CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 514,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 515,
          "column": 9
        },
        "assert": "c.add(2);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 517,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 518,
          "column": 9
        },
        "assert": "c.add(2);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 520,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 521,
          "column": 9
        },
        "assert": "c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 523,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 524,
          "column": 9
        },
        "assert": "c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 526,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 527,
          "column": 9
        },
        "assert": "c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 529,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 530,
          "column": 9
        },
        "assert": "c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 532,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 533,
          "column": 9
        },
        "assert": "c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 535,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 536,
          "column": 9
        },
        "assert": "c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 538,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);c.add(4);assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 539,
          "column": 9
        },
        "assert": "c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);c.add(4);c.add(4);assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 509,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 541,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);c.add(4);c.add(4);assertTrue(CollectionUtils.isSubCollection(collectionA, c));"
      },
      {
        "testCodeLocation": {
          "line": 542,
          "column": 9
        },
        "assert": "c.add(5);assertTrue(!CollectionUtils.isSubCollection(c, collectionA));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();c.add(1);c.add(2);c.add(2);c.add(3);c.add(3);c.add(3);c.add(4);c.add(4);c.add(4);c.add(4);c.add(5);assertTrue(!CollectionUtils.isSubCollection(c, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 511,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isSubCollection(collectionA, c));",
        "slice": "final Collection\u003cInteger\u003e c \u003d new ArrayList\u003c\u003e();assertTrue(!CollectionUtils.isSubCollection(collectionA, c));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEqualCollectionToSelf()",
    "annotation": "@Test",
    "code": "assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA));assertTrue(CollectionUtils.isEqualCollection(collectionB, collectionB));",
    "offset": [
      {
        "line": 549,
        "column": 9
      },
      {
        "line": 549,
        "column": 20
      },
      {
        "line": 550,
        "column": 9
      },
      {
        "line": 550,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 549,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA));",
        "slice": "assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 550,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(collectionB, collectionB));",
        "slice": "assertTrue(CollectionUtils.isEqualCollection(collectionB, collectionB));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEqualCollection()",
    "annotation": "@Test",
    "code": "assertTrue(!CollectionUtils.isEqualCollection(collectionA, collectionC));assertTrue(!CollectionUtils.isEqualCollection(collectionC, collectionA));",
    "offset": [
      {
        "line": 555,
        "column": 9
      },
      {
        "line": 555,
        "column": 21
      },
      {
        "line": 556,
        "column": 9
      },
      {
        "line": 556,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 555,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isEqualCollection(collectionA, collectionC));",
        "slice": "assertTrue(!CollectionUtils.isEqualCollection(collectionA, collectionC));"
      },
      {
        "testCodeLocation": {
          "line": 556,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isEqualCollection(collectionC, collectionA));",
        "slice": "assertTrue(!CollectionUtils.isEqualCollection(collectionC, collectionA));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEqualCollectionReturnsFalse()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e b \u003d new ArrayList\u003c\u003e(collectionA);// remove an extra \u00272\u0027, and add a 5.  This will increase the size of the cardinality\nb.remove(1);b.add(5);assertFalse(CollectionUtils.isEqualCollection(collectionA, b));assertFalse(CollectionUtils.isEqualCollection(b, collectionA));",
    "offset": [
      {
        "line": 561,
        "column": 33
      },
      {
        "line": 563,
        "column": 9
      },
      {
        "line": 564,
        "column": 9
      },
      {
        "line": 565,
        "column": 9
      },
      {
        "line": 565,
        "column": 21
      },
      {
        "line": 566,
        "column": 9
      },
      {
        "line": 566,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 561,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e b \u003d new ArrayList\u003c\u003e(collectionA);// remove an extra \u00272\u0027, and add a 5.  This will increase the size of the cardinality\nb.remove(1);b.add(5);assertFalse(CollectionUtils.isEqualCollection(collectionA, b));",
        "slice": "final List\u003cInteger\u003e b \u003d new ArrayList\u003c\u003e(collectionA);// remove an extra \u00272\u0027, and add a 5.  This will increase the size of the cardinality\nb.remove(1);b.add(5);assertFalse(CollectionUtils.isEqualCollection(collectionA, b));"
      },
      {
        "testCodeLocation": {
          "line": 566,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.isEqualCollection(b, collectionA));",
        "slice": "final List\u003cInteger\u003e b \u003d new ArrayList\u003c\u003e(collectionA);// remove an extra \u00272\u0027, and add a 5.  This will increase the size of the cardinality\nb.remove(1);b.add(5);assertFalse(CollectionUtils.isEqualCollection(b, collectionA));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEqualCollection2()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isEqualCollection(a, b));assertTrue(CollectionUtils.isEqualCollection(b, a));a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(a, b));assertTrue(!CollectionUtils.isEqualCollection(b, a));b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(a, b));assertTrue(CollectionUtils.isEqualCollection(b, a));a.add(\"2\");assertTrue(!CollectionUtils.isEqualCollection(a, b));assertTrue(!CollectionUtils.isEqualCollection(b, a));b.add(\"2\");assertTrue(CollectionUtils.isEqualCollection(a, b));assertTrue(CollectionUtils.isEqualCollection(b, a));a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(a, b));assertTrue(!CollectionUtils.isEqualCollection(b, a));b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(a, b));assertTrue(CollectionUtils.isEqualCollection(b, a));",
    "offset": [
      {
        "line": 571,
        "column": 38
      },
      {
        "line": 572,
        "column": 38
      },
      {
        "line": 573,
        "column": 9
      },
      {
        "line": 573,
        "column": 20
      },
      {
        "line": 574,
        "column": 9
      },
      {
        "line": 574,
        "column": 20
      },
      {
        "line": 575,
        "column": 9
      },
      {
        "line": 576,
        "column": 9
      },
      {
        "line": 576,
        "column": 21
      },
      {
        "line": 577,
        "column": 9
      },
      {
        "line": 577,
        "column": 21
      },
      {
        "line": 578,
        "column": 9
      },
      {
        "line": 579,
        "column": 9
      },
      {
        "line": 579,
        "column": 20
      },
      {
        "line": 580,
        "column": 9
      },
      {
        "line": 580,
        "column": 20
      },
      {
        "line": 581,
        "column": 9
      },
      {
        "line": 582,
        "column": 9
      },
      {
        "line": 582,
        "column": 21
      },
      {
        "line": 583,
        "column": 9
      },
      {
        "line": 583,
        "column": 21
      },
      {
        "line": 584,
        "column": 9
      },
      {
        "line": 585,
        "column": 9
      },
      {
        "line": 585,
        "column": 20
      },
      {
        "line": 586,
        "column": 9
      },
      {
        "line": 586,
        "column": 20
      },
      {
        "line": 587,
        "column": 9
      },
      {
        "line": 588,
        "column": 9
      },
      {
        "line": 588,
        "column": 21
      },
      {
        "line": 589,
        "column": 9
      },
      {
        "line": 589,
        "column": 21
      },
      {
        "line": 590,
        "column": 9
      },
      {
        "line": 591,
        "column": 9
      },
      {
        "line": 591,
        "column": 20
      },
      {
        "line": 592,
        "column": 9
      },
      {
        "line": 592,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 577,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 578,
          "column": 9
        },
        "assert": "b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 580,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 581,
          "column": 9
        },
        "assert": "a.add(\"2\");assertTrue(!CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");assertTrue(!CollectionUtils.isEqualCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 583,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");assertTrue(!CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 584,
          "column": 9
        },
        "assert": "b.add(\"2\");assertTrue(CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");b.add(\"2\");assertTrue(CollectionUtils.isEqualCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 586,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");b.add(\"2\");assertTrue(CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 587,
          "column": 9
        },
        "assert": "a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 589,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 590,
          "column": 9
        },
        "assert": "b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 592,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");b.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");b.add(\"1\");assertTrue(CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 571,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isEqualCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 574,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(CollectionUtils.isEqualCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 575,
          "column": 9
        },
        "assert": "a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();a.add(\"1\");assertTrue(!CollectionUtils.isEqualCollection(a, b));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEqualCollectionEquator()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);// odd / even equator\nfinal Equator\u003cInteger\u003e e \u003d new Equator\u003cInteger\u003e() {\n\n    @Override\n    public boolean equate(final Integer o1, final Integer o2) {\n        if (o1.intValue() % 2 \u003d\u003d 0 ^ o2.intValue() % 2 \u003d\u003d 0) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hash(final Integer o) {\n        return o.intValue() % 2 \u003d\u003d 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n    }\n};assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA, e));assertTrue(CollectionUtils.isEqualCollection(collectionA, collB, e));assertTrue(CollectionUtils.isEqualCollection(collB, collectionA, e));final Equator\u003cNumber\u003e defaultEquator \u003d DefaultEquator.defaultEquator();assertFalse(CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));assertFalse(CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));",
    "offset": [
      {
        "line": 597,
        "column": 43
      },
      {
        "line": 600,
        "column": 36
      },
      {
        "line": 603,
        "column": 21
      },
      {
        "line": 603,
        "column": 46
      },
      {
        "line": 611,
        "column": 24
      },
      {
        "line": 611,
        "column": 48
      },
      {
        "line": 611,
        "column": 48
      },
      {
        "line": 611,
        "column": 80
      },
      {
        "line": 611,
        "column": 80
      },
      {
        "line": 615,
        "column": 9
      },
      {
        "line": 615,
        "column": 20
      },
      {
        "line": 616,
        "column": 9
      },
      {
        "line": 616,
        "column": 20
      },
      {
        "line": 617,
        "column": 9
      },
      {
        "line": 617,
        "column": 20
      },
      {
        "line": 619,
        "column": 48
      },
      {
        "line": 620,
        "column": 9
      },
      {
        "line": 620,
        "column": 21
      },
      {
        "line": 621,
        "column": 9
      },
      {
        "line": 621,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 597,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);// odd / even equator\nfinal Equator\u003cInteger\u003e e \u003d new Equator\u003cInteger\u003e() {\n\n    @Override\n    public boolean equate(final Integer o1, final Integer o2) {\n        if (o1.intValue() % 2 \u003d\u003d 0 ^ o2.intValue() % 2 \u003d\u003d 0) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hash(final Integer o) {\n        return o.intValue() % 2 \u003d\u003d 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n    }\n};assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA, e));",
        "slice": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);// odd / even equator\nfinal Equator\u003cInteger\u003e e \u003d new Equator\u003cInteger\u003e() {\n\n    @Override\n    public boolean equate(final Integer o1, final Integer o2) {\n        if (o1.intValue() % 2 \u003d\u003d 0 ^ o2.intValue() % 2 \u003d\u003d 0) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hash(final Integer o) {\n        return o.intValue() % 2 \u003d\u003d 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n    }\n};assertTrue(CollectionUtils.isEqualCollection(collectionA, collectionA, e));"
      },
      {
        "testCodeLocation": {
          "line": 616,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(collectionA, collB, e));",
        "slice": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);// odd / even equator\nfinal Equator\u003cInteger\u003e e \u003d new Equator\u003cInteger\u003e() {\n\n    @Override\n    public boolean equate(final Integer o1, final Integer o2) {\n        if (o1.intValue() % 2 \u003d\u003d 0 ^ o2.intValue() % 2 \u003d\u003d 0) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hash(final Integer o) {\n        return o.intValue() % 2 \u003d\u003d 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n    }\n};assertTrue(CollectionUtils.isEqualCollection(collectionA, collB, e));"
      },
      {
        "testCodeLocation": {
          "line": 617,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(collB, collectionA, e));",
        "slice": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);// odd / even equator\nfinal Equator\u003cInteger\u003e e \u003d new Equator\u003cInteger\u003e() {\n\n    @Override\n    public boolean equate(final Integer o1, final Integer o2) {\n        if (o1.intValue() % 2 \u003d\u003d 0 ^ o2.intValue() % 2 \u003d\u003d 0) {\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public int hash(final Integer o) {\n        return o.intValue() % 2 \u003d\u003d 0 ? Integer.valueOf(0).hashCode() : Integer.valueOf(1).hashCode();\n    }\n};assertTrue(CollectionUtils.isEqualCollection(collB, collectionA, e));"
      },
      {
        "testCodeLocation": {
          "line": 619,
          "column": 9
        },
        "assert": "final Equator\u003cNumber\u003e defaultEquator \u003d DefaultEquator.defaultEquator();assertFalse(CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));",
        "slice": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);final Equator\u003cNumber\u003e defaultEquator \u003d DefaultEquator.defaultEquator();assertFalse(CollectionUtils.isEqualCollection(collectionA, collectionB, defaultEquator));"
      },
      {
        "testCodeLocation": {
          "line": 621,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));",
        "slice": "final Collection\u003cInteger\u003e collB \u003d CollectionUtils.collect(collectionB, TRANSFORM_TO_INTEGER);final Equator\u003cNumber\u003e defaultEquator \u003d DefaultEquator.defaultEquator();assertFalse(CollectionUtils.isEqualCollection(collectionA, collB, defaultEquator));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEqualCollectionNullEquator()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "CollectionUtils.isEqualCollection(collectionA, collectionA, null);",
    "offset": [
      {
        "line": 626,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 626,
          "column": 9
        },
        "assert": "CollectionUtils.isEqualCollection(collectionA, collectionA, null);",
        "slice": "CollectionUtils.isEqualCollection(collectionA, collectionA, null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsProperSubCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(!CollectionUtils.isProperSubCollection(a, b));b.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(a, b));assertTrue(!CollectionUtils.isProperSubCollection(b, a));assertTrue(!CollectionUtils.isProperSubCollection(b, b));assertTrue(!CollectionUtils.isProperSubCollection(a, a));a.add(\"1\");a.add(\"2\");b.add(\"2\");assertTrue(!CollectionUtils.isProperSubCollection(b, a));assertTrue(!CollectionUtils.isProperSubCollection(a, b));a.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(b, a));assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.intersection(collectionA, collectionC), collectionA));assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.subtract(a, b), a));assertTrue(!CollectionUtils.isProperSubCollection(a, CollectionUtils.subtract(a, b)));",
    "offset": [
      {
        "line": 631,
        "column": 38
      },
      {
        "line": 632,
        "column": 38
      },
      {
        "line": 633,
        "column": 9
      },
      {
        "line": 633,
        "column": 21
      },
      {
        "line": 634,
        "column": 9
      },
      {
        "line": 635,
        "column": 9
      },
      {
        "line": 635,
        "column": 20
      },
      {
        "line": 636,
        "column": 9
      },
      {
        "line": 636,
        "column": 21
      },
      {
        "line": 637,
        "column": 9
      },
      {
        "line": 637,
        "column": 21
      },
      {
        "line": 638,
        "column": 9
      },
      {
        "line": 638,
        "column": 21
      },
      {
        "line": 639,
        "column": 9
      },
      {
        "line": 640,
        "column": 9
      },
      {
        "line": 641,
        "column": 9
      },
      {
        "line": 642,
        "column": 9
      },
      {
        "line": 642,
        "column": 21
      },
      {
        "line": 643,
        "column": 9
      },
      {
        "line": 643,
        "column": 21
      },
      {
        "line": 644,
        "column": 9
      },
      {
        "line": 645,
        "column": 9
      },
      {
        "line": 645,
        "column": 20
      },
      {
        "line": 646,
        "column": 9
      },
      {
        "line": 646,
        "column": 20
      },
      {
        "line": 646,
        "column": 58
      },
      {
        "line": 647,
        "column": 9
      },
      {
        "line": 647,
        "column": 20
      },
      {
        "line": 647,
        "column": 58
      },
      {
        "line": 648,
        "column": 9
      },
      {
        "line": 648,
        "column": 21
      },
      {
        "line": 648,
        "column": 62
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 643,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isProperSubCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");a.add(\"1\");a.add(\"2\");b.add(\"2\");assertTrue(!CollectionUtils.isProperSubCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 644,
          "column": 9
        },
        "assert": "a.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");a.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 646,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.intersection(collectionA, collectionC), collectionA));",
        "slice": "assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.intersection(collectionA, collectionC), collectionA));"
      },
      {
        "testCodeLocation": {
          "line": 631,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(!CollectionUtils.isProperSubCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();assertTrue(!CollectionUtils.isProperSubCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 647,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.subtract(a, b), a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");a.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(CollectionUtils.subtract(a, b), a));"
      },
      {
        "testCodeLocation": {
          "line": 648,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isProperSubCollection(a, CollectionUtils.subtract(a, b)));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");a.add(\"1\");a.add(\"2\");b.add(\"2\");a.add(\"1\");assertTrue(!CollectionUtils.isProperSubCollection(a, CollectionUtils.subtract(a, b)));"
      },
      {
        "testCodeLocation": {
          "line": 634,
          "column": 9
        },
        "assert": "b.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(a, b));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");assertTrue(CollectionUtils.isProperSubCollection(a, b));"
      },
      {
        "testCodeLocation": {
          "line": 636,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isProperSubCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");assertTrue(!CollectionUtils.isProperSubCollection(b, a));"
      },
      {
        "testCodeLocation": {
          "line": 637,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isProperSubCollection(b, b));",
        "slice": "final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");assertTrue(!CollectionUtils.isProperSubCollection(b, b));"
      },
      {
        "testCodeLocation": {
          "line": 638,
          "column": 9
        },
        "assert": "assertTrue(!CollectionUtils.isProperSubCollection(a, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();assertTrue(!CollectionUtils.isProperSubCollection(a, a));"
      },
      {
        "testCodeLocation": {
          "line": 639,
          "column": 9
        },
        "assert": "a.add(\"1\");a.add(\"2\");b.add(\"2\");assertTrue(!CollectionUtils.isProperSubCollection(b, a));",
        "slice": "final Collection\u003cString\u003e a \u003d new ArrayList\u003c\u003e();final Collection\u003cString\u003e b \u003d new ArrayList\u003c\u003e();b.add(\"1\");a.add(\"1\");a.add(\"2\");b.add(\"2\");assertTrue(!CollectionUtils.isProperSubCollection(b, a));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getFromObjectArray()",
    "annotation": "@Test(expected \u003d IndexOutOfBoundsException.class)",
    "code": "// Object array, entry exists\nfinal Object[] objArray \u003d new Object[2];objArray[0] \u003d \"zero\";objArray[1] \u003d \"one\";assertEquals(\"zero\", CollectionUtils.get(objArray, 0));assertEquals(\"one\", CollectionUtils.get(objArray, 1));// Object array, non-existent entry --\n// ArrayIndexOutOfBoundsException\nCollectionUtils.get(objArray, 2);",
    "offset": [
      {
        "line": 889,
        "column": 9
      },
      {
        "line": 889,
        "column": 30
      },
      {
        "line": 890,
        "column": 9
      },
      {
        "line": 890,
        "column": 29
      },
      {
        "line": 894,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 886,
          "column": 9
        },
        "assert": "// Object array, entry exists\nfinal Object[] objArray \u003d new Object[2];objArray[0] \u003d \"zero\";objArray[1] \u003d \"one\";assertEquals(\"zero\", CollectionUtils.get(objArray, 0));",
        "slice": "// Object array, entry exists\nfinal Object[] objArray \u003d new Object[2];objArray[0] \u003d \"zero\";objArray[1] \u003d \"one\";assertEquals(\"zero\", CollectionUtils.get(objArray, 0));"
      },
      {
        "testCodeLocation": {
          "line": 890,
          "column": 9
        },
        "assert": "assertEquals(\"one\", CollectionUtils.get(objArray, 1));",
        "slice": "// Object array, entry exists\nfinal Object[] objArray \u003d new Object[2];assertEquals(\"one\", CollectionUtils.get(objArray, 1));"
      },
      {
        "testCodeLocation": {
          "line": 894,
          "column": 9
        },
        "assert": "// Object array, non-existent entry --\n// ArrayIndexOutOfBoundsException\nCollectionUtils.get(objArray, 2);",
        "slice": "// Object array, entry exists\nfinal Object[] objArray \u003d new Object[2];// Object array, non-existent entry --\n// ArrayIndexOutOfBoundsException\nCollectionUtils.get(objArray, 2);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getFromPrimitiveArray()",
    "annotation": "@Test(expected \u003d IndexOutOfBoundsException.class)",
    "code": "// Primitive array, entry exists\nfinal int[] array \u003d new int[2];array[0] \u003d 10;array[1] \u003d 20;assertEquals(10, CollectionUtils.get(array, 0));assertEquals(20, CollectionUtils.get(array, 1));// Object array, non-existent entry --\n// ArrayIndexOutOfBoundsException\nCollectionUtils.get(array, 2);",
    "offset": [
      {
        "line": 903,
        "column": 9
      },
      {
        "line": 903,
        "column": 26
      },
      {
        "line": 904,
        "column": 9
      },
      {
        "line": 904,
        "column": 26
      },
      {
        "line": 908,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 900,
          "column": 9
        },
        "assert": "// Primitive array, entry exists\nfinal int[] array \u003d new int[2];array[0] \u003d 10;array[1] \u003d 20;assertEquals(10, CollectionUtils.get(array, 0));",
        "slice": "// Primitive array, entry exists\nfinal int[] array \u003d new int[2];array[0] \u003d 10;array[1] \u003d 20;assertEquals(10, CollectionUtils.get(array, 0));"
      },
      {
        "testCodeLocation": {
          "line": 904,
          "column": 9
        },
        "assert": "assertEquals(20, CollectionUtils.get(array, 1));",
        "slice": "// Primitive array, entry exists\nfinal int[] array \u003d new int[2];assertEquals(20, CollectionUtils.get(array, 1));"
      },
      {
        "testCodeLocation": {
          "line": 908,
          "column": 9
        },
        "assert": "// Object array, non-existent entry --\n// ArrayIndexOutOfBoundsException\nCollectionUtils.get(array, 2);",
        "slice": "// Primitive array, entry exists\nfinal int[] array \u003d new int[2];// Object array, non-existent entry --\n// ArrayIndexOutOfBoundsException\nCollectionUtils.get(array, 2);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getFromObject()",
    "annotation": "@Test(expected \u003d IllegalArgumentException.class)",
    "code": "// Invalid object\nfinal Object obj \u003d new Object();CollectionUtils.get(obj, 0);",
    "offset": [
      {
        "line": 914,
        "column": 28
      },
      {
        "line": 915,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 914,
          "column": 9
        },
        "assert": "// Invalid object\nfinal Object obj \u003d new Object();CollectionUtils.get(obj, 0);",
        "slice": "// Invalid object\nfinal Object obj \u003d new Object();CollectionUtils.get(obj, 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_List()",
    "annotation": "@Test",
    "code": "List\u003cString\u003e list \u003d null;assertEquals(0, CollectionUtils.size(list));list \u003d new ArrayList\u003c\u003e();assertEquals(0, CollectionUtils.size(list));list.add(\"a\");assertEquals(1, CollectionUtils.size(list));list.add(\"b\");assertEquals(2, CollectionUtils.size(list));",
    "offset": [
      {
        "line": 922,
        "column": 9
      },
      {
        "line": 922,
        "column": 25
      },
      {
        "line": 923,
        "column": 16
      },
      {
        "line": 924,
        "column": 9
      },
      {
        "line": 924,
        "column": 25
      },
      {
        "line": 925,
        "column": 9
      },
      {
        "line": 926,
        "column": 9
      },
      {
        "line": 926,
        "column": 25
      },
      {
        "line": 927,
        "column": 9
      },
      {
        "line": 928,
        "column": 9
      },
      {
        "line": 928,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 921,
          "column": 9
        },
        "assert": "List\u003cString\u003e list \u003d null;assertEquals(0, CollectionUtils.size(list));",
        "slice": "List\u003cString\u003e list \u003d null;assertEquals(0, CollectionUtils.size(list));"
      },
      {
        "testCodeLocation": {
          "line": 923,
          "column": 9
        },
        "assert": "list \u003d new ArrayList\u003c\u003e();assertEquals(0, CollectionUtils.size(list));",
        "slice": "List\u003cString\u003e list \u003d null;list \u003d new ArrayList\u003c\u003e();assertEquals(0, CollectionUtils.size(list));"
      },
      {
        "testCodeLocation": {
          "line": 925,
          "column": 9
        },
        "assert": "list.add(\"a\");assertEquals(1, CollectionUtils.size(list));",
        "slice": "List\u003cString\u003e list \u003d null;list \u003d new ArrayList\u003c\u003e();list.add(\"a\");assertEquals(1, CollectionUtils.size(list));"
      },
      {
        "testCodeLocation": {
          "line": 927,
          "column": 9
        },
        "assert": "list.add(\"b\");assertEquals(2, CollectionUtils.size(list));",
        "slice": "List\u003cString\u003e list \u003d null;list \u003d new ArrayList\u003c\u003e();list.add(\"a\");list.add(\"b\");assertEquals(2, CollectionUtils.size(list));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_Map()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();assertEquals(0, CollectionUtils.size(map));map.put(\"1\", \"a\");assertEquals(1, CollectionUtils.size(map));map.put(\"2\", \"b\");assertEquals(2, CollectionUtils.size(map));",
    "offset": [
      {
        "line": 933,
        "column": 41
      },
      {
        "line": 934,
        "column": 9
      },
      {
        "line": 934,
        "column": 25
      },
      {
        "line": 935,
        "column": 9
      },
      {
        "line": 936,
        "column": 9
      },
      {
        "line": 936,
        "column": 25
      },
      {
        "line": 937,
        "column": 9
      },
      {
        "line": 938,
        "column": 9
      },
      {
        "line": 938,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 933,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();assertEquals(0, CollectionUtils.size(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();assertEquals(0, CollectionUtils.size(map));"
      },
      {
        "testCodeLocation": {
          "line": 935,
          "column": 9
        },
        "assert": "map.put(\"1\", \"a\");assertEquals(1, CollectionUtils.size(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"1\", \"a\");assertEquals(1, CollectionUtils.size(map));"
      },
      {
        "testCodeLocation": {
          "line": 937,
          "column": 9
        },
        "assert": "map.put(\"2\", \"b\");assertEquals(2, CollectionUtils.size(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"1\", \"a\");map.put(\"2\", \"b\");assertEquals(2, CollectionUtils.size(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_Array()",
    "annotation": "@Test",
    "code": "final Object[] objectArray \u003d new Object[0];assertEquals(0, CollectionUtils.size(objectArray));final String[] stringArray \u003d new String[3];assertEquals(3, CollectionUtils.size(stringArray));stringArray[0] \u003d \"a\";stringArray[1] \u003d \"b\";stringArray[2] \u003d \"c\";assertEquals(3, CollectionUtils.size(stringArray));",
    "offset": [
      {
        "line": 944,
        "column": 9
      },
      {
        "line": 944,
        "column": 25
      },
      {
        "line": 947,
        "column": 9
      },
      {
        "line": 947,
        "column": 25
      },
      {
        "line": 951,
        "column": 9
      },
      {
        "line": 951,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 946,
          "column": 9
        },
        "assert": "final String[] stringArray \u003d new String[3];assertEquals(3, CollectionUtils.size(stringArray));",
        "slice": "final String[] stringArray \u003d new String[3];assertEquals(3, CollectionUtils.size(stringArray));"
      },
      {
        "testCodeLocation": {
          "line": 948,
          "column": 9
        },
        "assert": "stringArray[0] \u003d \"a\";stringArray[1] \u003d \"b\";stringArray[2] \u003d \"c\";assertEquals(3, CollectionUtils.size(stringArray));",
        "slice": "final String[] stringArray \u003d new String[3];stringArray[0] \u003d \"a\";stringArray[1] \u003d \"b\";stringArray[2] \u003d \"c\";assertEquals(3, CollectionUtils.size(stringArray));"
      },
      {
        "testCodeLocation": {
          "line": 943,
          "column": 9
        },
        "assert": "final Object[] objectArray \u003d new Object[0];assertEquals(0, CollectionUtils.size(objectArray));",
        "slice": "final Object[] objectArray \u003d new Object[0];assertEquals(0, CollectionUtils.size(objectArray));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_PrimitiveArray()",
    "annotation": "@Test",
    "code": "final int[] intArray \u003d new int[0];assertEquals(0, CollectionUtils.size(intArray));final double[] doubleArray \u003d new double[3];assertEquals(3, CollectionUtils.size(doubleArray));doubleArray[0] \u003d 0.0d;doubleArray[1] \u003d 1.0d;doubleArray[2] \u003d 2.5d;assertEquals(3, CollectionUtils.size(doubleArray));",
    "offset": [
      {
        "line": 957,
        "column": 9
      },
      {
        "line": 957,
        "column": 25
      },
      {
        "line": 960,
        "column": 9
      },
      {
        "line": 960,
        "column": 25
      },
      {
        "line": 964,
        "column": 9
      },
      {
        "line": 964,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 961,
          "column": 9
        },
        "assert": "doubleArray[0] \u003d 0.0d;doubleArray[1] \u003d 1.0d;doubleArray[2] \u003d 2.5d;assertEquals(3, CollectionUtils.size(doubleArray));",
        "slice": "final double[] doubleArray \u003d new double[3];doubleArray[0] \u003d 0.0d;doubleArray[1] \u003d 1.0d;doubleArray[2] \u003d 2.5d;assertEquals(3, CollectionUtils.size(doubleArray));"
      },
      {
        "testCodeLocation": {
          "line": 956,
          "column": 9
        },
        "assert": "final int[] intArray \u003d new int[0];assertEquals(0, CollectionUtils.size(intArray));",
        "slice": "final int[] intArray \u003d new int[0];assertEquals(0, CollectionUtils.size(intArray));"
      },
      {
        "testCodeLocation": {
          "line": 959,
          "column": 9
        },
        "assert": "final double[] doubleArray \u003d new double[3];assertEquals(3, CollectionUtils.size(doubleArray));",
        "slice": "final double[] doubleArray \u003d new double[3];assertEquals(3, CollectionUtils.size(doubleArray));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_Enumeration()",
    "annotation": "@Test",
    "code": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();assertEquals(0, CollectionUtils.size(list.elements()));list.add(\"a\");assertEquals(1, CollectionUtils.size(list.elements()));list.add(\"b\");assertEquals(2, CollectionUtils.size(list.elements()));",
    "offset": [
      {
        "line": 969,
        "column": 37
      },
      {
        "line": 970,
        "column": 9
      },
      {
        "line": 970,
        "column": 25
      },
      {
        "line": 970,
        "column": 46
      },
      {
        "line": 971,
        "column": 9
      },
      {
        "line": 972,
        "column": 9
      },
      {
        "line": 972,
        "column": 25
      },
      {
        "line": 972,
        "column": 46
      },
      {
        "line": 973,
        "column": 9
      },
      {
        "line": 974,
        "column": 9
      },
      {
        "line": 974,
        "column": 25
      },
      {
        "line": 974,
        "column": 46
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 969,
          "column": 9
        },
        "assert": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();assertEquals(0, CollectionUtils.size(list.elements()));",
        "slice": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();assertEquals(0, CollectionUtils.size(list.elements()));"
      },
      {
        "testCodeLocation": {
          "line": 971,
          "column": 9
        },
        "assert": "list.add(\"a\");assertEquals(1, CollectionUtils.size(list.elements()));",
        "slice": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();list.add(\"a\");assertEquals(1, CollectionUtils.size(list.elements()));"
      },
      {
        "testCodeLocation": {
          "line": 973,
          "column": 9
        },
        "assert": "list.add(\"b\");assertEquals(2, CollectionUtils.size(list.elements()));",
        "slice": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();list.add(\"a\");list.add(\"b\");assertEquals(2, CollectionUtils.size(list.elements()));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_Iterator()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(0, CollectionUtils.size(list.iterator()));list.add(\"a\");assertEquals(1, CollectionUtils.size(list.iterator()));list.add(\"b\");assertEquals(2, CollectionUtils.size(list.iterator()));",
    "offset": [
      {
        "line": 979,
        "column": 35
      },
      {
        "line": 980,
        "column": 9
      },
      {
        "line": 980,
        "column": 25
      },
      {
        "line": 980,
        "column": 46
      },
      {
        "line": 981,
        "column": 9
      },
      {
        "line": 982,
        "column": 9
      },
      {
        "line": 982,
        "column": 25
      },
      {
        "line": 982,
        "column": 46
      },
      {
        "line": 983,
        "column": 9
      },
      {
        "line": 984,
        "column": 9
      },
      {
        "line": 984,
        "column": 25
      },
      {
        "line": 984,
        "column": 46
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 979,
          "column": 9
        },
        "assert": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(0, CollectionUtils.size(list.iterator()));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(0, CollectionUtils.size(list.iterator()));"
      },
      {
        "testCodeLocation": {
          "line": 981,
          "column": 9
        },
        "assert": "list.add(\"a\");assertEquals(1, CollectionUtils.size(list.iterator()));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"a\");assertEquals(1, CollectionUtils.size(list.iterator()));"
      },
      {
        "testCodeLocation": {
          "line": 983,
          "column": 9
        },
        "assert": "list.add(\"b\");assertEquals(2, CollectionUtils.size(list.iterator()));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"a\");list.add(\"b\");assertEquals(2, CollectionUtils.size(list.iterator()));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSize_Other()",
    "annotation": "@Test(expected \u003d IllegalArgumentException.class)",
    "code": "CollectionUtils.size(\"not a list\");",
    "offset": [
      {
        "line": 989,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 989,
          "column": 9
        },
        "assert": "CollectionUtils.size(\"not a list\");",
        "slice": "CollectionUtils.size(\"not a list\");"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Null()",
    "annotation": "@Test",
    "code": "assertEquals(true, CollectionUtils.sizeIsEmpty(null));",
    "offset": [
      {
        "line": 995,
        "column": 9
      },
      {
        "line": 995,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 995,
          "column": 9
        },
        "assert": "assertEquals(true, CollectionUtils.sizeIsEmpty(null));",
        "slice": "assertEquals(true, CollectionUtils.sizeIsEmpty(null));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_List()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list));list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list));",
    "offset": [
      {
        "line": 1000,
        "column": 35
      },
      {
        "line": 1001,
        "column": 9
      },
      {
        "line": 1001,
        "column": 28
      },
      {
        "line": 1002,
        "column": 9
      },
      {
        "line": 1003,
        "column": 9
      },
      {
        "line": 1003,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1000,
          "column": 9
        },
        "assert": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list));"
      },
      {
        "testCodeLocation": {
          "line": 1002,
          "column": 9
        },
        "assert": "list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Map()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(map));map.put(\"1\", \"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(map));",
    "offset": [
      {
        "line": 1008,
        "column": 41
      },
      {
        "line": 1009,
        "column": 9
      },
      {
        "line": 1009,
        "column": 28
      },
      {
        "line": 1010,
        "column": 9
      },
      {
        "line": 1011,
        "column": 9
      },
      {
        "line": 1011,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1008,
          "column": 9
        },
        "assert": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(map));"
      },
      {
        "testCodeLocation": {
          "line": 1010,
          "column": 9
        },
        "assert": "map.put(\"1\", \"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(map));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003c\u003e();map.put(\"1\", \"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(map));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Array()",
    "annotation": "@Test",
    "code": "final Object[] objectArray \u003d new Object[0];assertEquals(true, CollectionUtils.sizeIsEmpty(objectArray));final String[] stringArray \u003d new String[3];assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));stringArray[0] \u003d \"a\";stringArray[1] \u003d \"b\";stringArray[2] \u003d \"c\";assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));",
    "offset": [
      {
        "line": 1017,
        "column": 9
      },
      {
        "line": 1017,
        "column": 28
      },
      {
        "line": 1020,
        "column": 9
      },
      {
        "line": 1020,
        "column": 29
      },
      {
        "line": 1024,
        "column": 9
      },
      {
        "line": 1024,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1016,
          "column": 9
        },
        "assert": "final Object[] objectArray \u003d new Object[0];assertEquals(true, CollectionUtils.sizeIsEmpty(objectArray));",
        "slice": "final Object[] objectArray \u003d new Object[0];assertEquals(true, CollectionUtils.sizeIsEmpty(objectArray));"
      },
      {
        "testCodeLocation": {
          "line": 1019,
          "column": 9
        },
        "assert": "final String[] stringArray \u003d new String[3];assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));",
        "slice": "final String[] stringArray \u003d new String[3];assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));"
      },
      {
        "testCodeLocation": {
          "line": 1021,
          "column": 9
        },
        "assert": "stringArray[0] \u003d \"a\";stringArray[1] \u003d \"b\";stringArray[2] \u003d \"c\";assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));",
        "slice": "final String[] stringArray \u003d new String[3];stringArray[0] \u003d \"a\";stringArray[1] \u003d \"b\";stringArray[2] \u003d \"c\";assertEquals(false, CollectionUtils.sizeIsEmpty(stringArray));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_PrimitiveArray()",
    "annotation": "@Test",
    "code": "final int[] intArray \u003d new int[0];assertEquals(true, CollectionUtils.sizeIsEmpty(intArray));final double[] doubleArray \u003d new double[3];assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));doubleArray[0] \u003d 0.0d;doubleArray[1] \u003d 1.0d;doubleArray[2] \u003d 2.5d;assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));",
    "offset": [
      {
        "line": 1030,
        "column": 9
      },
      {
        "line": 1030,
        "column": 28
      },
      {
        "line": 1033,
        "column": 9
      },
      {
        "line": 1033,
        "column": 29
      },
      {
        "line": 1037,
        "column": 9
      },
      {
        "line": 1037,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1029,
          "column": 9
        },
        "assert": "final int[] intArray \u003d new int[0];assertEquals(true, CollectionUtils.sizeIsEmpty(intArray));",
        "slice": "final int[] intArray \u003d new int[0];assertEquals(true, CollectionUtils.sizeIsEmpty(intArray));"
      },
      {
        "testCodeLocation": {
          "line": 1032,
          "column": 9
        },
        "assert": "final double[] doubleArray \u003d new double[3];assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));",
        "slice": "final double[] doubleArray \u003d new double[3];assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));"
      },
      {
        "testCodeLocation": {
          "line": 1034,
          "column": 9
        },
        "assert": "doubleArray[0] \u003d 0.0d;doubleArray[1] \u003d 1.0d;doubleArray[2] \u003d 2.5d;assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));",
        "slice": "final double[] doubleArray \u003d new double[3];doubleArray[0] \u003d 0.0d;doubleArray[1] \u003d 1.0d;doubleArray[2] \u003d 2.5d;assertEquals(false, CollectionUtils.sizeIsEmpty(doubleArray));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Enumeration()",
    "annotation": "@Test",
    "code": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list.elements()));list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list.elements()));final Enumeration\u003cString\u003e en \u003d list.elements();en.nextElement();assertEquals(true, CollectionUtils.sizeIsEmpty(en));",
    "offset": [
      {
        "line": 1042,
        "column": 37
      },
      {
        "line": 1043,
        "column": 9
      },
      {
        "line": 1043,
        "column": 28
      },
      {
        "line": 1043,
        "column": 56
      },
      {
        "line": 1044,
        "column": 9
      },
      {
        "line": 1045,
        "column": 9
      },
      {
        "line": 1045,
        "column": 29
      },
      {
        "line": 1045,
        "column": 57
      },
      {
        "line": 1046,
        "column": 40
      },
      {
        "line": 1047,
        "column": 9
      },
      {
        "line": 1048,
        "column": 9
      },
      {
        "line": 1048,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1042,
          "column": 9
        },
        "assert": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list.elements()));",
        "slice": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list.elements()));"
      },
      {
        "testCodeLocation": {
          "line": 1044,
          "column": 9
        },
        "assert": "list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list.elements()));",
        "slice": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list.elements()));"
      },
      {
        "testCodeLocation": {
          "line": 1046,
          "column": 9
        },
        "assert": "final Enumeration\u003cString\u003e en \u003d list.elements();en.nextElement();assertEquals(true, CollectionUtils.sizeIsEmpty(en));",
        "slice": "final Vector\u003cString\u003e list \u003d new Vector\u003c\u003e();list.add(\"a\");final Enumeration\u003cString\u003e en \u003d list.elements();en.nextElement();assertEquals(true, CollectionUtils.sizeIsEmpty(en));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Iterator()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list.iterator()));list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list.iterator()));final Iterator\u003cString\u003e it \u003d list.iterator();it.next();assertEquals(true, CollectionUtils.sizeIsEmpty(it));",
    "offset": [
      {
        "line": 1053,
        "column": 35
      },
      {
        "line": 1054,
        "column": 9
      },
      {
        "line": 1054,
        "column": 28
      },
      {
        "line": 1054,
        "column": 56
      },
      {
        "line": 1055,
        "column": 9
      },
      {
        "line": 1056,
        "column": 9
      },
      {
        "line": 1056,
        "column": 29
      },
      {
        "line": 1056,
        "column": 57
      },
      {
        "line": 1057,
        "column": 37
      },
      {
        "line": 1058,
        "column": 9
      },
      {
        "line": 1059,
        "column": 9
      },
      {
        "line": 1059,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1057,
          "column": 9
        },
        "assert": "final Iterator\u003cString\u003e it \u003d list.iterator();it.next();assertEquals(true, CollectionUtils.sizeIsEmpty(it));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"a\");final Iterator\u003cString\u003e it \u003d list.iterator();it.next();assertEquals(true, CollectionUtils.sizeIsEmpty(it));"
      },
      {
        "testCodeLocation": {
          "line": 1053,
          "column": 9
        },
        "assert": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list.iterator()));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.sizeIsEmpty(list.iterator()));"
      },
      {
        "testCodeLocation": {
          "line": 1055,
          "column": 9
        },
        "assert": "list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list.iterator()));",
        "slice": "final List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"a\");assertEquals(false, CollectionUtils.sizeIsEmpty(list.iterator()));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testSizeIsEmpty_Other()",
    "annotation": "@Test",
    "code": "try {\n    CollectionUtils.sizeIsEmpty(\"not a list\");\n    fail(\"Expecting IllegalArgumentException\");\n} catch (final IllegalArgumentException ex) {\n}",
    "offset": [
      {
        "line": 1065,
        "column": 13
      },
      {
        "line": 1066,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1064,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.sizeIsEmpty(\"not a list\");\n    fail(\"Expecting IllegalArgumentException\");\n} catch (final IllegalArgumentException ex) {\n}",
        "slice": "try {\n    CollectionUtils.sizeIsEmpty(\"not a list\");\n    fail(\"Expecting IllegalArgumentException\");\n} catch (final IllegalArgumentException ex) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEmptyWithEmptyCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cObject\u003e coll \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.isEmpty(coll));",
    "offset": [
      {
        "line": 1074,
        "column": 41
      },
      {
        "line": 1075,
        "column": 9
      },
      {
        "line": 1075,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1074,
          "column": 9
        },
        "assert": "final Collection\u003cObject\u003e coll \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.isEmpty(coll));",
        "slice": "final Collection\u003cObject\u003e coll \u003d new ArrayList\u003c\u003e();assertEquals(true, CollectionUtils.isEmpty(coll));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEmptyWithNonEmptyCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e coll \u003d new ArrayList\u003c\u003e();coll.add(\"item\");assertEquals(false, CollectionUtils.isEmpty(coll));",
    "offset": [
      {
        "line": 1080,
        "column": 41
      },
      {
        "line": 1081,
        "column": 9
      },
      {
        "line": 1082,
        "column": 9
      },
      {
        "line": 1082,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1080,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e coll \u003d new ArrayList\u003c\u003e();coll.add(\"item\");assertEquals(false, CollectionUtils.isEmpty(coll));",
        "slice": "final Collection\u003cString\u003e coll \u003d new ArrayList\u003c\u003e();coll.add(\"item\");assertEquals(false, CollectionUtils.isEmpty(coll));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsEmptyWithNull()",
    "annotation": "@Test",
    "code": "final Collection\u003c?\u003e coll \u003d null;assertEquals(true, CollectionUtils.isEmpty(coll));",
    "offset": [
      {
        "line": 1088,
        "column": 9
      },
      {
        "line": 1088,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1087,
          "column": 9
        },
        "assert": "final Collection\u003c?\u003e coll \u003d null;assertEquals(true, CollectionUtils.isEmpty(coll));",
        "slice": "final Collection\u003c?\u003e coll \u003d null;assertEquals(true, CollectionUtils.isEmpty(coll));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsNotEmptyWithEmptyCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cObject\u003e coll \u003d new ArrayList\u003c\u003e();assertEquals(false, CollectionUtils.isNotEmpty(coll));",
    "offset": [
      {
        "line": 1093,
        "column": 41
      },
      {
        "line": 1094,
        "column": 9
      },
      {
        "line": 1094,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1093,
          "column": 9
        },
        "assert": "final Collection\u003cObject\u003e coll \u003d new ArrayList\u003c\u003e();assertEquals(false, CollectionUtils.isNotEmpty(coll));",
        "slice": "final Collection\u003cObject\u003e coll \u003d new ArrayList\u003c\u003e();assertEquals(false, CollectionUtils.isNotEmpty(coll));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsNotEmptyWithNonEmptyCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cString\u003e coll \u003d new ArrayList\u003c\u003e();coll.add(\"item\");assertEquals(true, CollectionUtils.isNotEmpty(coll));",
    "offset": [
      {
        "line": 1099,
        "column": 41
      },
      {
        "line": 1100,
        "column": 9
      },
      {
        "line": 1101,
        "column": 9
      },
      {
        "line": 1101,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1099,
          "column": 9
        },
        "assert": "final Collection\u003cString\u003e coll \u003d new ArrayList\u003c\u003e();coll.add(\"item\");assertEquals(true, CollectionUtils.isNotEmpty(coll));",
        "slice": "final Collection\u003cString\u003e coll \u003d new ArrayList\u003c\u003e();coll.add(\"item\");assertEquals(true, CollectionUtils.isNotEmpty(coll));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testIsNotEmptyWithNull()",
    "annotation": "@Test",
    "code": "final Collection\u003c?\u003e coll \u003d null;assertEquals(false, CollectionUtils.isNotEmpty(coll));",
    "offset": [
      {
        "line": 1107,
        "column": 9
      },
      {
        "line": 1107,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1106,
          "column": 9
        },
        "assert": "final Collection\u003c?\u003e coll \u003d null;assertEquals(false, CollectionUtils.isNotEmpty(coll));",
        "slice": "final Collection\u003c?\u003e coll \u003d null;assertEquals(false, CollectionUtils.isNotEmpty(coll));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.filter()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable\u003cInteger\u003e iterable \u003d ints;assertTrue(CollectionUtils.filter(iterable, EQUALS_TWO));assertEquals(1, ints.size());assertEquals(2, (int) ints.get(0));",
    "offset": [
      {
        "line": 1121,
        "column": 36
      },
      {
        "line": 1122,
        "column": 9
      },
      {
        "line": 1123,
        "column": 9
      },
      {
        "line": 1124,
        "column": 9
      },
      {
        "line": 1125,
        "column": 9
      },
      {
        "line": 1127,
        "column": 9
      },
      {
        "line": 1127,
        "column": 20
      },
      {
        "line": 1128,
        "column": 9
      },
      {
        "line": 1128,
        "column": 25
      },
      {
        "line": 1129,
        "column": 9
      },
      {
        "line": 1129,
        "column": 31
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1121,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable\u003cInteger\u003e iterable \u003d ints;assertTrue(CollectionUtils.filter(iterable, EQUALS_TWO));",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable\u003cInteger\u003e iterable \u003d ints;assertTrue(CollectionUtils.filter(iterable, EQUALS_TWO));"
      },
      {
        "testCodeLocation": {
          "line": 1128,
          "column": 9
        },
        "assert": "assertEquals(1, ints.size());",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);assertEquals(1, ints.size());"
      },
      {
        "testCodeLocation": {
          "line": 1129,
          "column": 9
        },
        "assert": "assertEquals(2, (int) ints.get(0));",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);assertEquals(2, (int) ints.get(0));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.filterNullParameters()",
    "annotation": "@Test",
    "code": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertFalse(CollectionUtils.filter(longs, null));assertEquals(4, longs.size());assertFalse(CollectionUtils.filter(null, EQUALS_TWO));assertEquals(4, longs.size());assertFalse(CollectionUtils.filter(null, null));assertEquals(4, longs.size());",
    "offset": [
      {
        "line": 1134,
        "column": 34
      },
      {
        "line": 1135,
        "column": 9
      },
      {
        "line": 1135,
        "column": 21
      },
      {
        "line": 1136,
        "column": 9
      },
      {
        "line": 1136,
        "column": 25
      },
      {
        "line": 1137,
        "column": 9
      },
      {
        "line": 1137,
        "column": 21
      },
      {
        "line": 1138,
        "column": 9
      },
      {
        "line": 1138,
        "column": 25
      },
      {
        "line": 1139,
        "column": 9
      },
      {
        "line": 1139,
        "column": 21
      },
      {
        "line": 1140,
        "column": 9
      },
      {
        "line": 1140,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1136,
          "column": 9
        },
        "assert": "assertEquals(4, longs.size());",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertEquals(4, longs.size());"
      },
      {
        "testCodeLocation": {
          "line": 1137,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.filter(null, EQUALS_TWO));",
        "slice": "assertFalse(CollectionUtils.filter(null, EQUALS_TWO));"
      },
      {
        "testCodeLocation": {
          "line": 1138,
          "column": 9
        },
        "assert": "assertEquals(4, longs.size());",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertEquals(4, longs.size());"
      },
      {
        "testCodeLocation": {
          "line": 1139,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.filter(null, null));",
        "slice": "assertFalse(CollectionUtils.filter(null, null));"
      },
      {
        "testCodeLocation": {
          "line": 1140,
          "column": 9
        },
        "assert": "assertEquals(4, longs.size());",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertEquals(4, longs.size());"
      },
      {
        "testCodeLocation": {
          "line": 1134,
          "column": 9
        },
        "assert": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertFalse(CollectionUtils.filter(longs, null));",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertFalse(CollectionUtils.filter(longs, null));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.filterInverse()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable\u003cInteger\u003e iterable \u003d ints;assertTrue(CollectionUtils.filterInverse(iterable, EQUALS_TWO));assertEquals(3, ints.size());assertEquals(1, (int) ints.get(0));assertEquals(3, (int) ints.get(1));assertEquals(3, (int) ints.get(2));",
    "offset": [
      {
        "line": 1145,
        "column": 36
      },
      {
        "line": 1146,
        "column": 9
      },
      {
        "line": 1147,
        "column": 9
      },
      {
        "line": 1148,
        "column": 9
      },
      {
        "line": 1149,
        "column": 9
      },
      {
        "line": 1151,
        "column": 9
      },
      {
        "line": 1151,
        "column": 20
      },
      {
        "line": 1152,
        "column": 9
      },
      {
        "line": 1152,
        "column": 25
      },
      {
        "line": 1153,
        "column": 9
      },
      {
        "line": 1153,
        "column": 31
      },
      {
        "line": 1154,
        "column": 9
      },
      {
        "line": 1154,
        "column": 31
      },
      {
        "line": 1155,
        "column": 9
      },
      {
        "line": 1155,
        "column": 31
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1152,
          "column": 9
        },
        "assert": "assertEquals(3, ints.size());",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);assertEquals(3, ints.size());"
      },
      {
        "testCodeLocation": {
          "line": 1153,
          "column": 9
        },
        "assert": "assertEquals(1, (int) ints.get(0));",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);assertEquals(1, (int) ints.get(0));"
      },
      {
        "testCodeLocation": {
          "line": 1154,
          "column": 9
        },
        "assert": "assertEquals(3, (int) ints.get(1));",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);assertEquals(3, (int) ints.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 1155,
          "column": 9
        },
        "assert": "assertEquals(3, (int) ints.get(2));",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);assertEquals(3, (int) ints.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 1145,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable\u003cInteger\u003e iterable \u003d ints;assertTrue(CollectionUtils.filterInverse(iterable, EQUALS_TWO));",
        "slice": "final List\u003cInteger\u003e ints \u003d new ArrayList\u003c\u003e();ints.add(1);ints.add(2);ints.add(3);ints.add(3);final Iterable\u003cInteger\u003e iterable \u003d ints;assertTrue(CollectionUtils.filterInverse(iterable, EQUALS_TWO));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.filterInverseNullParameters()",
    "annotation": "@Test",
    "code": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertFalse(CollectionUtils.filterInverse(longs, null));assertEquals(4, longs.size());assertFalse(CollectionUtils.filterInverse(null, EQUALS_TWO));assertEquals(4, longs.size());assertFalse(CollectionUtils.filterInverse(null, null));assertEquals(4, longs.size());",
    "offset": [
      {
        "line": 1160,
        "column": 34
      },
      {
        "line": 1161,
        "column": 9
      },
      {
        "line": 1161,
        "column": 21
      },
      {
        "line": 1162,
        "column": 9
      },
      {
        "line": 1162,
        "column": 25
      },
      {
        "line": 1163,
        "column": 9
      },
      {
        "line": 1163,
        "column": 21
      },
      {
        "line": 1164,
        "column": 9
      },
      {
        "line": 1164,
        "column": 25
      },
      {
        "line": 1165,
        "column": 9
      },
      {
        "line": 1165,
        "column": 21
      },
      {
        "line": 1166,
        "column": 9
      },
      {
        "line": 1166,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1160,
          "column": 9
        },
        "assert": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertFalse(CollectionUtils.filterInverse(longs, null));",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertFalse(CollectionUtils.filterInverse(longs, null));"
      },
      {
        "testCodeLocation": {
          "line": 1162,
          "column": 9
        },
        "assert": "assertEquals(4, longs.size());",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertEquals(4, longs.size());"
      },
      {
        "testCodeLocation": {
          "line": 1163,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.filterInverse(null, EQUALS_TWO));",
        "slice": "assertFalse(CollectionUtils.filterInverse(null, EQUALS_TWO));"
      },
      {
        "testCodeLocation": {
          "line": 1164,
          "column": 9
        },
        "assert": "assertEquals(4, longs.size());",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertEquals(4, longs.size());"
      },
      {
        "testCodeLocation": {
          "line": 1165,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.filterInverse(null, null));",
        "slice": "assertFalse(CollectionUtils.filterInverse(null, null));"
      },
      {
        "testCodeLocation": {
          "line": 1166,
          "column": 9
        },
        "assert": "assertEquals(4, longs.size());",
        "slice": "final List\u003cLong\u003e longs \u003d Collections.nCopies(4, 10L);assertEquals(4, longs.size());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.select()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();list.add(1);list.add(2);list.add(3);list.add(4);// Ensure that the collection is the input type or a super type\nfinal Collection\u003cInteger\u003e output1 \u003d CollectionUtils.select(list, EQUALS_TWO);final Collection\u003cNumber\u003e output2 \u003d CollectionUtils.\u003cNumber\u003eselect(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.select(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output3));assertEquals(4, list.size());assertEquals(1, output1.size());assertEquals(2, output2.iterator().next());",
    "offset": [
      {
        "line": 1197,
        "column": 36
      },
      {
        "line": 1198,
        "column": 9
      },
      {
        "line": 1199,
        "column": 9
      },
      {
        "line": 1200,
        "column": 9
      },
      {
        "line": 1201,
        "column": 9
      },
      {
        "line": 1203,
        "column": 45
      },
      {
        "line": 1204,
        "column": 44
      },
      {
        "line": 1205,
        "column": 41
      },
      {
        "line": 1205,
        "column": 82
      },
      {
        "line": 1206,
        "column": 9
      },
      {
        "line": 1206,
        "column": 20
      },
      {
        "line": 1207,
        "column": 9
      },
      {
        "line": 1207,
        "column": 25
      },
      {
        "line": 1208,
        "column": 9
      },
      {
        "line": 1208,
        "column": 25
      },
      {
        "line": 1209,
        "column": 9
      },
      {
        "line": 1209,
        "column": 25
      },
      {
        "line": 1209,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1207,
          "column": 9
        },
        "assert": "assertEquals(4, list.size());",
        "slice": "final List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();list.add(1);list.add(2);list.add(3);list.add(4);assertEquals(4, list.size());"
      },
      {
        "testCodeLocation": {
          "line": 1208,
          "column": 9
        },
        "assert": "assertEquals(1, output1.size());",
        "slice": "final List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();list.add(1);list.add(2);list.add(3);list.add(4);// Ensure that the collection is the input type or a super type\nfinal Collection\u003cInteger\u003e output1 \u003d CollectionUtils.select(list, EQUALS_TWO);assertEquals(1, output1.size());"
      },
      {
        "testCodeLocation": {
          "line": 1209,
          "column": 9
        },
        "assert": "assertEquals(2, output2.iterator().next());",
        "slice": "final List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();list.add(1);list.add(2);list.add(3);list.add(4);// Ensure that the collection is the input type or a super type\nfinal Collection\u003cInteger\u003e output1 \u003d CollectionUtils.select(list, EQUALS_TWO);final Collection\u003cNumber\u003e output2 \u003d CollectionUtils.\u003cNumber\u003eselect(list, EQUALS_TWO);assertEquals(2, output2.iterator().next());"
      },
      {
        "testCodeLocation": {
          "line": 1197,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();list.add(1);list.add(2);list.add(3);list.add(4);// Ensure that the collection is the input type or a super type\nfinal Collection\u003cInteger\u003e output1 \u003d CollectionUtils.select(list, EQUALS_TWO);final Collection\u003cNumber\u003e output2 \u003d CollectionUtils.\u003cNumber\u003eselect(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.select(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output3));",
        "slice": "final List\u003cInteger\u003e list \u003d new ArrayList\u003c\u003e();list.add(1);list.add(2);list.add(3);list.add(4);// Ensure that the collection is the input type or a super type\nfinal Collection\u003cInteger\u003e output1 \u003d CollectionUtils.select(list, EQUALS_TWO);final Collection\u003cNumber\u003e output2 \u003d CollectionUtils.\u003cNumber\u003eselect(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.select(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output3));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.selectWithOutputCollections()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e input \u003d new ArrayList\u003c\u003e();input.add(1);input.add(2);input.add(3);input.add(4);final List\u003cInteger\u003e output \u003d new ArrayList\u003c\u003e();final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();CollectionUtils.select(input, EQUALS_TWO, output, rejected);// output contains 2\nassertEquals(1, output.size());assertEquals(2, CollectionUtils.extractSingleton(output).intValue());// rejected contains 1, 3, and 4\nfinal Integer[] expected \u003d { 1, 3, 4 };Assert.assertArrayEquals(expected, rejected.toArray());output.clear();rejected.clear();CollectionUtils.select((List\u003cInteger\u003e) null, EQUALS_TWO, output, rejected);assertTrue(output.isEmpty());assertTrue(rejected.isEmpty());",
    "offset": [
      {
        "line": 1214,
        "column": 37
      },
      {
        "line": 1215,
        "column": 9
      },
      {
        "line": 1216,
        "column": 9
      },
      {
        "line": 1217,
        "column": 9
      },
      {
        "line": 1218,
        "column": 9
      },
      {
        "line": 1220,
        "column": 38
      },
      {
        "line": 1221,
        "column": 40
      },
      {
        "line": 1223,
        "column": 9
      },
      {
        "line": 1226,
        "column": 9
      },
      {
        "line": 1226,
        "column": 25
      },
      {
        "line": 1227,
        "column": 9
      },
      {
        "line": 1227,
        "column": 25
      },
      {
        "line": 1227,
        "column": 25
      },
      {
        "line": 1231,
        "column": 9
      },
      {
        "line": 1231,
        "column": 44
      },
      {
        "line": 1233,
        "column": 9
      },
      {
        "line": 1234,
        "column": 9
      },
      {
        "line": 1235,
        "column": 9
      },
      {
        "line": 1236,
        "column": 9
      },
      {
        "line": 1236,
        "column": 20
      },
      {
        "line": 1237,
        "column": 9
      },
      {
        "line": 1237,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1233,
          "column": 9
        },
        "assert": "output.clear();rejected.clear();CollectionUtils.select((List\u003cInteger\u003e) null, EQUALS_TWO, output, rejected);assertTrue(output.isEmpty());",
        "slice": "final List\u003cInteger\u003e input \u003d new ArrayList\u003c\u003e();input.add(1);input.add(2);input.add(3);input.add(4);final List\u003cInteger\u003e output \u003d new ArrayList\u003c\u003e();final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();CollectionUtils.select(input, EQUALS_TWO, output, rejected);output.clear();rejected.clear();CollectionUtils.select((List\u003cInteger\u003e) null, EQUALS_TWO, output, rejected);assertTrue(output.isEmpty());"
      },
      {
        "testCodeLocation": {
          "line": 1237,
          "column": 9
        },
        "assert": "assertTrue(rejected.isEmpty());",
        "slice": "final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();rejected.clear();assertTrue(rejected.isEmpty());"
      },
      {
        "testCodeLocation": {
          "line": 1227,
          "column": 9
        },
        "assert": "assertEquals(2, CollectionUtils.extractSingleton(output).intValue());",
        "slice": "final List\u003cInteger\u003e input \u003d new ArrayList\u003c\u003e();input.add(1);input.add(2);input.add(3);input.add(4);final List\u003cInteger\u003e output \u003d new ArrayList\u003c\u003e();final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();CollectionUtils.select(input, EQUALS_TWO, output, rejected);assertEquals(2, CollectionUtils.extractSingleton(output).intValue());"
      },
      {
        "testCodeLocation": {
          "line": 1214,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e input \u003d new ArrayList\u003c\u003e();input.add(1);input.add(2);input.add(3);input.add(4);final List\u003cInteger\u003e output \u003d new ArrayList\u003c\u003e();final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();CollectionUtils.select(input, EQUALS_TWO, output, rejected);// output contains 2\nassertEquals(1, output.size());",
        "slice": "final List\u003cInteger\u003e input \u003d new ArrayList\u003c\u003e();input.add(1);input.add(2);input.add(3);input.add(4);final List\u003cInteger\u003e output \u003d new ArrayList\u003c\u003e();final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();CollectionUtils.select(input, EQUALS_TWO, output, rejected);// output contains 2\nassertEquals(1, output.size());"
      },
      {
        "testCodeLocation": {
          "line": 1230,
          "column": 9
        },
        "assert": "// rejected contains 1, 3, and 4\nfinal Integer[] expected \u003d { 1, 3, 4 };Assert.assertArrayEquals(expected, rejected.toArray());",
        "slice": "final List\u003cInteger\u003e rejected \u003d new ArrayList\u003c\u003e();// rejected contains 1, 3, and 4\nfinal Integer[] expected \u003d { 1, 3, 4 };Assert.assertArrayEquals(expected, rejected.toArray());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.selectRejected()",
    "annotation": "@Test",
    "code": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final Collection\u003c? extends Number\u003e output2 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output2));assertTrue(CollectionUtils.isEqualCollection(output1, output3));assertEquals(4, list.size());assertEquals(3, output1.size());assertTrue(output1.contains(1L));assertTrue(output1.contains(3L));assertTrue(output1.contains(4L));",
    "offset": [
      {
        "line": 1242,
        "column": 33
      },
      {
        "line": 1243,
        "column": 9
      },
      {
        "line": 1244,
        "column": 9
      },
      {
        "line": 1245,
        "column": 9
      },
      {
        "line": 1246,
        "column": 9
      },
      {
        "line": 1247,
        "column": 42
      },
      {
        "line": 1248,
        "column": 54
      },
      {
        "line": 1249,
        "column": 41
      },
      {
        "line": 1249,
        "column": 90
      },
      {
        "line": 1250,
        "column": 9
      },
      {
        "line": 1250,
        "column": 20
      },
      {
        "line": 1251,
        "column": 9
      },
      {
        "line": 1251,
        "column": 20
      },
      {
        "line": 1252,
        "column": 9
      },
      {
        "line": 1252,
        "column": 25
      },
      {
        "line": 1253,
        "column": 9
      },
      {
        "line": 1253,
        "column": 25
      },
      {
        "line": 1254,
        "column": 9
      },
      {
        "line": 1254,
        "column": 20
      },
      {
        "line": 1255,
        "column": 9
      },
      {
        "line": 1255,
        "column": 20
      },
      {
        "line": 1256,
        "column": 9
      },
      {
        "line": 1256,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1251,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isEqualCollection(output1, output3));",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final Collection\u003c? extends Number\u003e output2 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output3));"
      },
      {
        "testCodeLocation": {
          "line": 1252,
          "column": 9
        },
        "assert": "assertEquals(4, list.size());",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);assertEquals(4, list.size());"
      },
      {
        "testCodeLocation": {
          "line": 1253,
          "column": 9
        },
        "assert": "assertEquals(3, output1.size());",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);assertEquals(3, output1.size());"
      },
      {
        "testCodeLocation": {
          "line": 1254,
          "column": 9
        },
        "assert": "assertTrue(output1.contains(1L));",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);assertTrue(output1.contains(1L));"
      },
      {
        "testCodeLocation": {
          "line": 1255,
          "column": 9
        },
        "assert": "assertTrue(output1.contains(3L));",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);assertTrue(output1.contains(3L));"
      },
      {
        "testCodeLocation": {
          "line": 1256,
          "column": 9
        },
        "assert": "assertTrue(output1.contains(4L));",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);assertTrue(output1.contains(4L));"
      },
      {
        "testCodeLocation": {
          "line": 1242,
          "column": 9
        },
        "assert": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final Collection\u003c? extends Number\u003e output2 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output2));",
        "slice": "final List\u003cLong\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);list.add(4L);final Collection\u003cLong\u003e output1 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final Collection\u003c? extends Number\u003e output2 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO);final HashSet\u003cNumber\u003e output3 \u003d CollectionUtils.selectRejected(list, EQUALS_TWO, new HashSet\u003cNumber\u003e());assertTrue(CollectionUtils.isEqualCollection(output1, output2));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.collect()",
    "annotation": "@Test",
    "code": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);assertTrue(collection.size() \u003d\u003d collectionA.size());assertCollectResult(collection);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());assertTrue(list.size() \u003d\u003d collectionA.size());assertCollectResult(list);Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);assertTrue(collection.size() \u003d\u003d collectionA.size());assertCollectResult(collection);iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);assertTrue(collection.size() \u003d\u003d collectionA.size());assertTrue(collection.contains(2L) \u0026\u0026 !collection.contains(1));collection \u003d CollectionUtils.collect((Iterator\u003cInteger\u003e) null, (Transformer\u003cInteger, Number\u003e) null);assertTrue(collection.size() \u003d\u003d 0);final int size \u003d collectionA.size();collectionB \u003d CollectionUtils.collect((Collection\u003cInteger\u003e) null, transformer, collectionB);assertTrue(collectionA.size() \u003d\u003d size \u0026\u0026 collectionA.contains(1));CollectionUtils.collect(collectionB, null, collectionA);assertTrue(collectionA.size() \u003d\u003d size \u0026\u0026 collectionA.contains(1));",
    "offset": [
      {
        "line": 1261,
        "column": 55
      },
      {
        "line": 1262,
        "column": 41
      },
      {
        "line": 1263,
        "column": 9
      },
      {
        "line": 1263,
        "column": 20
      },
      {
        "line": 1263,
        "column": 41
      },
      {
        "line": 1264,
        "column": 9
      },
      {
        "line": 1267,
        "column": 16
      },
      {
        "line": 1267,
        "column": 66
      },
      {
        "line": 1268,
        "column": 9
      },
      {
        "line": 1268,
        "column": 20
      },
      {
        "line": 1268,
        "column": 35
      },
      {
        "line": 1269,
        "column": 9
      },
      {
        "line": 1272,
        "column": 16
      },
      {
        "line": 1272,
        "column": 63
      },
      {
        "line": 1274,
        "column": 20
      },
      {
        "line": 1275,
        "column": 16
      },
      {
        "line": 1276,
        "column": 9
      },
      {
        "line": 1276,
        "column": 20
      },
      {
        "line": 1276,
        "column": 41
      },
      {
        "line": 1277,
        "column": 9
      },
      {
        "line": 1279,
        "column": 20
      },
      {
        "line": 1280,
        "column": 22
      },
      {
        "line": 1281,
        "column": 9
      },
      {
        "line": 1281,
        "column": 20
      },
      {
        "line": 1281,
        "column": 41
      },
      {
        "line": 1282,
        "column": 9
      },
      {
        "line": 1282,
        "column": 20
      },
      {
        "line": 1282,
        "column": 48
      },
      {
        "line": 1283,
        "column": 22
      },
      {
        "line": 1284,
        "column": 9
      },
      {
        "line": 1284,
        "column": 20
      },
      {
        "line": 1286,
        "column": 26
      },
      {
        "line": 1287,
        "column": 23
      },
      {
        "line": 1288,
        "column": 9
      },
      {
        "line": 1288,
        "column": 20
      },
      {
        "line": 1288,
        "column": 50
      },
      {
        "line": 1289,
        "column": 9
      },
      {
        "line": 1290,
        "column": 9
      },
      {
        "line": 1290,
        "column": 20
      },
      {
        "line": 1290,
        "column": 50
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1264,
          "column": 9
        },
        "assert": "assertCollectResult(collection);",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);assertCollectResult(collection);"
      },
      {
        "testCodeLocation": {
          "line": 1266,
          "column": 9
        },
        "assert": "ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());assertTrue(list.size() \u003d\u003d collectionA.size());",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());assertTrue(list.size() \u003d\u003d collectionA.size());"
      },
      {
        "testCodeLocation": {
          "line": 1282,
          "column": 9
        },
        "assert": "assertTrue(collection.contains(2L) \u0026\u0026 !collection.contains(1));",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);assertTrue(collection.contains(2L) \u0026\u0026 !collection.contains(1));"
      },
      {
        "testCodeLocation": {
          "line": 1283,
          "column": 9
        },
        "assert": "collection \u003d CollectionUtils.collect((Iterator\u003cInteger\u003e) null, (Transformer\u003cInteger, Number\u003e) null);assertTrue(collection.size() \u003d\u003d 0);",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);collection \u003d CollectionUtils.collect((Iterator\u003cInteger\u003e) null, (Transformer\u003cInteger, Number\u003e) null);assertTrue(collection.size() \u003d\u003d 0);"
      },
      {
        "testCodeLocation": {
          "line": 1269,
          "column": 9
        },
        "assert": "assertCollectResult(list);",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());assertCollectResult(list);"
      },
      {
        "testCodeLocation": {
          "line": 1286,
          "column": 9
        },
        "assert": "final int size \u003d collectionA.size();collectionB \u003d CollectionUtils.collect((Collection\u003cInteger\u003e) null, transformer, collectionB);assertTrue(collectionA.size() \u003d\u003d size \u0026\u0026 collectionA.contains(1));",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);collection \u003d CollectionUtils.collect((Iterator\u003cInteger\u003e) null, (Transformer\u003cInteger, Number\u003e) null);final int size \u003d collectionA.size();collectionB \u003d CollectionUtils.collect((Collection\u003cInteger\u003e) null, transformer, collectionB);assertTrue(collectionA.size() \u003d\u003d size \u0026\u0026 collectionA.contains(1));"
      },
      {
        "testCodeLocation": {
          "line": 1271,
          "column": 9
        },
        "assert": "Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);assertTrue(collection.size() \u003d\u003d collectionA.size());",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);assertTrue(collection.size() \u003d\u003d collectionA.size());"
      },
      {
        "testCodeLocation": {
          "line": 1289,
          "column": 9
        },
        "assert": "CollectionUtils.collect(collectionB, null, collectionA);assertTrue(collectionA.size() \u003d\u003d size \u0026\u0026 collectionA.contains(1));",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);collection \u003d CollectionUtils.collect((Iterator\u003cInteger\u003e) null, (Transformer\u003cInteger, Number\u003e) null);final int size \u003d collectionA.size();collectionB \u003d CollectionUtils.collect((Collection\u003cInteger\u003e) null, transformer, collectionB);CollectionUtils.collect(collectionB, null, collectionA);assertTrue(collectionA.size() \u003d\u003d size \u0026\u0026 collectionA.contains(1));"
      },
      {
        "testCodeLocation": {
          "line": 1261,
          "column": 9
        },
        "assert": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);assertTrue(collection.size() \u003d\u003d collectionA.size());",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);assertTrue(collection.size() \u003d\u003d collectionA.size());"
      },
      {
        "testCodeLocation": {
          "line": 1277,
          "column": 9
        },
        "assert": "assertCollectResult(collection);",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);assertCollectResult(collection);"
      },
      {
        "testCodeLocation": {
          "line": 1279,
          "column": 9
        },
        "assert": "iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);assertTrue(collection.size() \u003d\u003d collectionA.size());",
        "slice": "final Transformer\u003cNumber, Long\u003e transformer \u003d TransformerUtils.constantTransformer(2L);Collection\u003cNumber\u003e collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterableA, transformer);ArrayList\u003cNumber\u003e list;list \u003d CollectionUtils.collect(collectionA, transformer, new ArrayList\u003cNumber\u003e());Iterator\u003cInteger\u003e iterator \u003d null;list \u003d CollectionUtils.collect(iterator, transformer, new ArrayList\u003cNumber\u003e());iterator \u003d iterableA.iterator();list \u003d CollectionUtils.collect(iterator, transformer, list);iterator \u003d collectionA.iterator();collection \u003d CollectionUtils.\u003cInteger, Number\u003ecollect(iterator, transformer);assertTrue(collection.size() \u003d\u003d collectionA.size());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.transform1()",
    "annotation": "@Test",
    "code": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);assertEquals(3, list.size());assertEquals(1, list.get(0));assertEquals(2, list.get(1));assertEquals(3, list.get(2));list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);assertEquals(3, list.size());CollectionUtils.transform(list, null);assertEquals(3, list.size());CollectionUtils.transform(null, null);assertEquals(3, list.size());",
    "offset": [
      {
        "line": 1308,
        "column": 29
      },
      {
        "line": 1309,
        "column": 9
      },
      {
        "line": 1310,
        "column": 9
      },
      {
        "line": 1311,
        "column": 9
      },
      {
        "line": 1312,
        "column": 9
      },
      {
        "line": 1313,
        "column": 9
      },
      {
        "line": 1313,
        "column": 25
      },
      {
        "line": 1314,
        "column": 9
      },
      {
        "line": 1314,
        "column": 25
      },
      {
        "line": 1315,
        "column": 9
      },
      {
        "line": 1315,
        "column": 25
      },
      {
        "line": 1316,
        "column": 9
      },
      {
        "line": 1316,
        "column": 25
      },
      {
        "line": 1318,
        "column": 16
      },
      {
        "line": 1319,
        "column": 9
      },
      {
        "line": 1320,
        "column": 9
      },
      {
        "line": 1321,
        "column": 9
      },
      {
        "line": 1322,
        "column": 9
      },
      {
        "line": 1323,
        "column": 9
      },
      {
        "line": 1323,
        "column": 25
      },
      {
        "line": 1324,
        "column": 9
      },
      {
        "line": 1325,
        "column": 9
      },
      {
        "line": 1325,
        "column": 25
      },
      {
        "line": 1326,
        "column": 9
      },
      {
        "line": 1327,
        "column": 9
      },
      {
        "line": 1327,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1314,
          "column": 9
        },
        "assert": "assertEquals(1, list.get(0));",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);assertEquals(1, list.get(0));"
      },
      {
        "testCodeLocation": {
          "line": 1315,
          "column": 9
        },
        "assert": "assertEquals(2, list.get(1));",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);assertEquals(2, list.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 1316,
          "column": 9
        },
        "assert": "assertEquals(3, list.get(2));",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);assertEquals(3, list.get(2));"
      },
      {
        "testCodeLocation": {
          "line": 1318,
          "column": 9
        },
        "assert": "list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);assertEquals(3, list.size());",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);assertEquals(3, list.size());"
      },
      {
        "testCodeLocation": {
          "line": 1308,
          "column": 9
        },
        "assert": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);assertEquals(3, list.size());",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);assertEquals(3, list.size());"
      },
      {
        "testCodeLocation": {
          "line": 1324,
          "column": 9
        },
        "assert": "CollectionUtils.transform(list, null);assertEquals(3, list.size());",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);CollectionUtils.transform(list, null);assertEquals(3, list.size());"
      },
      {
        "testCodeLocation": {
          "line": 1326,
          "column": 9
        },
        "assert": "CollectionUtils.transform(null, null);assertEquals(3, list.size());",
        "slice": "List\u003cNumber\u003e list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(list, TRANSFORM_TO_INTEGER);list \u003d new ArrayList\u003c\u003e();list.add(1L);list.add(2L);list.add(3L);CollectionUtils.transform(null, TRANSFORM_TO_INTEGER);CollectionUtils.transform(list, null);CollectionUtils.transform(null, null);assertEquals(3, list.size());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.transform2()",
    "annotation": "@Test",
    "code": "final Set\u003cNumber\u003e set \u003d new HashSet\u003c\u003e();set.add(1L);set.add(2L);set.add(3L);CollectionUtils.transform(set, new Transformer\u003cObject, Integer\u003e() {\n\n    @Override\n    public Integer transform(final Object input) {\n        return 4;\n    }\n});assertEquals(1, set.size());assertEquals(4, set.iterator().next());",
    "offset": [
      {
        "line": 1332,
        "column": 33
      },
      {
        "line": 1333,
        "column": 9
      },
      {
        "line": 1334,
        "column": 9
      },
      {
        "line": 1335,
        "column": 9
      },
      {
        "line": 1336,
        "column": 9
      },
      {
        "line": 1336,
        "column": 40
      },
      {
        "line": 1342,
        "column": 9
      },
      {
        "line": 1342,
        "column": 25
      },
      {
        "line": 1343,
        "column": 9
      },
      {
        "line": 1343,
        "column": 25
      },
      {
        "line": 1343,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1332,
          "column": 9
        },
        "assert": "final Set\u003cNumber\u003e set \u003d new HashSet\u003c\u003e();set.add(1L);set.add(2L);set.add(3L);CollectionUtils.transform(set, new Transformer\u003cObject, Integer\u003e() {\n\n    @Override\n    public Integer transform(final Object input) {\n        return 4;\n    }\n});assertEquals(1, set.size());",
        "slice": "final Set\u003cNumber\u003e set \u003d new HashSet\u003c\u003e();set.add(1L);set.add(2L);set.add(3L);CollectionUtils.transform(set, new Transformer\u003cObject, Integer\u003e() {\n\n    @Override\n    public Integer transform(final Object input) {\n        return 4;\n    }\n});assertEquals(1, set.size());"
      },
      {
        "testCodeLocation": {
          "line": 1343,
          "column": 9
        },
        "assert": "assertEquals(4, set.iterator().next());",
        "slice": "final Set\u003cNumber\u003e set \u003d new HashSet\u003c\u003e();set.add(1L);set.add(2L);set.add(3L);assertEquals(4, set.iterator().next());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.addIgnoreNull()",
    "annotation": "@Test",
    "code": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertFalse(CollectionUtils.addIgnoreNull(set, null));assertEquals(3, set.size());assertFalse(CollectionUtils.addIgnoreNull(set, \"1\"));assertEquals(3, set.size());assertEquals(true, CollectionUtils.addIgnoreNull(set, \"4\"));assertEquals(4, set.size());assertEquals(true, set.contains(\"4\"));",
    "offset": [
      {
        "line": 1349,
        "column": 33
      },
      {
        "line": 1350,
        "column": 9
      },
      {
        "line": 1351,
        "column": 9
      },
      {
        "line": 1352,
        "column": 9
      },
      {
        "line": 1353,
        "column": 9
      },
      {
        "line": 1353,
        "column": 21
      },
      {
        "line": 1354,
        "column": 9
      },
      {
        "line": 1354,
        "column": 25
      },
      {
        "line": 1355,
        "column": 9
      },
      {
        "line": 1355,
        "column": 21
      },
      {
        "line": 1356,
        "column": 9
      },
      {
        "line": 1356,
        "column": 25
      },
      {
        "line": 1357,
        "column": 9
      },
      {
        "line": 1357,
        "column": 28
      },
      {
        "line": 1358,
        "column": 9
      },
      {
        "line": 1358,
        "column": 25
      },
      {
        "line": 1359,
        "column": 9
      },
      {
        "line": 1359,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1349,
          "column": 9
        },
        "assert": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertFalse(CollectionUtils.addIgnoreNull(set, null));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertFalse(CollectionUtils.addIgnoreNull(set, null));"
      },
      {
        "testCodeLocation": {
          "line": 1354,
          "column": 9
        },
        "assert": "assertEquals(3, set.size());",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertEquals(3, set.size());"
      },
      {
        "testCodeLocation": {
          "line": 1355,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.addIgnoreNull(set, \"1\"));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertFalse(CollectionUtils.addIgnoreNull(set, \"1\"));"
      },
      {
        "testCodeLocation": {
          "line": 1356,
          "column": 9
        },
        "assert": "assertEquals(3, set.size());",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertEquals(3, set.size());"
      },
      {
        "testCodeLocation": {
          "line": 1357,
          "column": 9
        },
        "assert": "assertEquals(true, CollectionUtils.addIgnoreNull(set, \"4\"));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertEquals(true, CollectionUtils.addIgnoreNull(set, \"4\"));"
      },
      {
        "testCodeLocation": {
          "line": 1358,
          "column": 9
        },
        "assert": "assertEquals(4, set.size());",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertEquals(4, set.size());"
      },
      {
        "testCodeLocation": {
          "line": 1359,
          "column": 9
        },
        "assert": "assertEquals(true, set.contains(\"4\"));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertEquals(true, set.contains(\"4\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.predicatedCollection()",
    "annotation": "@Test",
    "code": "final Predicate\u003cObject\u003e predicate \u003d PredicateUtils.instanceofPredicate(Integer.class);final Collection\u003cNumber\u003e collection \u003d CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), predicate);assertTrue(\"returned object should be a PredicatedCollection\", collection instanceof PredicatedCollection);try {\n    CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), null);\n    fail(\"Expecting NullPointerException for null predicate.\");\n} catch (final NullPointerException ex) {\n    // expected\n}try {\n    CollectionUtils.predicatedCollection(null, predicate);\n    fail(\"Expecting NullPointerException for null collection.\");\n} catch (final NullPointerException ex) {\n    // expected\n}",
    "offset": [
      {
        "line": 1365,
        "column": 45
      },
      {
        "line": 1366,
        "column": 47
      },
      {
        "line": 1366,
        "column": 84
      },
      {
        "line": 1367,
        "column": 9
      },
      {
        "line": 1369,
        "column": 13
      },
      {
        "line": 1369,
        "column": 50
      },
      {
        "line": 1370,
        "column": 13
      },
      {
        "line": 1375,
        "column": 13
      },
      {
        "line": 1376,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1365,
          "column": 9
        },
        "assert": "final Predicate\u003cObject\u003e predicate \u003d PredicateUtils.instanceofPredicate(Integer.class);final Collection\u003cNumber\u003e collection \u003d CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), predicate);assertTrue(\"returned object should be a PredicatedCollection\", collection instanceof PredicatedCollection);",
        "slice": "final Predicate\u003cObject\u003e predicate \u003d PredicateUtils.instanceofPredicate(Integer.class);final Collection\u003cNumber\u003e collection \u003d CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), predicate);assertTrue(\"returned object should be a PredicatedCollection\", collection instanceof PredicatedCollection);"
      },
      {
        "testCodeLocation": {
          "line": 1368,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), null);\n    fail(\"Expecting NullPointerException for null predicate.\");\n} catch (final NullPointerException ex) {\n    // expected\n}",
        "slice": "final Predicate\u003cObject\u003e predicate \u003d PredicateUtils.instanceofPredicate(Integer.class);final Collection\u003cNumber\u003e collection \u003d CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), predicate);try {\n    CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), null);\n    fail(\"Expecting NullPointerException for null predicate.\");\n} catch (final NullPointerException ex) {\n    // expected\n}"
      },
      {
        "testCodeLocation": {
          "line": 1374,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.predicatedCollection(null, predicate);\n    fail(\"Expecting NullPointerException for null collection.\");\n} catch (final NullPointerException ex) {\n    // expected\n}",
        "slice": "final Predicate\u003cObject\u003e predicate \u003d PredicateUtils.instanceofPredicate(Integer.class);final Collection\u003cNumber\u003e collection \u003d CollectionUtils.predicatedCollection(new ArrayList\u003cNumber\u003e(), predicate);try {\n    CollectionUtils.predicatedCollection(null, predicate);\n    fail(\"Expecting NullPointerException for null collection.\");\n} catch (final NullPointerException ex) {\n    // expected\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.isFull()",
    "annotation": "@Test",
    "code": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");try {\n    CollectionUtils.isFull(null);\n    fail();\n} catch (final NullPointerException ex) {\n}assertFalse(CollectionUtils.isFull(set));final CircularFifoQueue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);assertEquals(false, CollectionUtils.isFull(buf));buf.remove(\"2\");assertFalse(CollectionUtils.isFull(buf));buf.add(\"2\");assertEquals(false, CollectionUtils.isFull(buf));",
    "offset": [
      {
        "line": 1384,
        "column": 33
      },
      {
        "line": 1385,
        "column": 9
      },
      {
        "line": 1386,
        "column": 9
      },
      {
        "line": 1387,
        "column": 9
      },
      {
        "line": 1389,
        "column": 13
      },
      {
        "line": 1390,
        "column": 13
      },
      {
        "line": 1393,
        "column": 9
      },
      {
        "line": 1393,
        "column": 21
      },
      {
        "line": 1395,
        "column": 47
      },
      {
        "line": 1396,
        "column": 9
      },
      {
        "line": 1396,
        "column": 29
      },
      {
        "line": 1397,
        "column": 9
      },
      {
        "line": 1398,
        "column": 9
      },
      {
        "line": 1398,
        "column": 21
      },
      {
        "line": 1399,
        "column": 9
      },
      {
        "line": 1400,
        "column": 9
      },
      {
        "line": 1400,
        "column": 29
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1393,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.isFull(set));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertFalse(CollectionUtils.isFull(set));"
      },
      {
        "testCodeLocation": {
          "line": 1395,
          "column": 9
        },
        "assert": "final CircularFifoQueue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);assertEquals(false, CollectionUtils.isFull(buf));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");final CircularFifoQueue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);assertEquals(false, CollectionUtils.isFull(buf));"
      },
      {
        "testCodeLocation": {
          "line": 1397,
          "column": 9
        },
        "assert": "buf.remove(\"2\");assertFalse(CollectionUtils.isFull(buf));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");final CircularFifoQueue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);buf.remove(\"2\");assertFalse(CollectionUtils.isFull(buf));"
      },
      {
        "testCodeLocation": {
          "line": 1399,
          "column": 9
        },
        "assert": "buf.add(\"2\");assertEquals(false, CollectionUtils.isFull(buf));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");final CircularFifoQueue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);buf.remove(\"2\");buf.add(\"2\");assertEquals(false, CollectionUtils.isFull(buf));"
      },
      {
        "testCodeLocation": {
          "line": 1384,
          "column": 9
        },
        "assert": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");try {\n    CollectionUtils.isFull(null);\n    fail();\n} catch (final NullPointerException ex) {\n}",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");try {\n    CollectionUtils.isFull(null);\n    fail();\n} catch (final NullPointerException ex) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.isEmpty()",
    "annotation": "@Test",
    "code": "assertFalse(CollectionUtils.isNotEmpty(null));assertTrue(CollectionUtils.isNotEmpty(collectionA));",
    "offset": [
      {
        "line": 1405,
        "column": 9
      },
      {
        "line": 1405,
        "column": 21
      },
      {
        "line": 1406,
        "column": 9
      },
      {
        "line": 1406,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1405,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.isNotEmpty(null));",
        "slice": "assertFalse(CollectionUtils.isNotEmpty(null));"
      },
      {
        "testCodeLocation": {
          "line": 1406,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.isNotEmpty(collectionA));",
        "slice": "assertTrue(CollectionUtils.isNotEmpty(collectionA));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.maxSize()",
    "annotation": "@Test",
    "code": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");try {\n    CollectionUtils.maxSize(null);\n    fail();\n} catch (final NullPointerException ex) {\n}assertEquals(-1, CollectionUtils.maxSize(set));final Queue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);assertEquals(3, CollectionUtils.maxSize(buf));buf.remove(\"2\");assertEquals(3, CollectionUtils.maxSize(buf));buf.add(\"2\");assertEquals(3, CollectionUtils.maxSize(buf));",
    "offset": [
      {
        "line": 1411,
        "column": 33
      },
      {
        "line": 1412,
        "column": 9
      },
      {
        "line": 1413,
        "column": 9
      },
      {
        "line": 1414,
        "column": 9
      },
      {
        "line": 1416,
        "column": 13
      },
      {
        "line": 1417,
        "column": 13
      },
      {
        "line": 1420,
        "column": 9
      },
      {
        "line": 1420,
        "column": 26
      },
      {
        "line": 1422,
        "column": 35
      },
      {
        "line": 1423,
        "column": 9
      },
      {
        "line": 1423,
        "column": 25
      },
      {
        "line": 1424,
        "column": 9
      },
      {
        "line": 1425,
        "column": 9
      },
      {
        "line": 1425,
        "column": 25
      },
      {
        "line": 1426,
        "column": 9
      },
      {
        "line": 1427,
        "column": 9
      },
      {
        "line": 1427,
        "column": 25
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1424,
          "column": 9
        },
        "assert": "buf.remove(\"2\");assertEquals(3, CollectionUtils.maxSize(buf));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");final Queue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);buf.remove(\"2\");assertEquals(3, CollectionUtils.maxSize(buf));"
      },
      {
        "testCodeLocation": {
          "line": 1426,
          "column": 9
        },
        "assert": "buf.add(\"2\");assertEquals(3, CollectionUtils.maxSize(buf));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");final Queue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);buf.remove(\"2\");buf.add(\"2\");assertEquals(3, CollectionUtils.maxSize(buf));"
      },
      {
        "testCodeLocation": {
          "line": 1411,
          "column": 9
        },
        "assert": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");try {\n    CollectionUtils.maxSize(null);\n    fail();\n} catch (final NullPointerException ex) {\n}",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");try {\n    CollectionUtils.maxSize(null);\n    fail();\n} catch (final NullPointerException ex) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 1420,
          "column": 9
        },
        "assert": "assertEquals(-1, CollectionUtils.maxSize(set));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");assertEquals(-1, CollectionUtils.maxSize(set));"
      },
      {
        "testCodeLocation": {
          "line": 1422,
          "column": 9
        },
        "assert": "final Queue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);assertEquals(3, CollectionUtils.maxSize(buf));",
        "slice": "final Set\u003cString\u003e set \u003d new HashSet\u003c\u003e();set.add(\"1\");set.add(\"2\");set.add(\"3\");final Queue\u003cString\u003e buf \u003d new CircularFifoQueue\u003c\u003e(set);assertEquals(3, CollectionUtils.maxSize(buf));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.intersectionUsesMethodEquals()",
    "annotation": "@Test",
    "code": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// ...which are equal...\nassertEquals(elta, eltb);assertEquals(eltb, elta);// ...but not the same (\u003d\u003d).\nassertTrue(elta !\u003d eltb);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);assertEquals(1, intersection.size());// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();assertTrue(eltc \u003d\u003d elta \u0026\u0026 eltc !\u003d eltb || eltc !\u003d elta \u0026\u0026 eltc \u003d\u003d eltb);// In any event, this element remains equal,\n// to both elta and eltb.\nassertEquals(elta, eltc);assertEquals(eltc, elta);assertEquals(eltb, eltc);assertEquals(eltc, eltb);",
    "offset": [
      {
        "line": 1433,
        "column": 30
      },
      {
        "line": 1434,
        "column": 30
      },
      {
        "line": 1437,
        "column": 9
      },
      {
        "line": 1438,
        "column": 9
      },
      {
        "line": 1441,
        "column": 9
      },
      {
        "line": 1444,
        "column": 41
      },
      {
        "line": 1445,
        "column": 42
      },
      {
        "line": 1449,
        "column": 9
      },
      {
        "line": 1450,
        "column": 9
      },
      {
        "line": 1454,
        "column": 49
      },
      {
        "line": 1455,
        "column": 9
      },
      {
        "line": 1455,
        "column": 25
      },
      {
        "line": 1460,
        "column": 29
      },
      {
        "line": 1460,
        "column": 29
      },
      {
        "line": 1461,
        "column": 9
      },
      {
        "line": 1465,
        "column": 9
      },
      {
        "line": 1466,
        "column": 9
      },
      {
        "line": 1467,
        "column": 9
      },
      {
        "line": 1468,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1441,
          "column": 9
        },
        "assert": "// ...but not the same (\u003d\u003d).\nassertTrue(elta !\u003d eltb);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// ...but not the same (\u003d\u003d).\nassertTrue(elta !\u003d eltb);"
      },
      {
        "testCodeLocation": {
          "line": 1444,
          "column": 9
        },
        "assert": "// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);assertEquals(1, intersection.size());",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);assertEquals(1, intersection.size());"
      },
      {
        "testCodeLocation": {
          "line": 1460,
          "column": 9
        },
        "assert": "// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();assertTrue(eltc \u003d\u003d elta \u0026\u0026 eltc !\u003d eltb || eltc !\u003d elta \u0026\u0026 eltc \u003d\u003d eltb);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();assertTrue(eltc \u003d\u003d elta \u0026\u0026 eltc !\u003d eltb || eltc !\u003d elta \u0026\u0026 eltc \u003d\u003d eltb);"
      },
      {
        "testCodeLocation": {
          "line": 1433,
          "column": 9
        },
        "assert": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// ...which are equal...\nassertEquals(elta, eltb);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// ...which are equal...\nassertEquals(elta, eltb);"
      },
      {
        "testCodeLocation": {
          "line": 1465,
          "column": 9
        },
        "assert": "// In any event, this element remains equal,\n// to both elta and eltb.\nassertEquals(elta, eltc);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();// In any event, this element remains equal,\n// to both elta and eltb.\nassertEquals(elta, eltc);"
      },
      {
        "testCodeLocation": {
          "line": 1466,
          "column": 9
        },
        "assert": "assertEquals(eltc, elta);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();assertEquals(eltc, elta);"
      },
      {
        "testCodeLocation": {
          "line": 1467,
          "column": 9
        },
        "assert": "assertEquals(eltb, eltc);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();assertEquals(eltb, eltc);"
      },
      {
        "testCodeLocation": {
          "line": 1468,
          "column": 9
        },
        "assert": "assertEquals(eltc, eltb);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);// Let cola and colb be collections...\nfinal Collection\u003cNumber\u003e cola \u003d new ArrayList\u003c\u003e();final Collection\u003cInteger\u003e colb \u003d new ArrayList\u003c\u003e();// ...which contain elta and eltb,\n// respectively.\ncola.add(elta);colb.add(eltb);// Then the intersection of the two\n// should contain one element.\nfinal Collection\u003cNumber\u003e intersection \u003d CollectionUtils.intersection(cola, colb);// In practice, this element will be the same (\u003d\u003d) as elta\n// or eltb, although this isn\u0027t strictly part of the\n// contract.\nfinal Object eltc \u003d intersection.iterator().next();assertEquals(eltc, eltb);"
      },
      {
        "testCodeLocation": {
          "line": 1438,
          "column": 9
        },
        "assert": "assertEquals(eltb, elta);",
        "slice": "// Let elta and eltb be objects...\n// Cannot use valueOf here\nfinal Integer elta \u003d new Integer(17);final Integer eltb \u003d new Integer(17);assertEquals(eltb, elta);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testRetainAll()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);assertEquals(2, result.size());assertEquals(true, result.contains(\"A\"));assertFalse(result.contains(\"B\"));assertEquals(true, result.contains(\"C\"));assertEquals(3, base.size());assertEquals(true, base.contains(\"A\"));assertEquals(true, base.contains(\"B\"));assertEquals(true, base.contains(\"C\"));assertEquals(3, sub.size());assertEquals(true, sub.contains(\"A\"));assertEquals(true, sub.contains(\"C\"));assertEquals(true, sub.contains(\"X\"));try {\n    CollectionUtils.retainAll(null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
    "offset": [
      {
        "line": 1475,
        "column": 35
      },
      {
        "line": 1476,
        "column": 9
      },
      {
        "line": 1477,
        "column": 9
      },
      {
        "line": 1478,
        "column": 9
      },
      {
        "line": 1479,
        "column": 34
      },
      {
        "line": 1480,
        "column": 9
      },
      {
        "line": 1481,
        "column": 9
      },
      {
        "line": 1482,
        "column": 9
      },
      {
        "line": 1484,
        "column": 43
      },
      {
        "line": 1485,
        "column": 9
      },
      {
        "line": 1485,
        "column": 25
      },
      {
        "line": 1486,
        "column": 9
      },
      {
        "line": 1486,
        "column": 28
      },
      {
        "line": 1487,
        "column": 9
      },
      {
        "line": 1487,
        "column": 21
      },
      {
        "line": 1488,
        "column": 9
      },
      {
        "line": 1488,
        "column": 28
      },
      {
        "line": 1489,
        "column": 9
      },
      {
        "line": 1489,
        "column": 25
      },
      {
        "line": 1490,
        "column": 9
      },
      {
        "line": 1490,
        "column": 28
      },
      {
        "line": 1491,
        "column": 9
      },
      {
        "line": 1491,
        "column": 28
      },
      {
        "line": 1492,
        "column": 9
      },
      {
        "line": 1492,
        "column": 28
      },
      {
        "line": 1493,
        "column": 9
      },
      {
        "line": 1493,
        "column": 25
      },
      {
        "line": 1494,
        "column": 9
      },
      {
        "line": 1494,
        "column": 28
      },
      {
        "line": 1495,
        "column": 9
      },
      {
        "line": 1495,
        "column": 28
      },
      {
        "line": 1496,
        "column": 9
      },
      {
        "line": 1496,
        "column": 28
      },
      {
        "line": 1499,
        "column": 13
      },
      {
        "line": 1500,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1475,
          "column": 9
        },
        "assert": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);assertEquals(2, result.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);assertEquals(2, result.size());"
      },
      {
        "testCodeLocation": {
          "line": 1486,
          "column": 9
        },
        "assert": "assertEquals(true, result.contains(\"A\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);assertEquals(true, result.contains(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 1487,
          "column": 9
        },
        "assert": "assertFalse(result.contains(\"B\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);assertFalse(result.contains(\"B\"));"
      },
      {
        "testCodeLocation": {
          "line": 1488,
          "column": 9
        },
        "assert": "assertEquals(true, result.contains(\"C\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);assertEquals(true, result.contains(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 1489,
          "column": 9
        },
        "assert": "assertEquals(3, base.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(3, base.size());"
      },
      {
        "testCodeLocation": {
          "line": 1490,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"A\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(true, base.contains(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 1491,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"B\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(true, base.contains(\"B\"));"
      },
      {
        "testCodeLocation": {
          "line": 1492,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"C\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(true, base.contains(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 1493,
          "column": 9
        },
        "assert": "assertEquals(3, sub.size());",
        "slice": "final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(3, sub.size());"
      },
      {
        "testCodeLocation": {
          "line": 1494,
          "column": 9
        },
        "assert": "assertEquals(true, sub.contains(\"A\"));",
        "slice": "final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(true, sub.contains(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 1495,
          "column": 9
        },
        "assert": "assertEquals(true, sub.contains(\"C\"));",
        "slice": "final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(true, sub.contains(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 1496,
          "column": 9
        },
        "assert": "assertEquals(true, sub.contains(\"X\"));",
        "slice": "final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(true, sub.contains(\"X\"));"
      },
      {
        "testCodeLocation": {
          "line": 1498,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.retainAll(null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cObject\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, sub);try {\n    CollectionUtils.retainAll(null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testRemoveAll()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);assertEquals(1, result.size());assertFalse(result.contains(\"A\"));assertEquals(true, result.contains(\"B\"));assertFalse(result.contains(\"C\"));assertEquals(3, base.size());assertEquals(true, base.contains(\"A\"));assertEquals(true, base.contains(\"B\"));assertEquals(true, base.contains(\"C\"));assertEquals(3, sub.size());assertEquals(true, sub.contains(\"A\"));assertEquals(true, sub.contains(\"C\"));assertEquals(true, sub.contains(\"X\"));try {\n    CollectionUtils.removeAll(null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
    "offset": [
      {
        "line": 1507,
        "column": 35
      },
      {
        "line": 1508,
        "column": 9
      },
      {
        "line": 1509,
        "column": 9
      },
      {
        "line": 1510,
        "column": 9
      },
      {
        "line": 1511,
        "column": 34
      },
      {
        "line": 1512,
        "column": 9
      },
      {
        "line": 1513,
        "column": 9
      },
      {
        "line": 1514,
        "column": 9
      },
      {
        "line": 1516,
        "column": 43
      },
      {
        "line": 1517,
        "column": 9
      },
      {
        "line": 1517,
        "column": 25
      },
      {
        "line": 1518,
        "column": 9
      },
      {
        "line": 1518,
        "column": 21
      },
      {
        "line": 1519,
        "column": 9
      },
      {
        "line": 1519,
        "column": 28
      },
      {
        "line": 1520,
        "column": 9
      },
      {
        "line": 1520,
        "column": 21
      },
      {
        "line": 1521,
        "column": 9
      },
      {
        "line": 1521,
        "column": 25
      },
      {
        "line": 1522,
        "column": 9
      },
      {
        "line": 1522,
        "column": 28
      },
      {
        "line": 1523,
        "column": 9
      },
      {
        "line": 1523,
        "column": 28
      },
      {
        "line": 1524,
        "column": 9
      },
      {
        "line": 1524,
        "column": 28
      },
      {
        "line": 1525,
        "column": 9
      },
      {
        "line": 1525,
        "column": 25
      },
      {
        "line": 1526,
        "column": 9
      },
      {
        "line": 1526,
        "column": 28
      },
      {
        "line": 1527,
        "column": 9
      },
      {
        "line": 1527,
        "column": 28
      },
      {
        "line": 1528,
        "column": 9
      },
      {
        "line": 1528,
        "column": 28
      },
      {
        "line": 1531,
        "column": 13
      },
      {
        "line": 1532,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1507,
          "column": 9
        },
        "assert": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);assertEquals(1, result.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);assertEquals(1, result.size());"
      },
      {
        "testCodeLocation": {
          "line": 1518,
          "column": 9
        },
        "assert": "assertFalse(result.contains(\"A\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);assertFalse(result.contains(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 1519,
          "column": 9
        },
        "assert": "assertEquals(true, result.contains(\"B\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);assertEquals(true, result.contains(\"B\"));"
      },
      {
        "testCodeLocation": {
          "line": 1520,
          "column": 9
        },
        "assert": "assertFalse(result.contains(\"C\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);assertFalse(result.contains(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 1521,
          "column": 9
        },
        "assert": "assertEquals(3, base.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(3, base.size());"
      },
      {
        "testCodeLocation": {
          "line": 1522,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"A\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(true, base.contains(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 1523,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"B\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(true, base.contains(\"B\"));"
      },
      {
        "testCodeLocation": {
          "line": 1524,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"C\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");assertEquals(true, base.contains(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 1525,
          "column": 9
        },
        "assert": "assertEquals(3, sub.size());",
        "slice": "final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(3, sub.size());"
      },
      {
        "testCodeLocation": {
          "line": 1526,
          "column": 9
        },
        "assert": "assertEquals(true, sub.contains(\"A\"));",
        "slice": "final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(true, sub.contains(\"A\"));"
      },
      {
        "testCodeLocation": {
          "line": 1527,
          "column": 9
        },
        "assert": "assertEquals(true, sub.contains(\"C\"));",
        "slice": "final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(true, sub.contains(\"C\"));"
      },
      {
        "testCodeLocation": {
          "line": 1528,
          "column": 9
        },
        "assert": "assertEquals(true, sub.contains(\"X\"));",
        "slice": "final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");assertEquals(true, sub.contains(\"X\"));"
      },
      {
        "testCodeLocation": {
          "line": 1530,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.removeAll(null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"A\");base.add(\"B\");base.add(\"C\");final List\u003cString\u003e sub \u003d new ArrayList\u003c\u003e();sub.add(\"A\");sub.add(\"C\");sub.add(\"X\");final Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, sub);try {\n    CollectionUtils.removeAll(null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection()",
    "annotation": "@Test",
    "code": "final Transformer\u003cObject, Object\u003e transformer \u003d TransformerUtils.nopTransformer();final Collection\u003cObject\u003e collection \u003d CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), transformer);assertTrue(\"returned object should be a TransformedCollection\", collection instanceof TransformedCollection);try {\n    CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), null);\n    fail(\"Expecting NullPointerException for null transformer.\");\n} catch (final NullPointerException ex) {\n    // expected\n}try {\n    CollectionUtils.transformingCollection(null, transformer);\n    fail(\"Expecting NullPointerException for null collection.\");\n} catch (final NullPointerException ex) {\n    // expected\n}",
    "offset": [
      {
        "line": 1540,
        "column": 57
      },
      {
        "line": 1541,
        "column": 47
      },
      {
        "line": 1541,
        "column": 86
      },
      {
        "line": 1542,
        "column": 9
      },
      {
        "line": 1544,
        "column": 13
      },
      {
        "line": 1544,
        "column": 52
      },
      {
        "line": 1545,
        "column": 13
      },
      {
        "line": 1550,
        "column": 13
      },
      {
        "line": 1551,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1540,
          "column": 9
        },
        "assert": "final Transformer\u003cObject, Object\u003e transformer \u003d TransformerUtils.nopTransformer();final Collection\u003cObject\u003e collection \u003d CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), transformer);assertTrue(\"returned object should be a TransformedCollection\", collection instanceof TransformedCollection);",
        "slice": "final Transformer\u003cObject, Object\u003e transformer \u003d TransformerUtils.nopTransformer();final Collection\u003cObject\u003e collection \u003d CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), transformer);assertTrue(\"returned object should be a TransformedCollection\", collection instanceof TransformedCollection);"
      },
      {
        "testCodeLocation": {
          "line": 1543,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), null);\n    fail(\"Expecting NullPointerException for null transformer.\");\n} catch (final NullPointerException ex) {\n    // expected\n}",
        "slice": "final Transformer\u003cObject, Object\u003e transformer \u003d TransformerUtils.nopTransformer();final Collection\u003cObject\u003e collection \u003d CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), transformer);try {\n    CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), null);\n    fail(\"Expecting NullPointerException for null transformer.\");\n} catch (final NullPointerException ex) {\n    // expected\n}"
      },
      {
        "testCodeLocation": {
          "line": 1549,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.transformingCollection(null, transformer);\n    fail(\"Expecting NullPointerException for null collection.\");\n} catch (final NullPointerException ex) {\n    // expected\n}",
        "slice": "final Transformer\u003cObject, Object\u003e transformer \u003d TransformerUtils.nopTransformer();final Collection\u003cObject\u003e collection \u003d CollectionUtils.transformingCollection(new ArrayList\u003c\u003e(), transformer);try {\n    CollectionUtils.transformingCollection(null, transformer);\n    fail(\"Expecting NullPointerException for null collection.\");\n} catch (final NullPointerException ex) {\n    // expected\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testTransformedCollection_2()",
    "annotation": "@Test",
    "code": "final List\u003cObject\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"2\");list.add(\"3\");final Collection\u003cObject\u003e result \u003d CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);// untransformed\nassertEquals(true, result.contains(\"1\"));// untransformed\nassertEquals(true, result.contains(\"2\"));// untransformed\nassertEquals(true, result.contains(\"3\"));",
    "offset": [
      {
        "line": 1559,
        "column": 35
      },
      {
        "line": 1560,
        "column": 9
      },
      {
        "line": 1561,
        "column": 9
      },
      {
        "line": 1562,
        "column": 9
      },
      {
        "line": 1563,
        "column": 43
      },
      {
        "line": 1564,
        "column": 9
      },
      {
        "line": 1564,
        "column": 28
      },
      {
        "line": 1565,
        "column": 9
      },
      {
        "line": 1565,
        "column": 28
      },
      {
        "line": 1566,
        "column": 9
      },
      {
        "line": 1566,
        "column": 28
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1559,
          "column": 9
        },
        "assert": "final List\u003cObject\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"2\");list.add(\"3\");final Collection\u003cObject\u003e result \u003d CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);// untransformed\nassertEquals(true, result.contains(\"1\"));",
        "slice": "final List\u003cObject\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"2\");list.add(\"3\");final Collection\u003cObject\u003e result \u003d CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);// untransformed\nassertEquals(true, result.contains(\"1\"));"
      },
      {
        "testCodeLocation": {
          "line": 1565,
          "column": 9
        },
        "assert": "// untransformed\nassertEquals(true, result.contains(\"2\"));",
        "slice": "final List\u003cObject\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"2\");list.add(\"3\");final Collection\u003cObject\u003e result \u003d CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);// untransformed\nassertEquals(true, result.contains(\"2\"));"
      },
      {
        "testCodeLocation": {
          "line": 1566,
          "column": 9
        },
        "assert": "// untransformed\nassertEquals(true, result.contains(\"3\"));",
        "slice": "final List\u003cObject\u003e list \u003d new ArrayList\u003c\u003e();list.add(\"1\");list.add(\"2\");list.add(\"3\");final Collection\u003cObject\u003e result \u003d CollectionUtils.transformingCollection(list, TRANSFORM_TO_INTEGER);// untransformed\nassertEquals(true, result.contains(\"3\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.emptyCollection()",
    "annotation": "@Test",
    "code": "final Collection\u003cNumber\u003e coll \u003d CollectionUtils.emptyCollection();assertEquals(CollectionUtils.EMPTY_COLLECTION, coll);",
    "offset": [
      {
        "line": 1597,
        "column": 41
      },
      {
        "line": 1598,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1597,
          "column": 9
        },
        "assert": "final Collection\u003cNumber\u003e coll \u003d CollectionUtils.emptyCollection();assertEquals(CollectionUtils.EMPTY_COLLECTION, coll);",
        "slice": "final Collection\u003cNumber\u003e coll \u003d CollectionUtils.emptyCollection();assertEquals(CollectionUtils.EMPTY_COLLECTION, coll);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.emptyIfNull()",
    "annotation": "@Test",
    "code": "assertTrue(CollectionUtils.emptyIfNull(null).isEmpty());final Collection\u003cObject\u003e collection \u003d new ArrayList\u003c\u003e();assertSame(collection, CollectionUtils.emptyIfNull(collection));",
    "offset": [
      {
        "line": 1603,
        "column": 9
      },
      {
        "line": 1603,
        "column": 20
      },
      {
        "line": 1603,
        "column": 20
      },
      {
        "line": 1604,
        "column": 47
      },
      {
        "line": 1605,
        "column": 9
      },
      {
        "line": 1605,
        "column": 32
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1603,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.emptyIfNull(null).isEmpty());",
        "slice": "assertTrue(CollectionUtils.emptyIfNull(null).isEmpty());"
      },
      {
        "testCodeLocation": {
          "line": 1604,
          "column": 9
        },
        "assert": "final Collection\u003cObject\u003e collection \u003d new ArrayList\u003c\u003e();assertSame(collection, CollectionUtils.emptyIfNull(collection));",
        "slice": "final Collection\u003cObject\u003e collection \u003d new ArrayList\u003c\u003e();assertSame(collection, CollectionUtils.emptyIfNull(collection));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.addAllForIterable()",
    "annotation": "@Test",
    "code": "final Collection\u003cInteger\u003e inputCollection \u003d createMock(Collection.class);final Iterable\u003cInteger\u003e inputIterable \u003d inputCollection;final Iterable\u003cLong\u003e iterable \u003d createMock(Iterable.class);final Iterator\u003cLong\u003e iterator \u003d createMock(Iterator.class);final Collection\u003cNumber\u003e c \u003d createMock(Collection.class);expect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);next(iterator, 2L);next(iterator, 3L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);// Check that the collection is added using\n// Collection.addAll(Collection)\nexpect(c.addAll(inputCollection)).andReturn(true);// Ensure the method returns false if nothing is added\nexpect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);replay();assertTrue(CollectionUtils.addAll(c, iterable));assertTrue(CollectionUtils.addAll(c, inputIterable));assertFalse(CollectionUtils.addAll(c, iterable));assertFalse(CollectionUtils.addAll(c, inputIterable));verify();",
    "offset": [
      {
        "line": 1616,
        "column": 53
      },
      {
        "line": 1618,
        "column": 41
      },
      {
        "line": 1619,
        "column": 41
      },
      {
        "line": 1620,
        "column": 38
      },
      {
        "line": 1622,
        "column": 9
      },
      {
        "line": 1622,
        "column": 9
      },
      {
        "line": 1622,
        "column": 16
      },
      {
        "line": 1623,
        "column": 9
      },
      {
        "line": 1624,
        "column": 9
      },
      {
        "line": 1625,
        "column": 9
      },
      {
        "line": 1626,
        "column": 9
      },
      {
        "line": 1626,
        "column": 9
      },
      {
        "line": 1626,
        "column": 16
      },
      {
        "line": 1627,
        "column": 9
      },
      {
        "line": 1627,
        "column": 9
      },
      {
        "line": 1627,
        "column": 16
      },
      {
        "line": 1628,
        "column": 9
      },
      {
        "line": 1628,
        "column": 9
      },
      {
        "line": 1628,
        "column": 16
      },
      {
        "line": 1629,
        "column": 9
      },
      {
        "line": 1629,
        "column": 9
      },
      {
        "line": 1629,
        "column": 16
      },
      {
        "line": 1632,
        "column": 9
      },
      {
        "line": 1632,
        "column": 9
      },
      {
        "line": 1632,
        "column": 16
      },
      {
        "line": 1635,
        "column": 9
      },
      {
        "line": 1635,
        "column": 9
      },
      {
        "line": 1635,
        "column": 16
      },
      {
        "line": 1636,
        "column": 9
      },
      {
        "line": 1637,
        "column": 9
      },
      {
        "line": 1637,
        "column": 9
      },
      {
        "line": 1637,
        "column": 16
      },
      {
        "line": 1638,
        "column": 9
      },
      {
        "line": 1638,
        "column": 9
      },
      {
        "line": 1638,
        "column": 16
      },
      {
        "line": 1639,
        "column": 9
      },
      {
        "line": 1639,
        "column": 9
      },
      {
        "line": 1639,
        "column": 16
      },
      {
        "line": 1641,
        "column": 9
      },
      {
        "line": 1642,
        "column": 9
      },
      {
        "line": 1642,
        "column": 20
      },
      {
        "line": 1643,
        "column": 9
      },
      {
        "line": 1643,
        "column": 20
      },
      {
        "line": 1645,
        "column": 9
      },
      {
        "line": 1645,
        "column": 21
      },
      {
        "line": 1646,
        "column": 9
      },
      {
        "line": 1646,
        "column": 21
      },
      {
        "line": 1647,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1616,
          "column": 9
        },
        "assert": "final Collection\u003cInteger\u003e inputCollection \u003d createMock(Collection.class);final Iterable\u003cInteger\u003e inputIterable \u003d inputCollection;final Iterable\u003cLong\u003e iterable \u003d createMock(Iterable.class);final Iterator\u003cLong\u003e iterator \u003d createMock(Iterator.class);final Collection\u003cNumber\u003e c \u003d createMock(Collection.class);expect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);next(iterator, 2L);next(iterator, 3L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);// Check that the collection is added using\n// Collection.addAll(Collection)\nexpect(c.addAll(inputCollection)).andReturn(true);// Ensure the method returns false if nothing is added\nexpect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);replay();assertTrue(CollectionUtils.addAll(c, iterable));",
        "slice": "final Collection\u003cInteger\u003e inputCollection \u003d createMock(Collection.class);final Iterable\u003cInteger\u003e inputIterable \u003d inputCollection;final Iterable\u003cLong\u003e iterable \u003d createMock(Iterable.class);final Iterator\u003cLong\u003e iterator \u003d createMock(Iterator.class);final Collection\u003cNumber\u003e c \u003d createMock(Collection.class);expect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);next(iterator, 2L);next(iterator, 3L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);// Check that the collection is added using\n// Collection.addAll(Collection)\nexpect(c.addAll(inputCollection)).andReturn(true);// Ensure the method returns false if nothing is added\nexpect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);replay();assertTrue(CollectionUtils.addAll(c, iterable));"
      },
      {
        "testCodeLocation": {
          "line": 1643,
          "column": 9
        },
        "assert": "assertTrue(CollectionUtils.addAll(c, inputIterable));",
        "slice": "final Collection\u003cInteger\u003e inputCollection \u003d createMock(Collection.class);final Iterable\u003cInteger\u003e inputIterable \u003d inputCollection;final Collection\u003cNumber\u003e c \u003d createMock(Collection.class);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);// Check that the collection is added using\n// Collection.addAll(Collection)\nexpect(c.addAll(inputCollection)).andReturn(true);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);assertTrue(CollectionUtils.addAll(c, inputIterable));"
      },
      {
        "testCodeLocation": {
          "line": 1645,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.addAll(c, iterable));",
        "slice": "final Collection\u003cInteger\u003e inputCollection \u003d createMock(Collection.class);final Iterable\u003cLong\u003e iterable \u003d createMock(Iterable.class);final Iterator\u003cLong\u003e iterator \u003d createMock(Iterator.class);final Collection\u003cNumber\u003e c \u003d createMock(Collection.class);expect(iterable.iterator()).andReturn(iterator);next(iterator, 1L);next(iterator, 2L);next(iterator, 3L);expect(iterator.hasNext()).andReturn(false);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);// Check that the collection is added using\n// Collection.addAll(Collection)\nexpect(c.addAll(inputCollection)).andReturn(true);// Ensure the method returns false if nothing is added\nexpect(iterable.iterator()).andReturn(iterator);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);assertFalse(CollectionUtils.addAll(c, iterable));"
      },
      {
        "testCodeLocation": {
          "line": 1646,
          "column": 9
        },
        "assert": "assertFalse(CollectionUtils.addAll(c, inputIterable));",
        "slice": "final Collection\u003cInteger\u003e inputCollection \u003d createMock(Collection.class);final Iterable\u003cInteger\u003e inputIterable \u003d inputCollection;final Collection\u003cNumber\u003e c \u003d createMock(Collection.class);expect(c.add(1L)).andReturn(true);expect(c.add(2L)).andReturn(true);expect(c.add(3L)).andReturn(true);// Check that the collection is added using\n// Collection.addAll(Collection)\nexpect(c.addAll(inputCollection)).andReturn(true);expect(c.add(1L)).andReturn(false);expect(c.addAll(inputCollection)).andReturn(false);assertFalse(CollectionUtils.addAll(c, inputIterable));"
      },
      {
        "testCodeLocation": {
          "line": 1647,
          "column": 9
        },
        "assert": "verify();",
        "slice": "verify();"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.addAllForEnumeration()",
    "annotation": "@Test",
    "code": "final Hashtable\u003cInteger, Integer\u003e h \u003d new Hashtable\u003c\u003e();h.put(5, 5);final Enumeration\u003c? extends Integer\u003e enumeration \u003d h.keys();CollectionUtils.addAll(collectionA, enumeration);assertTrue(collectionA.contains(5));",
    "offset": [
      {
        "line": 1652,
        "column": 47
      },
      {
        "line": 1653,
        "column": 9
      },
      {
        "line": 1654,
        "column": 60
      },
      {
        "line": 1655,
        "column": 9
      },
      {
        "line": 1656,
        "column": 9
      },
      {
        "line": 1656,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1652,
          "column": 9
        },
        "assert": "final Hashtable\u003cInteger, Integer\u003e h \u003d new Hashtable\u003c\u003e();h.put(5, 5);final Enumeration\u003c? extends Integer\u003e enumeration \u003d h.keys();CollectionUtils.addAll(collectionA, enumeration);assertTrue(collectionA.contains(5));",
        "slice": "final Hashtable\u003cInteger, Integer\u003e h \u003d new Hashtable\u003c\u003e();h.put(5, 5);final Enumeration\u003c? extends Integer\u003e enumeration \u003d h.keys();CollectionUtils.addAll(collectionA, enumeration);assertTrue(collectionA.contains(5));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.addAllForElements()",
    "annotation": "@Test",
    "code": "CollectionUtils.addAll(collectionA, new Integer[] { 5 });assertTrue(collectionA.contains(5));",
    "offset": [
      {
        "line": 1661,
        "column": 9
      },
      {
        "line": 1662,
        "column": 9
      },
      {
        "line": 1662,
        "column": 20
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1661,
          "column": 9
        },
        "assert": "CollectionUtils.addAll(collectionA, new Integer[] { 5 });assertTrue(collectionA.contains(5));",
        "slice": "CollectionUtils.addAll(collectionA, new Integer[] { 5 });assertTrue(collectionA.contains(5));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getNegative()",
    "annotation": "@Test(expected \u003d IndexOutOfBoundsException.class)",
    "code": "CollectionUtils.get((Object) collectionA, -3);",
    "offset": [
      {
        "line": 1667,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1667,
          "column": 9
        },
        "assert": "CollectionUtils.get((Object) collectionA, -3);",
        "slice": "CollectionUtils.get((Object) collectionA, -3);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getPositiveOutOfBounds()",
    "annotation": "@Test(expected \u003d IndexOutOfBoundsException.class)",
    "code": "CollectionUtils.get((Object) collectionA.iterator(), 30);",
    "offset": [
      {
        "line": 1672,
        "column": 9
      },
      {
        "line": 1672,
        "column": 37
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1672,
          "column": 9
        },
        "assert": "CollectionUtils.get((Object) collectionA.iterator(), 30);",
        "slice": "CollectionUtils.get((Object) collectionA.iterator(), 30);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.get1()",
    "annotation": "@Test(expected \u003d IllegalArgumentException.class)",
    "code": "CollectionUtils.get((Object) null, 0);",
    "offset": [
      {
        "line": 1677,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1677,
          "column": 9
        },
        "assert": "CollectionUtils.get((Object) null, 0);",
        "slice": "CollectionUtils.get((Object) null, 0);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.get()",
    "annotation": "@Test",
    "code": "assertEquals(2, CollectionUtils.get((Object) collectionA, 2));assertEquals(2, CollectionUtils.get((Object) collectionA.iterator(), 2));final Map\u003cInteger, Integer\u003e map \u003d CollectionUtils.getCardinalityMap(collectionA);assertEquals(map.entrySet().iterator().next(), CollectionUtils.get((Object) map, 0));",
    "offset": [
      {
        "line": 1682,
        "column": 9
      },
      {
        "line": 1682,
        "column": 25
      },
      {
        "line": 1683,
        "column": 9
      },
      {
        "line": 1683,
        "column": 25
      },
      {
        "line": 1683,
        "column": 53
      },
      {
        "line": 1684,
        "column": 43
      },
      {
        "line": 1685,
        "column": 9
      },
      {
        "line": 1685,
        "column": 22
      },
      {
        "line": 1685,
        "column": 22
      },
      {
        "line": 1685,
        "column": 22
      },
      {
        "line": 1685,
        "column": 56
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1682,
          "column": 9
        },
        "assert": "assertEquals(2, CollectionUtils.get((Object) collectionA, 2));",
        "slice": "assertEquals(2, CollectionUtils.get((Object) collectionA, 2));"
      },
      {
        "testCodeLocation": {
          "line": 1683,
          "column": 9
        },
        "assert": "assertEquals(2, CollectionUtils.get((Object) collectionA.iterator(), 2));",
        "slice": "assertEquals(2, CollectionUtils.get((Object) collectionA.iterator(), 2));"
      },
      {
        "testCodeLocation": {
          "line": 1684,
          "column": 9
        },
        "assert": "final Map\u003cInteger, Integer\u003e map \u003d CollectionUtils.getCardinalityMap(collectionA);assertEquals(map.entrySet().iterator().next(), CollectionUtils.get((Object) map, 0));",
        "slice": "final Map\u003cInteger, Integer\u003e map \u003d CollectionUtils.getCardinalityMap(collectionA);assertEquals(map.entrySet().iterator().next(), CollectionUtils.get((Object) map, 0));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getIterator()",
    "annotation": "@Test",
    "code": "final Iterator\u003cInteger\u003e it \u003d collectionA.iterator();assertEquals(Integer.valueOf(2), CollectionUtils.get((Object) it, 2));assertTrue(it.hasNext());assertEquals(Integer.valueOf(4), CollectionUtils.get((Object) it, 6));assertFalse(it.hasNext());",
    "offset": [
      {
        "line": 1690,
        "column": 38
      },
      {
        "line": 1691,
        "column": 9
      },
      {
        "line": 1691,
        "column": 22
      },
      {
        "line": 1691,
        "column": 42
      },
      {
        "line": 1692,
        "column": 9
      },
      {
        "line": 1692,
        "column": 20
      },
      {
        "line": 1693,
        "column": 9
      },
      {
        "line": 1693,
        "column": 22
      },
      {
        "line": 1693,
        "column": 42
      },
      {
        "line": 1694,
        "column": 9
      },
      {
        "line": 1694,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1690,
          "column": 9
        },
        "assert": "final Iterator\u003cInteger\u003e it \u003d collectionA.iterator();assertEquals(Integer.valueOf(2), CollectionUtils.get((Object) it, 2));",
        "slice": "final Iterator\u003cInteger\u003e it \u003d collectionA.iterator();assertEquals(Integer.valueOf(2), CollectionUtils.get((Object) it, 2));"
      },
      {
        "testCodeLocation": {
          "line": 1692,
          "column": 9
        },
        "assert": "assertTrue(it.hasNext());",
        "slice": "final Iterator\u003cInteger\u003e it \u003d collectionA.iterator();assertTrue(it.hasNext());"
      },
      {
        "testCodeLocation": {
          "line": 1693,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(4), CollectionUtils.get((Object) it, 6));",
        "slice": "final Iterator\u003cInteger\u003e it \u003d collectionA.iterator();assertEquals(Integer.valueOf(4), CollectionUtils.get((Object) it, 6));"
      },
      {
        "testCodeLocation": {
          "line": 1694,
          "column": 9
        },
        "assert": "assertFalse(it.hasNext());",
        "slice": "final Iterator\u003cInteger\u003e it \u003d collectionA.iterator();assertFalse(it.hasNext());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.getEnumeration()",
    "annotation": "@Test",
    "code": "final Vector\u003cInteger\u003e vectorA \u003d new Vector\u003c\u003e(collectionA);final Enumeration\u003cInteger\u003e e \u003d vectorA.elements();assertEquals(Integer.valueOf(2), CollectionUtils.get(e, 2));assertTrue(e.hasMoreElements());assertEquals(Integer.valueOf(4), CollectionUtils.get(e, 6));assertFalse(e.hasMoreElements());",
    "offset": [
      {
        "line": 1699,
        "column": 41
      },
      {
        "line": 1700,
        "column": 40
      },
      {
        "line": 1701,
        "column": 9
      },
      {
        "line": 1701,
        "column": 22
      },
      {
        "line": 1701,
        "column": 42
      },
      {
        "line": 1702,
        "column": 9
      },
      {
        "line": 1702,
        "column": 20
      },
      {
        "line": 1703,
        "column": 9
      },
      {
        "line": 1703,
        "column": 22
      },
      {
        "line": 1703,
        "column": 42
      },
      {
        "line": 1704,
        "column": 9
      },
      {
        "line": 1704,
        "column": 21
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1699,
          "column": 9
        },
        "assert": "final Vector\u003cInteger\u003e vectorA \u003d new Vector\u003c\u003e(collectionA);final Enumeration\u003cInteger\u003e e \u003d vectorA.elements();assertEquals(Integer.valueOf(2), CollectionUtils.get(e, 2));",
        "slice": "final Vector\u003cInteger\u003e vectorA \u003d new Vector\u003c\u003e(collectionA);final Enumeration\u003cInteger\u003e e \u003d vectorA.elements();assertEquals(Integer.valueOf(2), CollectionUtils.get(e, 2));"
      },
      {
        "testCodeLocation": {
          "line": 1702,
          "column": 9
        },
        "assert": "assertTrue(e.hasMoreElements());",
        "slice": "final Vector\u003cInteger\u003e vectorA \u003d new Vector\u003c\u003e(collectionA);final Enumeration\u003cInteger\u003e e \u003d vectorA.elements();assertTrue(e.hasMoreElements());"
      },
      {
        "testCodeLocation": {
          "line": 1703,
          "column": 9
        },
        "assert": "assertEquals(Integer.valueOf(4), CollectionUtils.get(e, 6));",
        "slice": "final Vector\u003cInteger\u003e vectorA \u003d new Vector\u003c\u003e(collectionA);final Enumeration\u003cInteger\u003e e \u003d vectorA.elements();assertEquals(Integer.valueOf(4), CollectionUtils.get(e, 6));"
      },
      {
        "testCodeLocation": {
          "line": 1704,
          "column": 9
        },
        "assert": "assertFalse(e.hasMoreElements());",
        "slice": "final Vector\u003cInteger\u003e vectorA \u003d new Vector\u003c\u003e(collectionA);final Enumeration\u003cInteger\u003e e \u003d vectorA.elements();assertFalse(e.hasMoreElements());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.reverse()",
    "annotation": "@Test",
    "code": "CollectionUtils.reverseArray(new Object[] {});final Integer[] a \u003d collectionA.toArray(new Integer[collectionA.size()]);CollectionUtils.reverseArray(a);// assume our implementation is correct if it returns the same order as the Java function\nCollections.reverse(collectionA);assertEquals(collectionA, Arrays.asList(a));",
    "offset": [
      {
        "line": 1709,
        "column": 9
      },
      {
        "line": 1710,
        "column": 29
      },
      {
        "line": 1710,
        "column": 61
      },
      {
        "line": 1711,
        "column": 9
      },
      {
        "line": 1713,
        "column": 9
      },
      {
        "line": 1714,
        "column": 9
      },
      {
        "line": 1714,
        "column": 35
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1709,
          "column": 9
        },
        "assert": "CollectionUtils.reverseArray(new Object[] {});final Integer[] a \u003d collectionA.toArray(new Integer[collectionA.size()]);CollectionUtils.reverseArray(a);// assume our implementation is correct if it returns the same order as the Java function\nCollections.reverse(collectionA);assertEquals(collectionA, Arrays.asList(a));",
        "slice": "CollectionUtils.reverseArray(new Object[] {});final Integer[] a \u003d collectionA.toArray(new Integer[collectionA.size()]);CollectionUtils.reverseArray(a);// assume our implementation is correct if it returns the same order as the Java function\nCollections.reverse(collectionA);assertEquals(collectionA, Arrays.asList(a));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.extractSingleton()",
    "annotation": "@Test",
    "code": "ArrayList\u003cString\u003e coll \u003d null;try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected NullPointerException from extractSingleton(null)\");\n} catch (final NullPointerException e) {\n}coll \u003d new ArrayList\u003c\u003e();try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected IllegalArgumentException from extractSingleton(empty)\");\n} catch (final IllegalArgumentException e) {\n}coll.add(\"foo\");assertEquals(\"foo\", CollectionUtils.extractSingleton(coll));coll.add(\"bar\");try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected IllegalArgumentException from extractSingleton(size \u003d\u003d 2)\");\n} catch (final IllegalArgumentException e) {\n}",
    "offset": [
      {
        "line": 1721,
        "column": 13
      },
      {
        "line": 1722,
        "column": 13
      },
      {
        "line": 1725,
        "column": 16
      },
      {
        "line": 1727,
        "column": 13
      },
      {
        "line": 1728,
        "column": 13
      },
      {
        "line": 1731,
        "column": 9
      },
      {
        "line": 1732,
        "column": 9
      },
      {
        "line": 1732,
        "column": 29
      },
      {
        "line": 1733,
        "column": 9
      },
      {
        "line": 1735,
        "column": 13
      },
      {
        "line": 1736,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1731,
          "column": 9
        },
        "assert": "coll.add(\"foo\");assertEquals(\"foo\", CollectionUtils.extractSingleton(coll));",
        "slice": "ArrayList\u003cString\u003e coll \u003d null;coll \u003d new ArrayList\u003c\u003e();coll.add(\"foo\");assertEquals(\"foo\", CollectionUtils.extractSingleton(coll));"
      },
      {
        "testCodeLocation": {
          "line": 1733,
          "column": 9
        },
        "assert": "coll.add(\"bar\");try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected IllegalArgumentException from extractSingleton(size \u003d\u003d 2)\");\n} catch (final IllegalArgumentException e) {\n}",
        "slice": "ArrayList\u003cString\u003e coll \u003d null;coll \u003d new ArrayList\u003c\u003e();coll.add(\"foo\");coll.add(\"bar\");try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected IllegalArgumentException from extractSingleton(size \u003d\u003d 2)\");\n} catch (final IllegalArgumentException e) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 1719,
          "column": 9
        },
        "assert": "ArrayList\u003cString\u003e coll \u003d null;try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected NullPointerException from extractSingleton(null)\");\n} catch (final NullPointerException e) {\n}",
        "slice": "ArrayList\u003cString\u003e coll \u003d null;try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected NullPointerException from extractSingleton(null)\");\n} catch (final NullPointerException e) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 1725,
          "column": 9
        },
        "assert": "coll \u003d new ArrayList\u003c\u003e();try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected IllegalArgumentException from extractSingleton(empty)\");\n} catch (final IllegalArgumentException e) {\n}",
        "slice": "ArrayList\u003cString\u003e coll \u003d null;coll \u003d new ArrayList\u003c\u003e();try {\n    CollectionUtils.extractSingleton(coll);\n    fail(\"expected IllegalArgumentException from extractSingleton(empty)\");\n} catch (final IllegalArgumentException e) {\n}"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.collateException1()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "CollectionUtils.collate(collectionA, null);",
    "offset": [
      {
        "line": 1751,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1751,
          "column": 9
        },
        "assert": "CollectionUtils.collate(collectionA, null);",
        "slice": "CollectionUtils.collate(collectionA, null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.collateException2()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "CollectionUtils.collate(collectionA, collectionC, null);",
    "offset": [
      {
        "line": 1756,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1756,
          "column": 9
        },
        "assert": "CollectionUtils.collate(collectionA, collectionC, null);",
        "slice": "CollectionUtils.collate(collectionA, collectionC, null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testCollate()",
    "annotation": "@Test",
    "code": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);assertEquals(\"Merge empty with empty\", 0, result.size());result \u003d CollectionUtils.collate(collectionA, emptyCollection);assertEquals(\"Merge empty with non-empty\", collectionA, result);List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);assertEquals(\"Merge two lists 1\", result1, result2);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e();combinedList.addAll(collectionD);combinedList.addAll(collectionE);Collections.sort(combinedList);assertEquals(\"Merge two lists 2\", combinedList, result2);final Comparator\u003cInteger\u003e reverseComparator \u003d ComparatorUtils.reversedComparator(ComparatorUtils.\u003cInteger\u003enaturalComparator());result \u003d CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);assertEquals(\"Comparator Merge empty with empty\", 0, result.size());Collections.reverse((List\u003cInteger\u003e) collectionD);Collections.reverse((List\u003cInteger\u003e) collectionE);Collections.reverse(combinedList);result1 \u003d CollectionUtils.collate(collectionD, collectionE, reverseComparator);result2 \u003d CollectionUtils.collate(collectionE, collectionD, reverseComparator);assertEquals(\"Comparator Merge two lists 1\", result1, result2);assertEquals(\"Comparator Merge two lists 2\", combinedList, result2);",
    "offset": [
      {
        "line": 1761,
        "column": 32
      },
      {
        "line": 1762,
        "column": 9
      },
      {
        "line": 1762,
        "column": 51
      },
      {
        "line": 1764,
        "column": 18
      },
      {
        "line": 1765,
        "column": 9
      },
      {
        "line": 1767,
        "column": 33
      },
      {
        "line": 1768,
        "column": 33
      },
      {
        "line": 1769,
        "column": 9
      },
      {
        "line": 1771,
        "column": 44
      },
      {
        "line": 1772,
        "column": 9
      },
      {
        "line": 1773,
        "column": 9
      },
      {
        "line": 1774,
        "column": 9
      },
      {
        "line": 1776,
        "column": 9
      },
      {
        "line": 1779,
        "column": 17
      },
      {
        "line": 1779,
        "column": 52
      },
      {
        "line": 1781,
        "column": 18
      },
      {
        "line": 1782,
        "column": 9
      },
      {
        "line": 1782,
        "column": 62
      },
      {
        "line": 1784,
        "column": 9
      },
      {
        "line": 1785,
        "column": 9
      },
      {
        "line": 1786,
        "column": 9
      },
      {
        "line": 1788,
        "column": 19
      },
      {
        "line": 1789,
        "column": 19
      },
      {
        "line": 1790,
        "column": 9
      },
      {
        "line": 1791,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1761,
          "column": 9
        },
        "assert": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);assertEquals(\"Merge empty with empty\", 0, result.size());",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);assertEquals(\"Merge empty with empty\", 0, result.size());"
      },
      {
        "testCodeLocation": {
          "line": 1778,
          "column": 9
        },
        "assert": "final Comparator\u003cInteger\u003e reverseComparator \u003d ComparatorUtils.reversedComparator(ComparatorUtils.\u003cInteger\u003enaturalComparator());result \u003d CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);assertEquals(\"Comparator Merge empty with empty\", 0, result.size());",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);result \u003d CollectionUtils.collate(collectionA, emptyCollection);List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);final Comparator\u003cInteger\u003e reverseComparator \u003d ComparatorUtils.reversedComparator(ComparatorUtils.\u003cInteger\u003enaturalComparator());result \u003d CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);assertEquals(\"Comparator Merge empty with empty\", 0, result.size());"
      },
      {
        "testCodeLocation": {
          "line": 1764,
          "column": 9
        },
        "assert": "result \u003d CollectionUtils.collate(collectionA, emptyCollection);assertEquals(\"Merge empty with non-empty\", collectionA, result);",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);result \u003d CollectionUtils.collate(collectionA, emptyCollection);assertEquals(\"Merge empty with non-empty\", collectionA, result);"
      },
      {
        "testCodeLocation": {
          "line": 1767,
          "column": 9
        },
        "assert": "List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);assertEquals(\"Merge two lists 1\", result1, result2);",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);result \u003d CollectionUtils.collate(collectionA, emptyCollection);List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);assertEquals(\"Merge two lists 1\", result1, result2);"
      },
      {
        "testCodeLocation": {
          "line": 1784,
          "column": 9
        },
        "assert": "Collections.reverse((List\u003cInteger\u003e) collectionD);Collections.reverse((List\u003cInteger\u003e) collectionE);Collections.reverse(combinedList);result1 \u003d CollectionUtils.collate(collectionD, collectionE, reverseComparator);result2 \u003d CollectionUtils.collate(collectionE, collectionD, reverseComparator);assertEquals(\"Comparator Merge two lists 1\", result1, result2);",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);result \u003d CollectionUtils.collate(collectionA, emptyCollection);List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e();combinedList.addAll(collectionD);combinedList.addAll(collectionE);Collections.sort(combinedList);final Comparator\u003cInteger\u003e reverseComparator \u003d ComparatorUtils.reversedComparator(ComparatorUtils.\u003cInteger\u003enaturalComparator());result \u003d CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);Collections.reverse((List\u003cInteger\u003e) collectionD);Collections.reverse((List\u003cInteger\u003e) collectionE);Collections.reverse(combinedList);result1 \u003d CollectionUtils.collate(collectionD, collectionE, reverseComparator);result2 \u003d CollectionUtils.collate(collectionE, collectionD, reverseComparator);assertEquals(\"Comparator Merge two lists 1\", result1, result2);"
      },
      {
        "testCodeLocation": {
          "line": 1771,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e();combinedList.addAll(collectionD);combinedList.addAll(collectionE);Collections.sort(combinedList);assertEquals(\"Merge two lists 2\", combinedList, result2);",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);result \u003d CollectionUtils.collate(collectionA, emptyCollection);List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e();combinedList.addAll(collectionD);combinedList.addAll(collectionE);Collections.sort(combinedList);assertEquals(\"Merge two lists 2\", combinedList, result2);"
      },
      {
        "testCodeLocation": {
          "line": 1791,
          "column": 9
        },
        "assert": "assertEquals(\"Comparator Merge two lists 2\", combinedList, result2);",
        "slice": "List\u003cInteger\u003e result \u003d CollectionUtils.collate(emptyCollection, emptyCollection);result \u003d CollectionUtils.collate(collectionA, emptyCollection);List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE);List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e();combinedList.addAll(collectionD);combinedList.addAll(collectionE);final Comparator\u003cInteger\u003e reverseComparator \u003d ComparatorUtils.reversedComparator(ComparatorUtils.\u003cInteger\u003enaturalComparator());result \u003d CollectionUtils.collate(emptyCollection, emptyCollection, reverseComparator);result1 \u003d CollectionUtils.collate(collectionD, collectionE, reverseComparator);result2 \u003d CollectionUtils.collate(collectionE, collectionD, reverseComparator);assertEquals(\"Comparator Merge two lists 2\", combinedList, result2);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testCollateIgnoreDuplicates()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE, false);final List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD, false);assertEquals(\"Merge two lists 1 - ignore duplicates\", result1, result2);final Set\u003cInteger\u003e combinedSet \u003d new HashSet\u003c\u003e();combinedSet.addAll(collectionD);combinedSet.addAll(collectionE);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e(combinedSet);Collections.sort(combinedList);assertEquals(\"Merge two lists 2 - ignore duplicates\", combinedList, result2);",
    "offset": [
      {
        "line": 1796,
        "column": 39
      },
      {
        "line": 1797,
        "column": 39
      },
      {
        "line": 1798,
        "column": 9
      },
      {
        "line": 1800,
        "column": 42
      },
      {
        "line": 1801,
        "column": 9
      },
      {
        "line": 1802,
        "column": 9
      },
      {
        "line": 1803,
        "column": 44
      },
      {
        "line": 1804,
        "column": 9
      },
      {
        "line": 1806,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1796,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE, false);final List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD, false);assertEquals(\"Merge two lists 1 - ignore duplicates\", result1, result2);",
        "slice": "final List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE, false);final List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD, false);assertEquals(\"Merge two lists 1 - ignore duplicates\", result1, result2);"
      },
      {
        "testCodeLocation": {
          "line": 1800,
          "column": 9
        },
        "assert": "final Set\u003cInteger\u003e combinedSet \u003d new HashSet\u003c\u003e();combinedSet.addAll(collectionD);combinedSet.addAll(collectionE);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e(combinedSet);Collections.sort(combinedList);assertEquals(\"Merge two lists 2 - ignore duplicates\", combinedList, result2);",
        "slice": "final List\u003cInteger\u003e result1 \u003d CollectionUtils.collate(collectionD, collectionE, false);final List\u003cInteger\u003e result2 \u003d CollectionUtils.collate(collectionE, collectionD, false);final Set\u003cInteger\u003e combinedSet \u003d new HashSet\u003c\u003e();combinedSet.addAll(collectionD);combinedSet.addAll(collectionE);final List\u003cInteger\u003e combinedList \u003d new ArrayList\u003c\u003e(combinedSet);Collections.sort(combinedList);assertEquals(\"Merge two lists 2 - ignore duplicates\", combinedList, result2);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testPermutationsWithNullCollection()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "CollectionUtils.permutations(null);",
    "offset": [
      {
        "line": 1811,
        "column": 9
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1811,
          "column": 9
        },
        "assert": "CollectionUtils.permutations(null);",
        "slice": "CollectionUtils.permutations(null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testPermutations()",
    "annotation": "@Test",
    "code": "final List\u003cInteger\u003e sample \u003d collectionA.subList(0, 5);final Collection\u003cList\u003cInteger\u003e\u003e permutations \u003d CollectionUtils.permutations(sample);// result size \u003d n!\nfinal int collSize \u003d sample.size();int factorial \u003d 1;for (int i \u003d 1; i \u003c\u003d collSize; i++) {\n    factorial *\u003d i;\n}assertEquals(factorial, permutations.size());",
    "offset": [
      {
        "line": 1816,
        "column": 38
      },
      {
        "line": 1817,
        "column": 56
      },
      {
        "line": 1820,
        "column": 30
      },
      {
        "line": 1825,
        "column": 9
      },
      {
        "line": 1825,
        "column": 33
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1816,
          "column": 9
        },
        "assert": "final List\u003cInteger\u003e sample \u003d collectionA.subList(0, 5);final Collection\u003cList\u003cInteger\u003e\u003e permutations \u003d CollectionUtils.permutations(sample);// result size \u003d n!\nfinal int collSize \u003d sample.size();int factorial \u003d 1;for (int i \u003d 1; i \u003c\u003d collSize; i++) {\n    factorial *\u003d i;\n}assertEquals(factorial, permutations.size());",
        "slice": "final List\u003cInteger\u003e sample \u003d collectionA.subList(0, 5);final Collection\u003cList\u003cInteger\u003e\u003e permutations \u003d CollectionUtils.permutations(sample);// result size \u003d n!\nfinal int collSize \u003d sample.size();int factorial \u003d 1;for (int i \u003d 1; i \u003c\u003d collSize; i++) {\n    factorial *\u003d i;\n}assertEquals(factorial, permutations.size());"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testRemoveAllWithEquator()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertEquals(2, result.size());assertTrue(result.contains(\"AC\"));assertTrue(result.contains(\"BB\"));assertFalse(result.contains(\"CA\"));assertEquals(3, base.size());assertEquals(true, base.contains(\"AC\"));assertEquals(true, base.contains(\"BB\"));assertEquals(true, base.contains(\"CA\"));assertEquals(3, remove.size());assertEquals(true, remove.contains(\"AA\"));assertEquals(true, remove.contains(\"CX\"));assertEquals(true, remove.contains(\"XZ\"));try {\n    CollectionUtils.removeAll(null, null, DefaultEquator.defaultEquator());\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}// this is what we want\ntry {\n    CollectionUtils.removeAll(base, remove, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
    "offset": [
      {
        "line": 1856,
        "column": 35
      },
      {
        "line": 1857,
        "column": 9
      },
      {
        "line": 1858,
        "column": 9
      },
      {
        "line": 1859,
        "column": 9
      },
      {
        "line": 1861,
        "column": 37
      },
      {
        "line": 1862,
        "column": 9
      },
      {
        "line": 1863,
        "column": 9
      },
      {
        "line": 1864,
        "column": 9
      },
      {
        "line": 1867,
        "column": 43
      },
      {
        "line": 1867,
        "column": 83
      },
      {
        "line": 1871,
        "column": 24
      },
      {
        "line": 1871,
        "column": 40
      },
      {
        "line": 1876,
        "column": 24
      },
      {
        "line": 1880,
        "column": 9
      },
      {
        "line": 1880,
        "column": 25
      },
      {
        "line": 1881,
        "column": 9
      },
      {
        "line": 1881,
        "column": 20
      },
      {
        "line": 1882,
        "column": 9
      },
      {
        "line": 1882,
        "column": 20
      },
      {
        "line": 1883,
        "column": 9
      },
      {
        "line": 1883,
        "column": 21
      },
      {
        "line": 1884,
        "column": 9
      },
      {
        "line": 1884,
        "column": 25
      },
      {
        "line": 1885,
        "column": 9
      },
      {
        "line": 1885,
        "column": 28
      },
      {
        "line": 1886,
        "column": 9
      },
      {
        "line": 1886,
        "column": 28
      },
      {
        "line": 1887,
        "column": 9
      },
      {
        "line": 1887,
        "column": 28
      },
      {
        "line": 1888,
        "column": 9
      },
      {
        "line": 1888,
        "column": 25
      },
      {
        "line": 1889,
        "column": 9
      },
      {
        "line": 1889,
        "column": 28
      },
      {
        "line": 1890,
        "column": 9
      },
      {
        "line": 1890,
        "column": 28
      },
      {
        "line": 1891,
        "column": 9
      },
      {
        "line": 1891,
        "column": 28
      },
      {
        "line": 1894,
        "column": 13
      },
      {
        "line": 1894,
        "column": 51
      },
      {
        "line": 1895,
        "column": 13
      },
      {
        "line": 1900,
        "column": 13
      },
      {
        "line": 1901,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1856,
          "column": 9
        },
        "assert": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertEquals(2, result.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertEquals(2, result.size());"
      },
      {
        "testCodeLocation": {
          "line": 1888,
          "column": 9
        },
        "assert": "assertEquals(3, remove.size());",
        "slice": "final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");assertEquals(3, remove.size());"
      },
      {
        "testCodeLocation": {
          "line": 1889,
          "column": 9
        },
        "assert": "assertEquals(true, remove.contains(\"AA\"));",
        "slice": "final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");assertEquals(true, remove.contains(\"AA\"));"
      },
      {
        "testCodeLocation": {
          "line": 1890,
          "column": 9
        },
        "assert": "assertEquals(true, remove.contains(\"CX\"));",
        "slice": "final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");assertEquals(true, remove.contains(\"CX\"));"
      },
      {
        "testCodeLocation": {
          "line": 1891,
          "column": 9
        },
        "assert": "assertEquals(true, remove.contains(\"XZ\"));",
        "slice": "final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");assertEquals(true, remove.contains(\"XZ\"));"
      },
      {
        "testCodeLocation": {
          "line": 1893,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.removeAll(null, null, DefaultEquator.defaultEquator());\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});try {\n    CollectionUtils.removeAll(null, null, DefaultEquator.defaultEquator());\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 1899,
          "column": 9
        },
        "assert": "// this is what we want\ntry {\n    CollectionUtils.removeAll(base, remove, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});// this is what we want\ntry {\n    CollectionUtils.removeAll(base, remove, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 1881,
          "column": 9
        },
        "assert": "assertTrue(result.contains(\"AC\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertTrue(result.contains(\"AC\"));"
      },
      {
        "testCodeLocation": {
          "line": 1882,
          "column": 9
        },
        "assert": "assertTrue(result.contains(\"BB\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertTrue(result.contains(\"BB\"));"
      },
      {
        "testCodeLocation": {
          "line": 1883,
          "column": 9
        },
        "assert": "assertFalse(result.contains(\"CA\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e remove \u003d new ArrayList\u003c\u003e();remove.add(\"AA\");remove.add(\"CX\");remove.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.removeAll(base, remove, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertFalse(result.contains(\"CA\"));"
      },
      {
        "testCodeLocation": {
          "line": 1884,
          "column": 9
        },
        "assert": "assertEquals(3, base.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertEquals(3, base.size());"
      },
      {
        "testCodeLocation": {
          "line": 1885,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"AC\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertEquals(true, base.contains(\"AC\"));"
      },
      {
        "testCodeLocation": {
          "line": 1886,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"BB\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertEquals(true, base.contains(\"BB\"));"
      },
      {
        "testCodeLocation": {
          "line": 1887,
          "column": 9
        },
        "assert": "assertEquals(true, base.contains(\"CA\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertEquals(true, base.contains(\"CA\"));"
      }
    ]
  },
  {
    "unitTestMethod": "org.apache.commons.collections4.CollectionUtilsTest.testRetainAllWithEquator()",
    "annotation": "@Test",
    "code": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertEquals(1, result.size());assertTrue(result.contains(\"CA\"));assertFalse(result.contains(\"BB\"));assertFalse(result.contains(\"AC\"));assertEquals(3, base.size());assertTrue(base.contains(\"AC\"));assertTrue(base.contains(\"BB\"));assertTrue(base.contains(\"CA\"));assertEquals(3, retain.size());assertTrue(retain.contains(\"AA\"));assertTrue(retain.contains(\"CX\"));assertTrue(retain.contains(\"XZ\"));try {\n    CollectionUtils.retainAll(null, null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}// this is what we want\ntry {\n    CollectionUtils.retainAll(base, retain, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
    "offset": [
      {
        "line": 1908,
        "column": 35
      },
      {
        "line": 1909,
        "column": 9
      },
      {
        "line": 1910,
        "column": 9
      },
      {
        "line": 1911,
        "column": 9
      },
      {
        "line": 1913,
        "column": 37
      },
      {
        "line": 1914,
        "column": 9
      },
      {
        "line": 1915,
        "column": 9
      },
      {
        "line": 1916,
        "column": 9
      },
      {
        "line": 1919,
        "column": 43
      },
      {
        "line": 1919,
        "column": 83
      },
      {
        "line": 1923,
        "column": 24
      },
      {
        "line": 1923,
        "column": 40
      },
      {
        "line": 1928,
        "column": 24
      },
      {
        "line": 1931,
        "column": 9
      },
      {
        "line": 1931,
        "column": 25
      },
      {
        "line": 1932,
        "column": 9
      },
      {
        "line": 1932,
        "column": 20
      },
      {
        "line": 1933,
        "column": 9
      },
      {
        "line": 1933,
        "column": 21
      },
      {
        "line": 1934,
        "column": 9
      },
      {
        "line": 1934,
        "column": 21
      },
      {
        "line": 1936,
        "column": 9
      },
      {
        "line": 1936,
        "column": 25
      },
      {
        "line": 1937,
        "column": 9
      },
      {
        "line": 1937,
        "column": 20
      },
      {
        "line": 1938,
        "column": 9
      },
      {
        "line": 1938,
        "column": 20
      },
      {
        "line": 1939,
        "column": 9
      },
      {
        "line": 1939,
        "column": 20
      },
      {
        "line": 1941,
        "column": 9
      },
      {
        "line": 1941,
        "column": 25
      },
      {
        "line": 1942,
        "column": 9
      },
      {
        "line": 1942,
        "column": 20
      },
      {
        "line": 1943,
        "column": 9
      },
      {
        "line": 1943,
        "column": 20
      },
      {
        "line": 1944,
        "column": 9
      },
      {
        "line": 1944,
        "column": 20
      },
      {
        "line": 1947,
        "column": 13
      },
      {
        "line": 1948,
        "column": 13
      },
      {
        "line": 1953,
        "column": 13
      },
      {
        "line": 1954,
        "column": 13
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 1952,
          "column": 9
        },
        "assert": "// this is what we want\ntry {\n    CollectionUtils.retainAll(base, retain, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});// this is what we want\ntry {\n    CollectionUtils.retainAll(base, retain, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}"
      },
      {
        "testCodeLocation": {
          "line": 1932,
          "column": 9
        },
        "assert": "assertTrue(result.contains(\"CA\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertTrue(result.contains(\"CA\"));"
      },
      {
        "testCodeLocation": {
          "line": 1933,
          "column": 9
        },
        "assert": "assertFalse(result.contains(\"BB\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertFalse(result.contains(\"BB\"));"
      },
      {
        "testCodeLocation": {
          "line": 1934,
          "column": 9
        },
        "assert": "assertFalse(result.contains(\"AC\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertFalse(result.contains(\"AC\"));"
      },
      {
        "testCodeLocation": {
          "line": 1936,
          "column": 9
        },
        "assert": "assertEquals(3, base.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertEquals(3, base.size());"
      },
      {
        "testCodeLocation": {
          "line": 1937,
          "column": 9
        },
        "assert": "assertTrue(base.contains(\"AC\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertTrue(base.contains(\"AC\"));"
      },
      {
        "testCodeLocation": {
          "line": 1938,
          "column": 9
        },
        "assert": "assertTrue(base.contains(\"BB\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertTrue(base.contains(\"BB\"));"
      },
      {
        "testCodeLocation": {
          "line": 1939,
          "column": 9
        },
        "assert": "assertTrue(base.contains(\"CA\"));",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");assertTrue(base.contains(\"CA\"));"
      },
      {
        "testCodeLocation": {
          "line": 1908,
          "column": 9
        },
        "assert": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertEquals(1, result.size());",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});assertEquals(1, result.size());"
      },
      {
        "testCodeLocation": {
          "line": 1941,
          "column": 9
        },
        "assert": "assertEquals(3, retain.size());",
        "slice": "final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");assertEquals(3, retain.size());"
      },
      {
        "testCodeLocation": {
          "line": 1942,
          "column": 9
        },
        "assert": "assertTrue(retain.contains(\"AA\"));",
        "slice": "final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");assertTrue(retain.contains(\"AA\"));"
      },
      {
        "testCodeLocation": {
          "line": 1943,
          "column": 9
        },
        "assert": "assertTrue(retain.contains(\"CX\"));",
        "slice": "final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");assertTrue(retain.contains(\"CX\"));"
      },
      {
        "testCodeLocation": {
          "line": 1944,
          "column": 9
        },
        "assert": "assertTrue(retain.contains(\"XZ\"));",
        "slice": "final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");assertTrue(retain.contains(\"XZ\"));"
      },
      {
        "testCodeLocation": {
          "line": 1946,
          "column": 9
        },
        "assert": "try {\n    CollectionUtils.retainAll(null, null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}",
        "slice": "final List\u003cString\u003e base \u003d new ArrayList\u003c\u003e();base.add(\"AC\");base.add(\"BB\");base.add(\"CA\");final List\u003cString\u003e retain \u003d new ArrayList\u003c\u003e();retain.add(\"AA\");retain.add(\"CX\");retain.add(\"XZ\");// use an equator which compares the second letter only\nfinal Collection\u003cString\u003e result \u003d CollectionUtils.retainAll(base, retain, new Equator\u003cString\u003e() {\n\n    @Override\n    public boolean equate(final String o1, final String o2) {\n        return o1.charAt(1) \u003d\u003d o2.charAt(1);\n    }\n\n    @Override\n    public int hash(final String o) {\n        return o.charAt(1);\n    }\n});try {\n    CollectionUtils.retainAll(null, null, null);\n    fail(\"expecting NullPointerException\");\n} catch (final NullPointerException npe) {\n}"
      }
    ]
  }
]