[
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterMapToList()",
    "annotation": "@Test",
    "code": "List\u003cObject\u003e list \u003d Util.filterMapToList(MAP, NAME_MAPPING);assertTrue(list.size() \u003d\u003d 3);assertEquals(\"Ezio\", list.get(0));assertNull(list.get(1));assertEquals(\"Venice\", list.get(2));",
    "offset": [
      {
        "line": 65,
        "column": 23
      },
      {
        "line": 66,
        "column": 3
      },
      {
        "line": 66,
        "column": 14
      },
      {
        "line": 67,
        "column": 3
      },
      {
        "line": 67,
        "column": 24
      },
      {
        "line": 68,
        "column": 3
      },
      {
        "line": 68,
        "column": 14
      },
      {
        "line": 69,
        "column": 3
      },
      {
        "line": 69,
        "column": 26
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 65,
          "column": 3
        },
        "assert": "List\u003cObject\u003e list \u003d Util.filterMapToList(MAP, NAME_MAPPING);assertTrue(list.size() \u003d\u003d 3);",
        "slice": "List\u003cObject\u003e list \u003d Util.filterMapToList(MAP, NAME_MAPPING);assertTrue(list.size() \u003d\u003d 3);"
      },
      {
        "testCodeLocation": {
          "line": 67,
          "column": 3
        },
        "assert": "assertEquals(\"Ezio\", list.get(0));",
        "slice": "List\u003cObject\u003e list \u003d Util.filterMapToList(MAP, NAME_MAPPING);assertEquals(\"Ezio\", list.get(0));"
      },
      {
        "testCodeLocation": {
          "line": 68,
          "column": 3
        },
        "assert": "assertNull(list.get(1));",
        "slice": "List\u003cObject\u003e list \u003d Util.filterMapToList(MAP, NAME_MAPPING);assertNull(list.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 69,
          "column": 3
        },
        "assert": "assertEquals(\"Venice\", list.get(2));",
        "slice": "List\u003cObject\u003e list \u003d Util.filterMapToList(MAP, NAME_MAPPING);assertEquals(\"Venice\", list.get(2));"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterMapToListWithNullMap()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterMapToList(null, NAME_MAPPING);",
    "offset": [
      {
        "line": 77,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 77,
          "column": 3
        },
        "assert": "Util.filterMapToList(null, NAME_MAPPING);",
        "slice": "Util.filterMapToList(null, NAME_MAPPING);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterMapToListWithNullNameMapping()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterMapToList(MAP, null);",
    "offset": [
      {
        "line": 85,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 85,
          "column": 3
        },
        "assert": "Util.filterMapToList(MAP, null);",
        "slice": "Util.filterMapToList(MAP, null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterListToMap()",
    "annotation": "@Test",
    "code": "final Map\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();Util.filterListToMap(map, NAME_MAPPING, LIST);assertTrue(map.size() \u003d\u003d 2);assertEquals(\"Ezio\", map.get(\"name\"));assertEquals(\"Venice\", map.get(\"city\"));",
    "offset": [
      {
        "line": 93,
        "column": 35
      },
      {
        "line": 94,
        "column": 3
      },
      {
        "line": 95,
        "column": 3
      },
      {
        "line": 95,
        "column": 14
      },
      {
        "line": 96,
        "column": 3
      },
      {
        "line": 96,
        "column": 24
      },
      {
        "line": 97,
        "column": 3
      },
      {
        "line": 97,
        "column": 26
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 96,
          "column": 3
        },
        "assert": "assertEquals(\"Ezio\", map.get(\"name\"));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();assertEquals(\"Ezio\", map.get(\"name\"));"
      },
      {
        "testCodeLocation": {
          "line": 97,
          "column": 3
        },
        "assert": "assertEquals(\"Venice\", map.get(\"city\"));",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();assertEquals(\"Venice\", map.get(\"city\"));"
      },
      {
        "testCodeLocation": {
          "line": 93,
          "column": 3
        },
        "assert": "final Map\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();Util.filterListToMap(map, NAME_MAPPING, LIST);assertTrue(map.size() \u003d\u003d 2);",
        "slice": "final Map\u003cString, String\u003e map \u003d new HashMap\u003cString, String\u003e();Util.filterListToMap(map, NAME_MAPPING, LIST);assertTrue(map.size() \u003d\u003d 2);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterListToMapWithNullDestMap()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterListToMap(null, NAME_MAPPING, LIST);",
    "offset": [
      {
        "line": 105,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 105,
          "column": 3
        },
        "assert": "Util.filterListToMap(null, NAME_MAPPING, LIST);",
        "slice": "Util.filterListToMap(null, NAME_MAPPING, LIST);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterListToMapWithNullNameMapping()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), null, LIST);",
    "offset": [
      {
        "line": 113,
        "column": 3
      },
      {
        "line": 113,
        "column": 24
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 113,
          "column": 3
        },
        "assert": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), null, LIST);",
        "slice": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), null, LIST);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterListToMapWithNullSourceList()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), NAME_MAPPING, null);",
    "offset": [
      {
        "line": 121,
        "column": 3
      },
      {
        "line": 121,
        "column": 24
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 121,
          "column": 3
        },
        "assert": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), NAME_MAPPING, null);",
        "slice": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), NAME_MAPPING, null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterListToMapWithSizeMismatch()",
    "annotation": "@Test(expected \u003d SuperCsvException.class)",
    "code": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), new String[] { \"notEnoughColumns\" }, LIST);",
    "offset": [
      {
        "line": 129,
        "column": 3
      },
      {
        "line": 129,
        "column": 24
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 129,
          "column": 3
        },
        "assert": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), new String[] { \"notEnoughColumns\" }, LIST);",
        "slice": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), new String[] { \"notEnoughColumns\" }, LIST);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterListToMapWithDuplicateNameMapping()",
    "annotation": "@Test(expected \u003d SuperCsvException.class)",
    "code": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), new String[] { \"name\", \"name\", \"city\" }, LIST);",
    "offset": [
      {
        "line": 137,
        "column": 3
      },
      {
        "line": 137,
        "column": 24
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 137,
          "column": 3
        },
        "assert": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), new String[] { \"name\", \"name\", \"city\" }, LIST);",
        "slice": "Util.filterListToMap(new HashMap\u003cString, String\u003e(), new String[] { \"name\", \"name\", \"city\" }, LIST);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testExecuteCellProcessors()",
    "annotation": "@Test",
    "code": "List\u003cObject\u003e destinationList \u003d new ArrayList\u003cObject\u003e();Util.executeCellProcessors(destinationList, LIST, PROCESSORS, LINE_NO, ROW_NO);assertTrue(destinationList.size() \u003d\u003d 3);assertEquals(\"Ezio\", destinationList.get(0));assertEquals(Integer.valueOf(25), destinationList.get(1));assertEquals(\"Venice\", destinationList.get(2));",
    "offset": [
      {
        "line": 145,
        "column": 34
      },
      {
        "line": 146,
        "column": 3
      },
      {
        "line": 147,
        "column": 3
      },
      {
        "line": 147,
        "column": 14
      },
      {
        "line": 148,
        "column": 3
      },
      {
        "line": 148,
        "column": 24
      },
      {
        "line": 149,
        "column": 3
      },
      {
        "line": 149,
        "column": 16
      },
      {
        "line": 149,
        "column": 37
      },
      {
        "line": 150,
        "column": 3
      },
      {
        "line": 150,
        "column": 26
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 145,
          "column": 3
        },
        "assert": "List\u003cObject\u003e destinationList \u003d new ArrayList\u003cObject\u003e();Util.executeCellProcessors(destinationList, LIST, PROCESSORS, LINE_NO, ROW_NO);assertTrue(destinationList.size() \u003d\u003d 3);",
        "slice": "List\u003cObject\u003e destinationList \u003d new ArrayList\u003cObject\u003e();Util.executeCellProcessors(destinationList, LIST, PROCESSORS, LINE_NO, ROW_NO);assertTrue(destinationList.size() \u003d\u003d 3);"
      },
      {
        "testCodeLocation": {
          "line": 148,
          "column": 3
        },
        "assert": "assertEquals(\"Ezio\", destinationList.get(0));",
        "slice": "List\u003cObject\u003e destinationList \u003d new ArrayList\u003cObject\u003e();assertEquals(\"Ezio\", destinationList.get(0));"
      },
      {
        "testCodeLocation": {
          "line": 149,
          "column": 3
        },
        "assert": "assertEquals(Integer.valueOf(25), destinationList.get(1));",
        "slice": "List\u003cObject\u003e destinationList \u003d new ArrayList\u003cObject\u003e();assertEquals(Integer.valueOf(25), destinationList.get(1));"
      },
      {
        "testCodeLocation": {
          "line": 150,
          "column": 3
        },
        "assert": "assertEquals(\"Venice\", destinationList.get(2));",
        "slice": "List\u003cObject\u003e destinationList \u003d new ArrayList\u003cObject\u003e();assertEquals(\"Venice\", destinationList.get(2));"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testExecuteCellProcessorsWithNullDestination()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.executeCellProcessors(null, LIST, PROCESSORS, LINE_NO, ROW_NO);",
    "offset": [
      {
        "line": 158,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 158,
          "column": 3
        },
        "assert": "Util.executeCellProcessors(null, LIST, PROCESSORS, LINE_NO, ROW_NO);",
        "slice": "Util.executeCellProcessors(null, LIST, PROCESSORS, LINE_NO, ROW_NO);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testExecuteCellProcessorsWithNullSource()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), null, PROCESSORS, LINE_NO, ROW_NO);",
    "offset": [
      {
        "line": 166,
        "column": 3
      },
      {
        "line": 166,
        "column": 30
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 166,
          "column": 3
        },
        "assert": "Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), null, PROCESSORS, LINE_NO, ROW_NO);",
        "slice": "Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), null, PROCESSORS, LINE_NO, ROW_NO);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testExecuteCellProcessorsWithNullProcessors()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), LIST, null, LINE_NO, ROW_NO);",
    "offset": [
      {
        "line": 174,
        "column": 3
      },
      {
        "line": 174,
        "column": 30
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 174,
          "column": 3
        },
        "assert": "Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), LIST, null, LINE_NO, ROW_NO);",
        "slice": "Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), LIST, null, LINE_NO, ROW_NO);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testExecuteCellProcessorsWithSizeMismatch()",
    "annotation": "@Test(expected \u003d SuperCsvException.class)",
    "code": "final List\u003cObject\u003e invalidSizeList \u003d new ArrayList\u003cObject\u003e();Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), invalidSizeList, PROCESSORS, LINE_NO, ROW_NO);",
    "offset": [
      {
        "line": 183,
        "column": 40
      },
      {
        "line": 184,
        "column": 3
      },
      {
        "line": 184,
        "column": 30
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 183,
          "column": 3
        },
        "assert": "final List\u003cObject\u003e invalidSizeList \u003d new ArrayList\u003cObject\u003e();Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), invalidSizeList, PROCESSORS, LINE_NO, ROW_NO);",
        "slice": "final List\u003cObject\u003e invalidSizeList \u003d new ArrayList\u003cObject\u003e();Util.executeCellProcessors(new ArrayList\u003cObject\u003e(), invalidSizeList, PROCESSORS, LINE_NO, ROW_NO);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterMapToObjectArray()",
    "annotation": "@Test",
    "code": "final Object[] objectArray \u003d Util.filterMapToObjectArray(MAP, NAME_MAPPING);assertTrue(objectArray.length \u003d\u003d 3);assertEquals(\"Ezio\", objectArray[0]);assertNull(objectArray[1]);assertEquals(\"Venice\", objectArray[2]);",
    "offset": [
      {
        "line": 192,
        "column": 32
      },
      {
        "line": 193,
        "column": 3
      },
      {
        "line": 194,
        "column": 3
      },
      {
        "line": 195,
        "column": 3
      },
      {
        "line": 196,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 192,
          "column": 3
        },
        "assert": "final Object[] objectArray \u003d Util.filterMapToObjectArray(MAP, NAME_MAPPING);assertTrue(objectArray.length \u003d\u003d 3);",
        "slice": "final Object[] objectArray \u003d Util.filterMapToObjectArray(MAP, NAME_MAPPING);assertTrue(objectArray.length \u003d\u003d 3);"
      },
      {
        "testCodeLocation": {
          "line": 194,
          "column": 3
        },
        "assert": "assertEquals(\"Ezio\", objectArray[0]);",
        "slice": "final Object[] objectArray \u003d Util.filterMapToObjectArray(MAP, NAME_MAPPING);assertEquals(\"Ezio\", objectArray[0]);"
      },
      {
        "testCodeLocation": {
          "line": 195,
          "column": 3
        },
        "assert": "assertNull(objectArray[1]);",
        "slice": "final Object[] objectArray \u003d Util.filterMapToObjectArray(MAP, NAME_MAPPING);assertNull(objectArray[1]);"
      },
      {
        "testCodeLocation": {
          "line": 196,
          "column": 3
        },
        "assert": "assertEquals(\"Venice\", objectArray[2]);",
        "slice": "final Object[] objectArray \u003d Util.filterMapToObjectArray(MAP, NAME_MAPPING);assertEquals(\"Venice\", objectArray[2]);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterMapToObjectArrayWithNullValues()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterMapToObjectArray(null, NAME_MAPPING);",
    "offset": [
      {
        "line": 204,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 204,
          "column": 3
        },
        "assert": "Util.filterMapToObjectArray(null, NAME_MAPPING);",
        "slice": "Util.filterMapToObjectArray(null, NAME_MAPPING);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testFilterMapToObjectArrayWithNullNameMapping()",
    "annotation": "@Test(expected \u003d NullPointerException.class)",
    "code": "Util.filterMapToObjectArray(MAP, null);",
    "offset": [
      {
        "line": 212,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 212,
          "column": 3
        },
        "assert": "Util.filterMapToObjectArray(MAP, null);",
        "slice": "Util.filterMapToObjectArray(MAP, null);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testObjectArrayToStringArray()",
    "annotation": "@Test",
    "code": "final Object[] input \u003d new Object[] { 1, null, \"three\" };final String[] output \u003d Util.objectArrayToStringArray(input);assertEquals(3, output.length);assertEquals(\"1\", output[0]);assertNull(output[1]);assertEquals(\"three\", output[2]);",
    "offset": [
      {
        "line": 221,
        "column": 27
      },
      {
        "line": 222,
        "column": 3
      },
      {
        "line": 223,
        "column": 3
      },
      {
        "line": 224,
        "column": 3
      },
      {
        "line": 225,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 224,
          "column": 3
        },
        "assert": "assertNull(output[1]);",
        "slice": "final Object[] input \u003d new Object[] { 1, null, \"three\" };final String[] output \u003d Util.objectArrayToStringArray(input);assertNull(output[1]);"
      },
      {
        "testCodeLocation": {
          "line": 225,
          "column": 3
        },
        "assert": "assertEquals(\"three\", output[2]);",
        "slice": "final Object[] input \u003d new Object[] { 1, null, \"three\" };final String[] output \u003d Util.objectArrayToStringArray(input);assertEquals(\"three\", output[2]);"
      },
      {
        "testCodeLocation": {
          "line": 220,
          "column": 3
        },
        "assert": "final Object[] input \u003d new Object[] { 1, null, \"three\" };final String[] output \u003d Util.objectArrayToStringArray(input);assertEquals(3, output.length);",
        "slice": "final Object[] input \u003d new Object[] { 1, null, \"three\" };final String[] output \u003d Util.objectArrayToStringArray(input);assertEquals(3, output.length);"
      },
      {
        "testCodeLocation": {
          "line": 223,
          "column": 3
        },
        "assert": "assertEquals(\"1\", output[0]);",
        "slice": "final Object[] input \u003d new Object[] { 1, null, \"three\" };final String[] output \u003d Util.objectArrayToStringArray(input);assertEquals(\"1\", output[0]);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testObjectArrayToStringArrayWithNullArray()",
    "annotation": "@Test",
    "code": "assertNull(Util.objectArrayToStringArray(null));",
    "offset": [
      {
        "line": 233,
        "column": 3
      },
      {
        "line": 233,
        "column": 14
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 233,
          "column": 3
        },
        "assert": "assertNull(Util.objectArrayToStringArray(null));",
        "slice": "assertNull(Util.objectArrayToStringArray(null));"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testObjectListToStringArray()",
    "annotation": "@Test",
    "code": "final List\u003cObject\u003e input \u003d Arrays.asList(new Object[] { 1, null, \"three\" });final String[] output \u003d Util.objectListToStringArray(input);assertEquals(3, output.length);assertEquals(\"1\", output[0]);assertNull(output[1]);assertEquals(\"three\", output[2]);",
    "offset": [
      {
        "line": 241,
        "column": 30
      },
      {
        "line": 242,
        "column": 27
      },
      {
        "line": 243,
        "column": 3
      },
      {
        "line": 244,
        "column": 3
      },
      {
        "line": 245,
        "column": 3
      },
      {
        "line": 246,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 241,
          "column": 3
        },
        "assert": "final List\u003cObject\u003e input \u003d Arrays.asList(new Object[] { 1, null, \"three\" });final String[] output \u003d Util.objectListToStringArray(input);assertEquals(3, output.length);",
        "slice": "final List\u003cObject\u003e input \u003d Arrays.asList(new Object[] { 1, null, \"three\" });final String[] output \u003d Util.objectListToStringArray(input);assertEquals(3, output.length);"
      },
      {
        "testCodeLocation": {
          "line": 244,
          "column": 3
        },
        "assert": "assertEquals(\"1\", output[0]);",
        "slice": "final List\u003cObject\u003e input \u003d Arrays.asList(new Object[] { 1, null, \"three\" });final String[] output \u003d Util.objectListToStringArray(input);assertEquals(\"1\", output[0]);"
      },
      {
        "testCodeLocation": {
          "line": 245,
          "column": 3
        },
        "assert": "assertNull(output[1]);",
        "slice": "final List\u003cObject\u003e input \u003d Arrays.asList(new Object[] { 1, null, \"three\" });final String[] output \u003d Util.objectListToStringArray(input);assertNull(output[1]);"
      },
      {
        "testCodeLocation": {
          "line": 246,
          "column": 3
        },
        "assert": "assertEquals(\"three\", output[2]);",
        "slice": "final List\u003cObject\u003e input \u003d Arrays.asList(new Object[] { 1, null, \"three\" });final String[] output \u003d Util.objectListToStringArray(input);assertEquals(\"three\", output[2]);"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testObjectListToStringArrayWithNullList()",
    "annotation": "@Test",
    "code": "assertNull(Util.objectListToStringArray(null));",
    "offset": [
      {
        "line": 254,
        "column": 3
      },
      {
        "line": 254,
        "column": 14
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 254,
          "column": 3
        },
        "assert": "assertNull(Util.objectListToStringArray(null));",
        "slice": "assertNull(Util.objectListToStringArray(null));"
      }
    ]
  },
  {
    "unitTestMethod": "org.supercsv.util.UtilTest.testPrivateConstructor()",
    "annotation": "@Test",
    "code": "Constructor\u003c?\u003e c \u003d Util.class.getDeclaredConstructors()[0];c.setAccessible(true);c.newInstance();",
    "offset": [
      {
        "line": 262,
        "column": 22
      },
      {
        "line": 263,
        "column": 3
      },
      {
        "line": 264,
        "column": 3
      }
    ],
    "testCodeRegion": [
      {
        "testCodeLocation": {
          "line": 262,
          "column": 3
        },
        "assert": "Constructor\u003c?\u003e c \u003d Util.class.getDeclaredConstructors()[0];c.setAccessible(true);c.newInstance();",
        "slice": "Constructor\u003c?\u003e c \u003d Util.class.getDeclaredConstructors()[0];c.setAccessible(true);c.newInstance();"
      }
    ]
  }
]