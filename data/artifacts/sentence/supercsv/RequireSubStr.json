[
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.RequireSubStr(java.lang.String, org.supercsv.cellprocessor.ift.CellProcessor)",
    "comment": "\n\t * Converts the input to a String, ensures that the input contains the specified substring, then calls the next\n\t * processor in the chain.\n\t * \n\t * @param requiredSubString\n\t *            the required substring\n\t * @param next\n\t *            the next processor in the chain\n\t * @throws NullPointerException\n\t *             if requiredSubString or next is null\n\t ",
    "sentences": [
      {
        "sentenceText": "Converts the input to a String, ensures that the input contains the specified substring, then calls the next processor in the chain.",
        "tagType": "",
        "sentenceLocation": {
          "line": 76,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if requiredSubString or next is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 83,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.RequireSubStr(java.lang.String...)",
    "comment": "\n\t * Converts the input to a String and ensures that the input contains at least one of the specified substrings.\n\t * \n\t * @param requiredSubStrings\n\t *            the required substrings\n\t * @throws NullPointerException\n\t *             if requiredSubStrings or one of its elements is null\n\t * @throws IllegalArgumentException\n\t *             if requiredSubStrings is empty\n\t ",
    "sentences": [
      {
        "sentenceText": "Converts the input to a String and ensures that the input contains at least one of the specified substrings.",
        "tagType": "",
        "sentenceLocation": {
          "line": 41,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if requiredSubStrings or one of its elements is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 45,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if requiredSubStrings is empty",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 47,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.execute(java.lang.Object, org.supercsv.util.CsvContext)",
    "comment": "\n\t * {@inheritDoc}\n\t * \n\t * @throws SuperCsvCellProcessorException\n\t *             if value is null\n\t * @throws SuperCsvConstraintViolationException\n\t *             if value doesn\u0027t contain any of the required substrings\n\t ",
    "sentences": [
      {
        "sentenceText": "{@inheritDoc}",
        "tagType": "",
        "sentenceLocation": {
          "line": 177,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws SuperCsvCellProcessorException if value is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 179,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws SuperCsvConstraintViolationException if value doesn\u0027t contain any of the required substrings",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 181,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.RequireSubStr(java.lang.String[], org.supercsv.cellprocessor.ift.CellProcessor)",
    "comment": "\n\t * Converts the input to a String, ensures that the input contains at least one of the specified substrings, then\n\t * calls the next processor in the chain.\n\t * \n\t * @param requiredSubStrings\n\t *            the List of required substrings\n\t * @param next\n\t *            the next processor in the chain\n\t * @throws NullPointerException\n\t *             if requiredSubStrings, one of its elements or next is null\n\t * @throws IllegalArgumentException\n\t *             if requiredSubStrings is empty\n\t ",
    "sentences": [
      {
        "sentenceText": "Converts the input to a String, ensures that the input contains at least one of the specified substrings, then calls the next processor in the chain.",
        "tagType": "",
        "sentenceLocation": {
          "line": 93,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if requiredSubStrings, one of its elements or next is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 100,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if requiredSubStrings is empty",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 102,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.checkPreconditions(java.lang.String...)",
    "comment": "\n\t * Checks the preconditions for creating a new RequireSubStr processor with an array of Strings.\n\t * \n\t * @param requiredSubStrings\n\t *            the required substrings\n\t * @throws NullPointerException\n\t *             if requiredSubStrings or one of its elements is null\n\t * @throws IllegalArgumentException\n\t *             if requiredSubStrings is empty\n\t ",
    "sentences": [
      {
        "sentenceText": "Checks the preconditions for creating a new RequireSubStr processor with an array of Strings.",
        "tagType": "",
        "sentenceLocation": {
          "line": 112,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if requiredSubStrings or one of its elements is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 116,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if requiredSubStrings is empty",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 118,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.checkAndAddRequiredSubStrings(java.util.List\u003cjava.lang.String\u003e)",
    "comment": "\n\t * Adds each required substring, checking that it\u0027s not null.\n\t * \n\t * @param requiredSubStrings\n\t *            the required substrings\n\t * @throws NullPointerException\n\t *             if a required substring is null\n\t ",
    "sentences": [
      {
        "sentenceText": "Adds each required substring, checking that it\u0027s not null.",
        "tagType": "",
        "sentenceLocation": {
          "line": 148,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if a required substring is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 152,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.checkPreconditions(java.util.List\u003cjava.lang.String\u003e)",
    "comment": "\n\t * Checks the preconditions for creating a new RequireSubStr processor with a List of Strings.\n\t * \n\t * @param requiredSubStrings\n\t *            the required substrings\n\t * @throws NullPointerException\n\t *             if requiredSubStrings or one of its elements is null\n\t * @throws IllegalArgumentException\n\t *             if requiredSubStrings is empty\n\t ",
    "sentences": [
      {
        "sentenceText": "Checks the preconditions for creating a new RequireSubStr processor with a List of Strings.",
        "tagType": "",
        "sentenceLocation": {
          "line": 130,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if requiredSubStrings or one of its elements is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 134,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if requiredSubStrings is empty",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 136,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.checkAndAddRequiredSubStrings(java.lang.String...)",
    "comment": "\n\t * Adds each required substring, checking that it\u0027s not null.\n\t * \n\t * @param requiredSubStrings\n\t *            the required substrings\n\t * @throws NullPointerException\n\t *             if a required substring is null\n\t ",
    "sentences": [
      {
        "sentenceText": "Adds each required substring, checking that it\u0027s not null.",
        "tagType": "",
        "sentenceLocation": {
          "line": 165,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if a required substring is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 169,
          "column": 5
        }
      }
    ]
  },
  {
    "productionMethod": "org.supercsv.cellprocessor.constraint.RequireSubStr.RequireSubStr(java.util.List\u003cjava.lang.String\u003e, org.supercsv.cellprocessor.ift.CellProcessor)",
    "comment": "\n\t * Converts the input to a String, ensures that the input contains at least one of the specified substrings, then\n\t * calls the next processor in the chain.\n\t * \n\t * @param requiredSubStrings\n\t *            the List of required substrings\n\t * @param next\n\t *            the next processor in the chain\n\t * @throws NullPointerException\n\t *             if requiredSubStrings, one of its elements or next is null\n\t * @throws IllegalArgumentException\n\t *             if requiredSubStrings is empty\n\t ",
    "sentences": [
      {
        "sentenceText": "Converts the input to a String, ensures that the input contains at least one of the specified substrings, then calls the next processor in the chain.",
        "tagType": "",
        "sentenceLocation": {
          "line": 57,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws NullPointerException if requiredSubStrings, one of its elements or next is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 64,
          "column": 5
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if requiredSubStrings is empty",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 66,
          "column": 5
        }
      }
    ]
  }
]