[
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.synchronizedSortedMap(java.util.SortedMap\u003cK, V\u003e)",
    "comment": "\r\n     * Returns a synchronized sorted map backed by the given sorted map.\r\n     * \u003cp\u003e\r\n     * You must manually synchronize on the returned buffer\u0027s iterator to\r\n     * avoid non-deterministic behavior:\r\n     *\r\n     * \u003cpre\u003e\r\n     * Map m \u003d MapUtils.synchronizedSortedMap(myMap);\r\n     * Set s \u003d m.keySet();  // outside synchronized block\r\n     * synchronized (m) {  // synchronized on MAP!\r\n     *     Iterator i \u003d s.iterator();\r\n     *     while (i.hasNext()) {\r\n     *         process (i.next());\r\n     *     }\r\n     * }\r\n     * \u003c/pre\u003e\r\n     *\r\n     * This method uses the implementation in {@link java.util.Collections Collections}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to synchronize, must not be null\r\n     * @return a synchronized map backed by the given map\r\n     * @throws NullPointerException  if the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a synchronized sorted map backed by the given sorted map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1498,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e You must manually synchronize on the returned buffer\u0027s iterator to avoid non-deterministic behavior: \u003cpre\u003e Map m \u003d MapUtils.synchronizedSortedMap(myMap); Set s \u003d m.keySet();  // outside synchronized block synchronized (m) {  // synchronized on MAP! Iterator i \u003d s.iterator(); while (i.hasNext()) { process (i.next()); } } \u003c/pre\u003e This method uses the implementation in {@link java.util.Collections Collections}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1499,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a synchronized map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1519,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1520,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.safeAddToMap(java.util.Map\u003c? super K, java.lang.Object\u003e, K, java.lang.Object)",
    "comment": "\r\n     * Protects against adding null values to a map.\r\n     * \u003cp\u003e\r\n     * This method checks the value being added to the map, and if it is null\r\n     * it is replaced by an empty string.\r\n     * \u003cp\u003e\r\n     * This could be useful if the map does not accept null values, or for\r\n     * receiving data from a source that may provide null or empty string\r\n     * which should be held in the same way in the map.\r\n     * \u003cp\u003e\r\n     * Keys are not validated.\r\n     * Note that this method can be used to circumvent the map\u0027s\r\n     * value type at runtime.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to add to, may not be null\r\n     * @param key  the key\r\n     * @param value  the value, null converted to \"\"\r\n     * @throws NullPointerException if the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Protects against adding null values to a map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1078,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method checks the value being added to the map, and if it is null it is replaced by an empty string.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1079,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This could be useful if the map does not accept null values, or for receiving data from a source that may provide null or empty string which should be held in the same way in the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1082,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Keys are not validated.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1086,
          "column": 8
        }
      },
      {
        "sentenceText": "Note that this method can be used to circumvent the map\u0027s value type at runtime.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1088,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1095,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.populateMap(java.util.Map\u003cK, V\u003e, java.lang.Iterable\u003c? extends E\u003e, org.apache.commons.collections4.Transformer\u003cE, K\u003e, org.apache.commons.collections4.Transformer\u003cE, V\u003e)",
    "comment": "\r\n     * Populates a Map using the supplied \u003ccode\u003eTransformer\u003c/code\u003es to transform the elements\r\n     * into keys and values.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param \u003cE\u003e  the type of object contained in the {@link Iterable}\r\n     * @param map the \u003ccode\u003eMap\u003c/code\u003e to populate.\r\n     * @param elements the \u003ccode\u003eIterable\u003c/code\u003e containing the input values for the map.\r\n     * @param keyTransformer the \u003ccode\u003eTransformer\u003c/code\u003e used to transform the element into a key value\r\n     * @param valueTransformer the \u003ccode\u003eTransformer\u003c/code\u003e used to transform the element into a value\r\n     * @throws NullPointerException if the map, elements or transformers are null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Populates a Map using the supplied \u003ccode\u003eTransformer\u003c/code\u003es to transform the elements into keys and values.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1702,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the map, elements or transformers are null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1712,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getBoolean(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Boolean from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * If the value is a \u003ccode\u003eBoolean\u003c/code\u003e it is returned directly.\r\n     * If the value is a \u003ccode\u003eString\u003c/code\u003e and it equals \u0027true\u0027 ignoring case\r\n     * then \u003ccode\u003etrue\u003c/code\u003e is returned, otherwise \u003ccode\u003efalse\u003c/code\u003e.\r\n     * If the value is a \u003ccode\u003eNumber\u003c/code\u003e an integer zero value returns\r\n     * \u003ccode\u003efalse\u003c/code\u003e and non-zero returns \u003ccode\u003etrue\u003c/code\u003e.\r\n     * Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Boolean, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Boolean from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 140,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the value is a \u003ccode\u003eBoolean\u003c/code\u003e it is returned directly.",
        "tagType": "",
        "sentenceLocation": {
          "line": 141,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eString\u003c/code\u003e and it equals \u0027true\u0027 ignoring case then \u003ccode\u003etrue\u003c/code\u003e is returned, otherwise \u003ccode\u003efalse\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 143,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eNumber\u003c/code\u003e an integer zero value returns \u003ccode\u003efalse\u003c/code\u003e and non-zero returns \u003ccode\u003etrue\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 145,
          "column": 8
        }
      },
      {
        "sentenceText": "Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 147,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Boolean, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 152,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getShortValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a short from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The short is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a short, \u003ccode\u003e0\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a short from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 618,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The short is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 619,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a short, \u003ccode\u003e0\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 625,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getLongValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a long from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The long is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a long, \u003ccode\u003e0L\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a long from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 654,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The long is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 655,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a long, \u003ccode\u003e0L\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 661,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getLongValue(java.util.Map\u003c? super K, ?\u003e, K, long)",
    "comment": "\r\n     * Gets a long from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * The long is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as a long, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a long from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 795,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The long is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 797,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a long, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 804,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.verbosePrintInternal(java.io.PrintStream, java.lang.Object, java.util.Map\u003c?, ?\u003e, java.util.Deque\u003cjava.util.Map\u003c?, ?\u003e\u003e, boolean)",
    "comment": "\r\n     * Implementation providing functionality for {@link #debugPrint} and for\r\n     * {@link #verbosePrint}.  This prints the given map with nice line breaks.\r\n     * If the debug flag is true, it additionally prints the type of the object\r\n     * value.  If the contents of a map include the map itself, then the text\r\n     * \u003cem\u003e(this Map)\u003c/em\u003e is printed out.  If the contents include a\r\n     * parent container of the map, the text \u003cem\u003e(ancestor[i] Map)\u003c/em\u003e is\r\n     * printed, where i actually indicates the number of levels which must be\r\n     * traversed in the sequential list of ancestors (e.g. father, grandfather,\r\n     * great-grandfather, etc).\r\n     *\r\n     * @param out  the stream to print to\r\n     * @param label  the label to be used, may be \u003ccode\u003enull\u003c/code\u003e.\r\n     *   If \u003ccode\u003enull\u003c/code\u003e, the label is not output.\r\n     *   It typically represents the name of the property in a bean or similar.\r\n     * @param map  the map to print, may be \u003ccode\u003enull\u003c/code\u003e.\r\n     *   If \u003ccode\u003enull\u003c/code\u003e, the text \u0027null\u0027 is output\r\n     * @param lineage  a stack consisting of any maps in which the previous\r\n     *   argument is contained. This is checked to avoid infinite recursion when\r\n     *   printing the output\r\n     * @param debug  flag indicating whether type names should be output.\r\n     * @throws NullPointerException if the stream is \u003ccode\u003enull\u003c/code\u003e\r\n     ",
    "sentences": [
      {
        "sentenceText": "Implementation providing functionality for {@link #debugPrint} and for {@link #verbosePrint}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 952,
          "column": 8
        }
      },
      {
        "sentenceText": "This prints the given map with nice line breaks.",
        "tagType": "",
        "sentenceLocation": {
          "line": 953,
          "column": 32
        }
      },
      {
        "sentenceText": "If the debug flag is true, it additionally prints the type of the object value.",
        "tagType": "",
        "sentenceLocation": {
          "line": 954,
          "column": 8
        }
      },
      {
        "sentenceText": "If the contents of a map include the map itself, then the text \u003cem\u003e(this Map)\u003c/em\u003e is printed out.",
        "tagType": "",
        "sentenceLocation": {
          "line": 955,
          "column": 16
        }
      },
      {
        "sentenceText": "If the contents include a parent container of the map, the text \u003cem\u003e(ancestor[i] Map)\u003c/em\u003e is printed, where i actually indicates the number of levels which must be traversed in the sequential list of ancestors (e.g.",
        "tagType": "",
        "sentenceLocation": {
          "line": 956,
          "column": 45
        }
      },
      {
        "sentenceText": "father, grandfather, great-grandfather, etc).",
        "tagType": "",
        "sentenceLocation": {
          "line": 959,
          "column": 60
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the stream is \u003ccode\u003enull\u003c/code\u003e",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 972,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getBooleanValue(java.util.Map\u003c? super K, ?\u003e, K, boolean)",
    "comment": "\r\n     * Gets a boolean from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * If the value is a \u003ccode\u003eBoolean\u003c/code\u003e its value is returned.\r\n     * If the value is a \u003ccode\u003eString\u003c/code\u003e and it equals \u0027true\u0027 ignoring case\r\n     * then \u003ccode\u003etrue\u003c/code\u003e is returned, otherwise \u003ccode\u003efalse\u003c/code\u003e.\r\n     * If the value is a \u003ccode\u003eNumber\u003c/code\u003e an integer zero value returns\r\n     * \u003ccode\u003efalse\u003c/code\u003e and non-zero returns \u003ccode\u003etrue\u003c/code\u003e.\r\n     * Otherwise, \u003ccode\u003edefaultValue\u003c/code\u003e is returned.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as a Boolean, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a boolean from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 710,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the value is a \u003ccode\u003eBoolean\u003c/code\u003e its value is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 712,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eString\u003c/code\u003e and it equals \u0027true\u0027 ignoring case then \u003ccode\u003etrue\u003c/code\u003e is returned, otherwise \u003ccode\u003efalse\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 714,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eNumber\u003c/code\u003e an integer zero value returns \u003ccode\u003efalse\u003c/code\u003e and non-zero returns \u003ccode\u003etrue\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 716,
          "column": 8
        }
      },
      {
        "sentenceText": "Otherwise, \u003ccode\u003edefaultValue\u003c/code\u003e is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 718,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Boolean, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 724,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.printIndent(java.io.PrintStream, int)",
    "comment": "\r\n     * Writes indentation to the given stream.\r\n     *\r\n     * @param out  the stream to indent\r\n     ",
    "sentences": [
      {
        "sentenceText": "Writes indentation to the given stream.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1041,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getByteValue(java.util.Map\u003c? super K, ?\u003e, K, byte)",
    "comment": "\r\n     * Gets a byte from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * The byte is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as a byte, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a byte from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 735,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The byte is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 737,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a byte, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 744,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getFloat(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Float)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a float, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a float, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 519,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 527,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.debugPrint(java.io.PrintStream, java.lang.Object, java.util.Map\u003c?, ?\u003e)",
    "comment": "\r\n     * Prints the given map with nice line breaks.\r\n     * \u003cp\u003e\r\n     * This method prints a nicely formatted String describing the Map.\r\n     * Each map entry will be printed with key, value and value classname.\r\n     * When the value is a Map, recursive behaviour occurs.\r\n     * \u003cp\u003e\r\n     * This method is NOT thread-safe in any special way. You must manually\r\n     * synchronize on either this class or the stream as required.\r\n     *\r\n     * @param out  the stream to print to, must not be null\r\n     * @param label  The label to be used, may be \u003ccode\u003enull\u003c/code\u003e.\r\n     *   If \u003ccode\u003enull\u003c/code\u003e, the label is not output.\r\n     *   It typically represents the name of the property in a bean or similar.\r\n     * @param map  The map to print, may be \u003ccode\u003enull\u003c/code\u003e.\r\n     *   If \u003ccode\u003enull\u003c/code\u003e, the text \u0027null\u0027 is output.\r\n     * @throws NullPointerException if the stream is \u003ccode\u003enull\u003c/code\u003e\r\n     ",
    "sentences": [
      {
        "sentenceText": "Prints the given map with nice line breaks.",
        "tagType": "",
        "sentenceLocation": {
          "line": 928,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method prints a nicely formatted String describing the Map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 929,
          "column": 8
        }
      },
      {
        "sentenceText": "Each map entry will be printed with key, value and value classname.",
        "tagType": "",
        "sentenceLocation": {
          "line": 931,
          "column": 8
        }
      },
      {
        "sentenceText": "When the value is a Map, recursive behaviour occurs.",
        "tagType": "",
        "sentenceLocation": {
          "line": 932,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method is NOT thread-safe in any special way.",
        "tagType": "",
        "sentenceLocation": {
          "line": 933,
          "column": 8
        }
      },
      {
        "sentenceText": "You must manually synchronize on either this class or the stream as required.",
        "tagType": "",
        "sentenceLocation": {
          "line": 934,
          "column": 59
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the stream is \u003ccode\u003enull\u003c/code\u003e",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 943,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.fixedSizeSortedMap(java.util.SortedMap\u003cK, V\u003e)",
    "comment": "\r\n     * Returns a fixed-sized sorted map backed by the given sorted map.\r\n     * Elements may not be added or removed from the returned map, but\r\n     * existing elements can be changed (for instance, via the\r\n     * {@link Map#put(Object,Object)} method).\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map whose size to fix, must not be null\r\n     * @return a fixed-size map backed by that map\r\n     * @throws NullPointerException  if the SortedMap is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a fixed-sized sorted map backed by the given sorted map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1593,
          "column": 8
        }
      },
      {
        "sentenceText": "Elements may not be added or removed from the returned map, but existing elements can be changed (for instance, via the {@link Map#put(Object,Object)} method).",
        "tagType": "",
        "sentenceLocation": {
          "line": 1594,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a fixed-size map backed by that map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1601,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the SortedMap is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1602,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getByte(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Byte)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a byte, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a byte, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 439,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 447,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.lazySortedMap(java.util.SortedMap\u003cK, V\u003e, org.apache.commons.collections4.Factory\u003c? extends V\u003e)",
    "comment": "\r\n     * Returns a \"lazy\" sorted map whose values will be created on demand.\r\n     * \u003cp\u003e\r\n     * When the key passed to the returned map\u0027s {@link Map#get(Object)}\r\n     * method is not present in the map, then the factory will be used\r\n     * to create a new object and that object will become the value\r\n     * associated with that key.\r\n     * \u003cp\u003e\r\n     * For instance:\r\n     *\r\n     * \u003cpre\u003e\r\n     * Factory factory \u003d new Factory() {\r\n     *     public Object create() {\r\n     *         return new Date();\r\n     *     }\r\n     * }\r\n     * SortedMap lazy \u003d MapUtils.lazySortedMap(new TreeMap(), factory);\r\n     * Object obj \u003d lazy.get(\"test\");\r\n     * \u003c/pre\u003e\r\n     *\r\n     * After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain\r\n     * a new \u003ccode\u003eDate\u003c/code\u003e instance.  Furthermore, that \u003ccode\u003eDate\u003c/code\u003e\r\n     * instance is the value for the \u003ccode\u003e\"test\"\u003c/code\u003e key.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to make lazy, must not be null\r\n     * @param factory  the factory for creating new objects, must not be null\r\n     * @return a lazy map backed by the given map\r\n     * @throws NullPointerException  if the SortedMap or Factory is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a \"lazy\" sorted map whose values will be created on demand.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1609,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e When the key passed to the returned map\u0027s {@link Map#get(Object)} method is not present in the map, then the factory will be used to create a new object and that object will become the value associated with that key.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1610,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e For instance: \u003cpre\u003e Factory factory \u003d new Factory() { public Object create() { return new Date(); } } SortedMap lazy \u003d MapUtils.lazySortedMap(new TreeMap(), factory); Object obj \u003d lazy.get(\"test\"); \u003c/pre\u003e After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain a new \u003ccode\u003eDate\u003c/code\u003e instance.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1615,
          "column": 8
        }
      },
      {
        "sentenceText": "Furthermore, that \u003ccode\u003eDate\u003c/code\u003e instance is the value for the \u003ccode\u003e\"test\"\u003c/code\u003e key.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1628,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a lazy map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1636,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the SortedMap or Factory is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1637,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.transformedSortedMap(java.util.SortedMap\u003cK, V\u003e, org.apache.commons.collections4.Transformer\u003c? super K, ? extends K\u003e, org.apache.commons.collections4.Transformer\u003c? super V, ? extends V\u003e)",
    "comment": "\r\n     * Returns a transformed sorted map backed by the given map.\r\n     * \u003cp\u003e\r\n     * This method returns a new sorted map (decorating the specified map) that\r\n     * will transform any new entries added to it.\r\n     * Existing entries in the specified map will not be transformed.\r\n     * If you want that behaviour, see {@link TransformedSortedMap#transformedSortedMap}.\r\n     * \u003cp\u003e\r\n     * Each object is passed through the transformers as it is added to the\r\n     * Map. It is important not to use the original map after invoking this\r\n     * method, as it is a backdoor for adding untransformed objects.\r\n     * \u003cp\u003e\r\n     * If there are any elements already in the map being decorated, they\r\n     * are NOT transformed.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to transform, must not be null, typically empty\r\n     * @param keyTransformer  the transformer for the map keys, null means no transformation\r\n     * @param valueTransformer  the transformer for the map values, null means no transformation\r\n     * @return a transformed map backed by the given map\r\n     * @throws NullPointerException  if the SortedMap is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a transformed sorted map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1564,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method returns a new sorted map (decorating the specified map) that will transform any new entries added to it.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1565,
          "column": 8
        }
      },
      {
        "sentenceText": "Existing entries in the specified map will not be transformed.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1568,
          "column": 8
        }
      },
      {
        "sentenceText": "If you want that behaviour, see {@link TransformedSortedMap#transformedSortedMap}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1569,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Each object is passed through the transformers as it is added to the Map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1570,
          "column": 8
        }
      },
      {
        "sentenceText": "It is important not to use the original map after invoking this method, as it is a backdoor for adding untransformed objects.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1572,
          "column": 13
        }
      },
      {
        "sentenceText": "\u003cp\u003e If there are any elements already in the map being decorated, they are NOT transformed.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1574,
          "column": 13
        }
      },
      {
        "sentenceText": "@return a transformed map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1583,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the SortedMap is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1584,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.iterableMap(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Get the specified {@link Map} as an {@link IterableMap}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map to wrap if necessary.\r\n     * @return IterableMap\u0026lt;K, V\u0026gt;\r\n     * @throws NullPointerException if map is null\r\n     * @since 4.0\r\n     ",
    "sentences": [
      {
        "sentenceText": "Get the specified {@link Map} as an {@link IterableMap}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1764,
          "column": 8
        }
      },
      {
        "sentenceText": "@return IterableMap\u0026lt;K, V\u0026gt;",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1769,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1770,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getByteValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a byte from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The byte is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a byte, \u003ccode\u003e0\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a byte from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 600,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The byte is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 601,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a byte, \u003ccode\u003e0\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 607,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getIntValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets an int from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The int is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as an int, \u003ccode\u003e0\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an int from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 636,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The int is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 637,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as an int, \u003ccode\u003e0\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 643,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.synchronizedMap(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Returns a synchronized map backed by the given map.\r\n     * \u003cp\u003e\r\n     * You must manually synchronize on the returned buffer\u0027s iterator to\r\n     * avoid non-deterministic behavior:\r\n     *\r\n     * \u003cpre\u003e\r\n     * Map m \u003d MapUtils.synchronizedMap(myMap);\r\n     * Set s \u003d m.keySet();  // outside synchronized block\r\n     * synchronized (m) {  // synchronized on MAP!\r\n     *     Iterator i \u003d s.iterator();\r\n     *     while (i.hasNext()) {\r\n     *         process (i.next());\r\n     *     }\r\n     * }\r\n     * \u003c/pre\u003e\r\n     *\r\n     * This method uses the implementation in {@link java.util.Collections Collections}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to synchronize, must not be null\r\n     * @return a synchronized map backed by the given map\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a synchronized map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1234,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e You must manually synchronize on the returned buffer\u0027s iterator to avoid non-deterministic behavior: \u003cpre\u003e Map m \u003d MapUtils.synchronizedMap(myMap); Set s \u003d m.keySet();  // outside synchronized block synchronized (m) {  // synchronized on MAP! Iterator i \u003d s.iterator(); while (i.hasNext()) { process (i.next()); } } \u003c/pre\u003e This method uses the implementation in {@link java.util.Collections Collections}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1235,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a synchronized map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1255,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getLong(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Long from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The Long is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Long, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Long from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 271,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Long is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 272,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Long, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 278,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getMap(java.util.Map\u003c? super K, ?\u003e, K, java.util.Map\u003c?, ?\u003e)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a map, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the map conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a map, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 559,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the map conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 567,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.iterableSortedMap(java.util.SortedMap\u003cK, V\u003e)",
    "comment": "\r\n     * Get the specified {@link SortedMap} as an {@link IterableSortedMap}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param sortedMap to wrap if necessary\r\n     * @return {@link IterableSortedMap}\u0026lt;K, V\u0026gt;\r\n     * @throws NullPointerException if sortedMap is null\r\n     * @since 4.0\r\n     ",
    "sentences": [
      {
        "sentenceText": "Get the specified {@link SortedMap} as an {@link IterableSortedMap}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1781,
          "column": 8
        }
      },
      {
        "sentenceText": "@return {@link IterableSortedMap}\u0026lt;K, V\u0026gt;",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1786,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if sortedMap is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1787,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.size(java.util.Map\u003c?, ?\u003e)",
    "comment": "\r\n     * Gets the given map size or 0 if the map is null\r\n     * @param map a Map or null\r\n     * @return the given map size or 0 if the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets the given map size or 0 if the map is null",
        "tagType": "",
        "sentenceLocation": {
          "line": 1799,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the given map size or 0 if the map is null",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1801,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getString(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a String from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The String is obtained via \u003ccode\u003etoString\u003c/code\u003e.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a String, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a String from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 120,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The String is obtained via \u003ccode\u003etoString\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 121,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a String, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 127,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getShortValue(java.util.Map\u003c? super K, ?\u003e, K, short)",
    "comment": "\r\n     * Gets a short from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * The short is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as a short, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a short from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 755,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The short is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 757,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a short, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 764,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getFloatValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a float from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The float is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a float, \u003ccode\u003e0.0F\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a float from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 672,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The float is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 673,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a float, \u003ccode\u003e0.0F\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 679,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getDouble(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Double from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The Double is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Double, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Double from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 313,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Double is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 314,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Double, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 320,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.lazySortedMap(java.util.SortedMap\u003cK, V\u003e, org.apache.commons.collections4.Transformer\u003c? super K, ? extends V\u003e)",
    "comment": "\r\n     * Returns a \"lazy\" sorted map whose values will be created on demand.\r\n     * \u003cp\u003e\r\n     * When the key passed to the returned map\u0027s {@link Map#get(Object)}\r\n     * method is not present in the map, then the factory will be used\r\n     * to create a new object and that object will become the value\r\n     * associated with that key. The factory is a {@link Transformer}\r\n     * that will be passed the key which it must transform into the value.\r\n     * \u003cp\u003e\r\n     * For instance:\r\n     * \u003cpre\u003e\r\n     * Transformer factory \u003d new Transformer() {\r\n     *     public Object transform(Object mapKey) {\r\n     *         return new File(mapKey);\r\n     *     }\r\n     * }\r\n     * SortedMap lazy \u003d MapUtils.lazySortedMap(new TreeMap(), factory);\r\n     * Object obj \u003d lazy.get(\"C:/dev\");\r\n     * \u003c/pre\u003e\r\n     *\r\n     * After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain\r\n     * a new \u003ccode\u003eFile\u003c/code\u003e instance for the C drive dev directory.\r\n     * Furthermore, that \u003ccode\u003eFile\u003c/code\u003e instance is the value for the\r\n     * \u003ccode\u003e\"C:/dev\"\u003c/code\u003e key in the map.\r\n     * \u003cp\u003e\r\n     * If a lazy map is wrapped by a synchronized map, the result is a simple\r\n     * synchronized cache. When an object is not is the cache, the cache itself\r\n     * calls back to the factory Transformer to populate itself, all within the\r\n     * same synchronized block.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to make lazy, must not be null\r\n     * @param transformerFactory  the factory for creating new objects, must not be null\r\n     * @return a lazy map backed by the given map\r\n     * @throws NullPointerException  if the Map or Transformer is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a \"lazy\" sorted map whose values will be created on demand.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1644,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e When the key passed to the returned map\u0027s {@link Map#get(Object)} method is not present in the map, then the factory will be used to create a new object and that object will become the value associated with that key.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1645,
          "column": 8
        }
      },
      {
        "sentenceText": "The factory is a {@link Transformer} that will be passed the key which it must transform into the value.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1649,
          "column": 34
        }
      },
      {
        "sentenceText": "\u003cp\u003e For instance: \u003cpre\u003e Transformer factory \u003d new Transformer() { public Object transform(Object mapKey) { return new File(mapKey); } } SortedMap lazy \u003d MapUtils.lazySortedMap(new TreeMap(), factory); Object obj \u003d lazy.get(\"C:/dev\"); \u003c/pre\u003e After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain a new \u003ccode\u003eFile\u003c/code\u003e instance for the C drive dev directory.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1651,
          "column": 34
        }
      },
      {
        "sentenceText": "Furthermore, that \u003ccode\u003eFile\u003c/code\u003e instance is the value for the \u003ccode\u003e\"C:/dev\"\u003c/code\u003e key in the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1664,
          "column": 34
        }
      },
      {
        "sentenceText": "\u003cp\u003e If a lazy map is wrapped by a synchronized map, the result is a simple synchronized cache.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1666,
          "column": 34
        }
      },
      {
        "sentenceText": "When an object is not is the cache, the cache itself calls back to the factory Transformer to populate itself, all within the same synchronized block.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1669,
          "column": 34
        }
      },
      {
        "sentenceText": "@return a lazy map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1677,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map or Transformer is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1678,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getString(java.util.Map\u003c? super K, ?\u003e, K, java.lang.String)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a string, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a string, or defaultValue if the\r\n     *   original value is null, the map is null or the string conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a string, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 379,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a string, or defaultValue if the original value is null, the map is null or the string conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 387,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.MapUtils()",
    "comment": "\r\n     * \u003ccode\u003eMapUtils\u003c/code\u003e should not normally be instantiated.\r\n     ",
    "sentences": [
      {
        "sentenceText": "\u003ccode\u003eMapUtils\u003c/code\u003e should not normally be instantiated.",
        "tagType": "",
        "sentenceLocation": {
          "line": 97,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getLong(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Long)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a long, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a long, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 499,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 507,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getFloatValue(java.util.Map\u003c? super K, ?\u003e, K, float)",
    "comment": "\r\n     * Gets a float from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * The float is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as a float, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a float from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 815,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The float is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 817,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a float, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 824,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.transformedMap(java.util.Map\u003cK, V\u003e, org.apache.commons.collections4.Transformer\u003c? super K, ? extends K\u003e, org.apache.commons.collections4.Transformer\u003c? super V, ? extends V\u003e)",
    "comment": "\r\n     * Returns a transformed map backed by the given map.\r\n     * \u003cp\u003e\r\n     * This method returns a new map (decorating the specified map) that\r\n     * will transform any new entries added to it.\r\n     * Existing entries in the specified map will not be transformed.\r\n     * If you want that behaviour, see {@link TransformedMap#transformedMap}.\r\n     * \u003cp\u003e\r\n     * Each object is passed through the transformers as it is added to the\r\n     * Map. It is important not to use the original map after invoking this\r\n     * method, as it is a backdoor for adding untransformed objects.\r\n     * \u003cp\u003e\r\n     * If there are any elements already in the map being decorated, they\r\n     * are NOT transformed.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to transform, must not be null, typically empty\r\n     * @param keyTransformer  the transformer for the map keys, null means no transformation\r\n     * @param valueTransformer  the transformer for the map values, null means no transformation\r\n     * @return a transformed map backed by the given map\r\n     * @throws NullPointerException  if the Map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a transformed map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1299,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method returns a new map (decorating the specified map) that will transform any new entries added to it.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1300,
          "column": 8
        }
      },
      {
        "sentenceText": "Existing entries in the specified map will not be transformed.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1303,
          "column": 8
        }
      },
      {
        "sentenceText": "If you want that behaviour, see {@link TransformedMap#transformedMap}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1304,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Each object is passed through the transformers as it is added to the Map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1305,
          "column": 8
        }
      },
      {
        "sentenceText": "It is important not to use the original map after invoking this method, as it is a backdoor for adding untransformed objects.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1307,
          "column": 13
        }
      },
      {
        "sentenceText": "\u003cp\u003e If there are any elements already in the map being decorated, they are NOT transformed.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1309,
          "column": 13
        }
      },
      {
        "sentenceText": "@return a transformed map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1318,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1319,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.unmodifiableSortedMap(java.util.SortedMap\u003cK, ? extends V\u003e)",
    "comment": "\r\n     * Returns an unmodifiable sorted map backed by the given sorted map.\r\n     * \u003cp\u003e\r\n     * This method uses the implementation in the decorators subpackage.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the sorted map to make unmodifiable, must not be null\r\n     * @return an unmodifiable map backed by the given map\r\n     * @throws NullPointerException  if the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an unmodifiable sorted map backed by the given sorted map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1527,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method uses the implementation in the decorators subpackage.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1528,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an unmodifiable map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1534,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1535,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.populateMap(org.apache.commons.collections4.MultiMap\u003cK, V\u003e, java.lang.Iterable\u003c? extends V\u003e, org.apache.commons.collections4.Transformer\u003cV, K\u003e)",
    "comment": "\r\n     * Populates a MultiMap using the supplied \u003ccode\u003eTransformer\u003c/code\u003e to transform the elements\r\n     * into keys, using the unaltered element as the value in the \u003ccode\u003eMultiMap\u003c/code\u003e.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map the \u003ccode\u003eMultiMap\u003c/code\u003e to populate.\r\n     * @param elements the \u003ccode\u003eIterable\u003c/code\u003e to use as input values for the map.\r\n     * @param keyTransformer the \u003ccode\u003eTransformer\u003c/code\u003e used to transform the element into a key value\r\n     * @throws NullPointerException if the map, elements or transformer are null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Populates a MultiMap using the supplied \u003ccode\u003eTransformer\u003c/code\u003e to transform the elements into keys, using the unaltered element as the value in the \u003ccode\u003eMultiMap\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1725,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the map, elements or transformer are null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1733,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getShort(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Short from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The Short is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Short, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Short from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 229,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Short is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 230,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Short, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 236,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.fixedSizeMap(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Returns a fixed-sized map backed by the given map.\r\n     * Elements may not be added or removed from the returned map, but\r\n     * existing elements can be changed (for instance, via the\r\n     * {@link Map#put(Object,Object)} method).\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map whose size to fix, must not be null\r\n     * @return a fixed-size map backed by that map\r\n     * @throws NullPointerException  if the Map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a fixed-sized map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1328,
          "column": 8
        }
      },
      {
        "sentenceText": "Elements may not be added or removed from the returned map, but existing elements can be changed (for instance, via the {@link Map#put(Object,Object)} method).",
        "tagType": "",
        "sentenceLocation": {
          "line": 1329,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a fixed-size map backed by that map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1336,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1337,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getBooleanValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a boolean from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * If the value is a \u003ccode\u003eBoolean\u003c/code\u003e its value is returned.\r\n     * If the value is a \u003ccode\u003eString\u003c/code\u003e and it equals \u0027true\u0027 ignoring case\r\n     * then \u003ccode\u003etrue\u003c/code\u003e is returned, otherwise \u003ccode\u003efalse\u003c/code\u003e.\r\n     * If the value is a \u003ccode\u003eNumber\u003c/code\u003e an integer zero value returns\r\n     * \u003ccode\u003efalse\u003c/code\u003e and non-zero returns \u003ccode\u003etrue\u003c/code\u003e.\r\n     * Otherwise, \u003ccode\u003efalse\u003c/code\u003e is returned.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Boolean, \u003ccode\u003efalse\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a boolean from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 581,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the value is a \u003ccode\u003eBoolean\u003c/code\u003e its value is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 582,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eString\u003c/code\u003e and it equals \u0027true\u0027 ignoring case then \u003ccode\u003etrue\u003c/code\u003e is returned, otherwise \u003ccode\u003efalse\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 584,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eNumber\u003c/code\u003e an integer zero value returns \u003ccode\u003efalse\u003c/code\u003e and non-zero returns \u003ccode\u003etrue\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 586,
          "column": 8
        }
      },
      {
        "sentenceText": "Otherwise, \u003ccode\u003efalse\u003c/code\u003e is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 588,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Boolean, \u003ccode\u003efalse\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 593,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.invertMap(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Inverts the supplied map returning a new HashMap such that the keys of\r\n     * the input are swapped with the values.\r\n     * \u003cp\u003e\r\n     * This operation assumes that the inverse mapping is well defined.\r\n     * If the input map had multiple entries with the same value mapped to\r\n     * different keys, the returned map will map one of those keys to the\r\n     * value, but the exact key which will be mapped is undefined.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to invert, may not be null\r\n     * @return a new HashMap containing the inverted data\r\n     * @throws NullPointerException if the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Inverts the supplied map returning a new HashMap such that the keys of the input are swapped with the values.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1054,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This operation assumes that the inverse mapping is well defined.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1056,
          "column": 8
        }
      },
      {
        "sentenceText": "If the input map had multiple entries with the same value mapped to different keys, the returned map will map one of those keys to the value, but the exact key which will be mapped is undefined.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1058,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new HashMap containing the inverted data",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1065,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1066,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.orderedMap(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Returns a map that maintains the order of keys that are added\r\n     * backed by the given map.\r\n     * \u003cp\u003e\r\n     * If a key is added twice, the order is determined by the first add.\r\n     * The order is observed through the keySet, values and entrySet.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to order, must not be null\r\n     * @return an ordered map backed by the given map\r\n     * @throws NullPointerException  if the Map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a map that maintains the order of keys that are added backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1420,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If a key is added twice, the order is determined by the first add.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1422,
          "column": 8
        }
      },
      {
        "sentenceText": "The order is observed through the keySet, values and entrySet.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1424,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an ordered map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1429,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1430,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getFloat(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Float from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The Float is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Float, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Float from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 292,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Float is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 293,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Float, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 299,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.lazyMap(java.util.Map\u003cK, V\u003e, org.apache.commons.collections4.Factory\u003c? extends V\u003e)",
    "comment": "\r\n     * Returns a \"lazy\" map whose values will be created on demand.\r\n     * \u003cp\u003e\r\n     * When the key passed to the returned map\u0027s {@link Map#get(Object)}\r\n     * method is not present in the map, then the factory will be used\r\n     * to create a new object and that object will become the value\r\n     * associated with that key.\r\n     * \u003cp\u003e\r\n     * For instance:\r\n     * \u003cpre\u003e\r\n     * Factory factory \u003d new Factory() {\r\n     *     public Object create() {\r\n     *         return new Date();\r\n     *     }\r\n     * }\r\n     * Map lazyMap \u003d MapUtils.lazyMap(new HashMap(), factory);\r\n     * Object obj \u003d lazyMap.get(\"test\");\r\n     * \u003c/pre\u003e\r\n     *\r\n     * After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain\r\n     * a new \u003ccode\u003eDate\u003c/code\u003e instance.  Furthermore, that \u003ccode\u003eDate\u003c/code\u003e\r\n     * instance is the value for the \u003ccode\u003e\"test\"\u003c/code\u003e key in the map.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to make lazy, must not be null\r\n     * @param factory  the factory for creating new objects, must not be null\r\n     * @return a lazy map backed by the given map\r\n     * @throws NullPointerException  if the Map or Factory is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a \"lazy\" map whose values will be created on demand.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1344,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e When the key passed to the returned map\u0027s {@link Map#get(Object)} method is not present in the map, then the factory will be used to create a new object and that object will become the value associated with that key.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1345,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e For instance: \u003cpre\u003e Factory factory \u003d new Factory() { public Object create() { return new Date(); } } Map lazyMap \u003d MapUtils.lazyMap(new HashMap(), factory); Object obj \u003d lazyMap.get(\"test\"); \u003c/pre\u003e After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain a new \u003ccode\u003eDate\u003c/code\u003e instance.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1350,
          "column": 8
        }
      },
      {
        "sentenceText": "Furthermore, that \u003ccode\u003eDate\u003c/code\u003e instance is the value for the \u003ccode\u003e\"test\"\u003c/code\u003e key in the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1363,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a lazy map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1370,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map or Factory is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1371,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getInteger(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Integer from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The Integer is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Integer, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Integer from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 250,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Integer is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 251,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Integer, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 257,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getNumber(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Number)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a number, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a number, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 419,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 427,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getInteger(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Integer)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * an integer, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into an integer, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 479,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 487,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getByte(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Byte from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The Byte is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Byte, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Byte from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 208,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Byte is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 209,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Byte, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 215,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.emptyIfNull(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Returns an immutable empty map if the argument is \u003ccode\u003enull\u003c/code\u003e,\r\n     * or the argument itself otherwise.\r\n     *\r\n     * @param \u003cK\u003e the key type\r\n     * @param \u003cV\u003e the value type\r\n     * @param map the map, possibly \u003ccode\u003enull\u003c/code\u003e\r\n     * @return an empty map if the argument is \u003ccode\u003enull\u003c/code\u003e\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an immutable empty map if the argument is \u003ccode\u003enull\u003c/code\u003e, or the argument itself otherwise.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1193,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an empty map if the argument is \u003ccode\u003enull\u003c/code\u003e",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1199,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getDoubleValue(java.util.Map\u003c? super K, ?\u003e, K, double)",
    "comment": "\r\n     * Gets a double from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * The double is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as a double, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a double from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 835,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The double is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 837,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a double, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 844,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getDoubleValue(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a double from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * The double is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a double, \u003ccode\u003e0.0\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a double from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 690,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The double is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 691,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a double, \u003ccode\u003e0.0\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 697,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.lazyMap(java.util.Map\u003cK, V\u003e, org.apache.commons.collections4.Transformer\u003c? super K, ? extends V\u003e)",
    "comment": "\r\n     * Returns a \"lazy\" map whose values will be created on demand.\r\n     * \u003cp\u003e\r\n     * When the key passed to the returned map\u0027s {@link Map#get(Object)}\r\n     * method is not present in the map, then the factory will be used\r\n     * to create a new object and that object will become the value\r\n     * associated with that key. The factory is a {@link Transformer}\r\n     * that will be passed the key which it must transform into the value.\r\n     * \u003cp\u003e\r\n     * For instance:\r\n     * \u003cpre\u003e\r\n     * Transformer factory \u003d new Transformer() {\r\n     *     public Object transform(Object mapKey) {\r\n     *         return new File(mapKey);\r\n     *     }\r\n     * }\r\n     * Map lazyMap \u003d MapUtils.lazyMap(new HashMap(), factory);\r\n     * Object obj \u003d lazyMap.get(\"C:/dev\");\r\n     * \u003c/pre\u003e\r\n     *\r\n     * After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain\r\n     * a new \u003ccode\u003eFile\u003c/code\u003e instance for the C drive dev directory.\r\n     * Furthermore, that \u003ccode\u003eFile\u003c/code\u003e instance is the value for the\r\n     * \u003ccode\u003e\"C:/dev\"\u003c/code\u003e key in the map.\r\n     * \u003cp\u003e\r\n     * If a lazy map is wrapped by a synchronized map, the result is a simple\r\n     * synchronized cache. When an object is not is the cache, the cache itself\r\n     * calls back to the factory Transformer to populate itself, all within the\r\n     * same synchronized block.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to make lazy, must not be null\r\n     * @param transformerFactory  the factory for creating new objects, must not be null\r\n     * @return a lazy map backed by the given map\r\n     * @throws NullPointerException  if the Map or Transformer is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a \"lazy\" map whose values will be created on demand.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1378,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e When the key passed to the returned map\u0027s {@link Map#get(Object)} method is not present in the map, then the factory will be used to create a new object and that object will become the value associated with that key.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1379,
          "column": 8
        }
      },
      {
        "sentenceText": "The factory is a {@link Transformer} that will be passed the key which it must transform into the value.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1383,
          "column": 34
        }
      },
      {
        "sentenceText": "\u003cp\u003e For instance: \u003cpre\u003e Transformer factory \u003d new Transformer() { public Object transform(Object mapKey) { return new File(mapKey); } } Map lazyMap \u003d MapUtils.lazyMap(new HashMap(), factory); Object obj \u003d lazyMap.get(\"C:/dev\"); \u003c/pre\u003e After the above code is executed, \u003ccode\u003eobj\u003c/code\u003e will contain a new \u003ccode\u003eFile\u003c/code\u003e instance for the C drive dev directory.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1385,
          "column": 34
        }
      },
      {
        "sentenceText": "Furthermore, that \u003ccode\u003eFile\u003c/code\u003e instance is the value for the \u003ccode\u003e\"C:/dev\"\u003c/code\u003e key in the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1398,
          "column": 34
        }
      },
      {
        "sentenceText": "\u003cp\u003e If a lazy map is wrapped by a synchronized map, the result is a simple synchronized cache.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1400,
          "column": 34
        }
      },
      {
        "sentenceText": "When an object is not is the cache, the cache itself calls back to the factory Transformer to populate itself, all within the same synchronized block.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1403,
          "column": 34
        }
      },
      {
        "sentenceText": "@return a lazy map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1411,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map or Transformer is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1412,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getObject(java.util.Map\u003c? super K, V\u003e, K)",
    "comment": "\r\n     * Gets from a Map in a null-safe manner.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 104,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 110,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.toProperties(java.util.Map\u003cK, V\u003e)",
    "comment": "\r\n     * Gets a new Properties object initialised with the values from a Map.\r\n     * A null input will return an empty properties object.\r\n     * \u003cp\u003e\r\n     * A Properties object may only store non-null keys and values, thus if\r\n     * the provided map contains either a key or value which is {@code null},\r\n     * a {@link NullPointerException} will be thrown.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to convert to a Properties object\r\n     * @return the properties object\r\n     * @throws NullPointerException if a key or value in the provided map is {@code null}\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a new Properties object initialised with the values from a Map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 857,
          "column": 8
        }
      },
      {
        "sentenceText": "A null input will return an empty properties object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 858,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A Properties object may only store non-null keys and values, thus if the provided map contains either a key or value which is {@code null}, a {@link NullPointerException} will be thrown.",
        "tagType": "",
        "sentenceLocation": {
          "line": 859,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the properties object",
        "tagType": "return",
        "sentenceLocation": {
          "line": 867,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if a key or value in the provided map is {@code null}",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 868,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getShort(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Short)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a short, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a short, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 459,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 467,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.toMap(java.util.ResourceBundle)",
    "comment": "\r\n     * Creates a new HashMap using data copied from a ResourceBundle.\r\n     *\r\n     * @param resourceBundle  the resource bundle to convert, may not be null\r\n     * @return the hashmap containing the data\r\n     * @throws NullPointerException if the bundle is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Creates a new HashMap using data copied from a ResourceBundle.",
        "tagType": "",
        "sentenceLocation": {
          "line": 884,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the hashmap containing the data",
        "tagType": "return",
        "sentenceLocation": {
          "line": 887,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the bundle is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 888,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.isEmpty(java.util.Map\u003c?, ?\u003e)",
    "comment": "\r\n     * Null-safe check if the specified map is empty.\r\n     * \u003cp\u003e\r\n     * Null returns true.\r\n     *\r\n     * @param map  the map to check, may be null\r\n     * @return true if empty or null\r\n     * @since 3.2\r\n     ",
    "sentences": [
      {
        "sentenceText": "Null-safe check if the specified map is empty.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1206,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Null returns true.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1207,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if empty or null",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1211,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.putAll(java.util.Map\u003cK, V\u003e, java.lang.Object[])",
    "comment": "\r\n     * Puts all the keys and values from the specified array into the map.\r\n     * \u003cp\u003e\r\n     * This method is an alternative to the {@link java.util.Map#putAll(java.util.Map)}\r\n     * method and constructors. It allows you to build a map from an object array\r\n     * of various possible styles.\r\n     * \u003cp\u003e\r\n     * If the first entry in the object array implements {@link java.util.Map.Entry}\r\n     * or {@link KeyValue} then the key and value are added from that object.\r\n     * If the first entry in the object array is an object array itself, then\r\n     * it is assumed that index 0 in the sub-array is the key and index 1 is the value.\r\n     * Otherwise, the array is treated as keys and values in alternate indices.\r\n     * \u003cp\u003e\r\n     * For example, to create a color map:\r\n     * \u003cpre\u003e\r\n     * Map colorMap \u003d MapUtils.putAll(new HashMap(), new String[][] {\r\n     *     {\"RED\", \"#FF0000\"},\r\n     *     {\"GREEN\", \"#00FF00\"},\r\n     *     {\"BLUE\", \"#0000FF\"}\r\n     * });\r\n     * \u003c/pre\u003e\r\n     * or:\r\n     * \u003cpre\u003e\r\n     * Map colorMap \u003d MapUtils.putAll(new HashMap(), new String[] {\r\n     *     \"RED\", \"#FF0000\",\r\n     *     \"GREEN\", \"#00FF00\",\r\n     *     \"BLUE\", \"#0000FF\"\r\n     * });\r\n     * \u003c/pre\u003e\r\n     * or:\r\n     * \u003cpre\u003e\r\n     * Map colorMap \u003d MapUtils.putAll(new HashMap(), new Map.Entry[] {\r\n     *     new DefaultMapEntry(\"RED\", \"#FF0000\"),\r\n     *     new DefaultMapEntry(\"GREEN\", \"#00FF00\"),\r\n     *     new DefaultMapEntry(\"BLUE\", \"#0000FF\")\r\n     * });\r\n     * \u003c/pre\u003e\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to populate, must not be null\r\n     * @param array  an array to populate from, null ignored\r\n     * @return the input map\r\n     * @throws NullPointerException  if map is null\r\n     * @throws IllegalArgumentException  if sub-array or entry matching used and an entry is invalid\r\n     * @throws ClassCastException if the array contents is mixed\r\n     * @since 3.2\r\n     ",
    "sentences": [
      {
        "sentenceText": "Puts all the keys and values from the specified array into the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1104,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method is an alternative to the {@link java.util.Map#putAll(java.util.Map)} method and constructors.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1105,
          "column": 8
        }
      },
      {
        "sentenceText": "It allows you to build a map from an object array of various possible styles.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1107,
          "column": 33
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the first entry in the object array implements {@link java.util.Map.Entry} or {@link KeyValue} then the key and value are added from that object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1109,
          "column": 33
        }
      },
      {
        "sentenceText": "If the first entry in the object array is an object array itself, then it is assumed that index 0 in the sub-array is the key and index 1 is the value.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1112,
          "column": 33
        }
      },
      {
        "sentenceText": "Otherwise, the array is treated as keys and values in alternate indices.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1114,
          "column": 33
        }
      },
      {
        "sentenceText": "\u003cp\u003e For example, to create a color map: \u003cpre\u003e Map colorMap \u003d MapUtils.putAll(new HashMap(), new String[][] { {\"RED\", \"#FF0000\"}, {\"GREEN\", \"#00FF00\"}, {\"BLUE\", \"#0000FF\"} }); \u003c/pre\u003e or: \u003cpre\u003e Map colorMap \u003d MapUtils.putAll(new HashMap(), new String[] { \"RED\", \"#FF0000\", \"GREEN\", \"#00FF00\", \"BLUE\", \"#0000FF\" }); \u003c/pre\u003e or: \u003cpre\u003e Map colorMap \u003d MapUtils.putAll(new HashMap(), new Map.Entry[] { new DefaultMapEntry(\"RED\", \"#FF0000\"), new DefaultMapEntry(\"GREEN\", \"#00FF00\"), new DefaultMapEntry(\"BLUE\", \"#0000FF\") }); \u003c/pre\u003e",
        "tagType": "",
        "sentenceLocation": {
          "line": 1115,
          "column": 33
        }
      },
      {
        "sentenceText": "@return the input map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1145,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1146,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException  if sub-array or entry matching used and an entry is invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1147,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws ClassCastException if the array contents is mixed",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1148,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.predicatedSortedMap(java.util.SortedMap\u003cK, V\u003e, org.apache.commons.collections4.Predicate\u003c? super K\u003e, org.apache.commons.collections4.Predicate\u003c? super V\u003e)",
    "comment": "\r\n     * Returns a predicated (validating) sorted map backed by the given map.\r\n     * \u003cp\u003e\r\n     * Only objects that pass the tests in the given predicates can be added to the map.\r\n     * Trying to add an invalid object results in an IllegalArgumentException.\r\n     * Keys must pass the key predicate, values must pass the value predicate.\r\n     * It is important not to use the original map after invoking this method,\r\n     * as it is a backdoor for adding invalid objects.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to predicate, must not be null\r\n     * @param keyPred  the predicate for keys, null means no check\r\n     * @param valuePred  the predicate for values, null means no check\r\n     * @return a predicated map backed by the given map\r\n     * @throws NullPointerException  if the SortedMap is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a predicated (validating) sorted map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1542,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Only objects that pass the tests in the given predicates can be added to the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1543,
          "column": 8
        }
      },
      {
        "sentenceText": "Trying to add an invalid object results in an IllegalArgumentException.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1545,
          "column": 8
        }
      },
      {
        "sentenceText": "Keys must pass the key predicate, values must pass the value predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1546,
          "column": 8
        }
      },
      {
        "sentenceText": "It is important not to use the original map after invoking this method, as it is a backdoor for adding invalid objects.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1547,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a predicated map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1555,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the SortedMap is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1556,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getIntValue(java.util.Map\u003c? super K, ?\u003e, K, int)",
    "comment": "\r\n     * Gets an int from a Map in a null-safe manner,\r\n     * using the default value if the conversion fails.\r\n     * \u003cp\u003e\r\n     * The int is obtained from the results of {@link #getNumber(Map,Object)}.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @param defaultValue  return if the value is null or if the conversion fails\r\n     * @return the value in the Map as an int, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an int from a Map in a null-safe manner, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 775,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The int is obtained from the results of {@link #getNumber(Map,Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 777,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as an int, \u003ccode\u003edefaultValue\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 784,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.unmodifiableMap(java.util.Map\u003c? extends K, ? extends V\u003e)",
    "comment": "\r\n     * Returns an unmodifiable map backed by the given map.\r\n     * \u003cp\u003e\r\n     * This method uses the implementation in the decorators subpackage.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to make unmodifiable, must not be null\r\n     * @return an unmodifiable map backed by the given map\r\n     * @throws NullPointerException  if the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an unmodifiable map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1262,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method uses the implementation in the decorators subpackage.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1263,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an unmodifiable map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1269,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1270,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.predicatedMap(java.util.Map\u003cK, V\u003e, org.apache.commons.collections4.Predicate\u003c? super K\u003e, org.apache.commons.collections4.Predicate\u003c? super V\u003e)",
    "comment": "\r\n     * Returns a predicated (validating) map backed by the given map.\r\n     * \u003cp\u003e\r\n     * Only objects that pass the tests in the given predicates can be added to the map.\r\n     * Trying to add an invalid object results in an IllegalArgumentException.\r\n     * Keys must pass the key predicate, values must pass the value predicate.\r\n     * It is important not to use the original map after invoking this method,\r\n     * as it is a backdoor for adding invalid objects.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map to predicate, must not be null\r\n     * @param keyPred  the predicate for keys, null means no check\r\n     * @param valuePred  the predicate for values, null means no check\r\n     * @return a predicated map backed by the given map\r\n     * @throws NullPointerException  if the Map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a predicated (validating) map backed by the given map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1277,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Only objects that pass the tests in the given predicates can be added to the map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1278,
          "column": 8
        }
      },
      {
        "sentenceText": "Trying to add an invalid object results in an IllegalArgumentException.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1280,
          "column": 8
        }
      },
      {
        "sentenceText": "Keys must pass the key predicate, values must pass the value predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1281,
          "column": 8
        }
      },
      {
        "sentenceText": "It is important not to use the original map after invoking this method, as it is a backdoor for adding invalid objects.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1282,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a predicated map backed by the given map",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1290,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException  if the Map is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1291,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getNumber(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Number from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * If the value is a \u003ccode\u003eNumber\u003c/code\u003e it is returned directly.\r\n     * If the value is a \u003ccode\u003eString\u003c/code\u003e it is converted using\r\n     * {@link NumberFormat#parse(String)} on the system default formatter\r\n     * returning \u003ccode\u003enull\u003c/code\u003e if the conversion fails.\r\n     * Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Number, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Number from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 174,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the value is a \u003ccode\u003eNumber\u003c/code\u003e it is returned directly.",
        "tagType": "",
        "sentenceLocation": {
          "line": 175,
          "column": 8
        }
      },
      {
        "sentenceText": "If the value is a \u003ccode\u003eString\u003c/code\u003e it is converted using {@link NumberFormat#parse(String)} on the system default formatter returning \u003ccode\u003enull\u003c/code\u003e if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 177,
          "column": 8
        }
      },
      {
        "sentenceText": "Otherwise, \u003ccode\u003enull\u003c/code\u003e is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 180,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Number, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 185,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getDouble(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Double)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a double, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a number, or defaultValue if the\r\n     *   original value is null, the map is null or the number conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a double, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 539,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a number, or defaultValue if the original value is null, the map is null or the number conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 547,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getBoolean(java.util.Map\u003c? super K, ?\u003e, K, java.lang.Boolean)",
    "comment": "\r\n     * Looks up the given key in the given map, converting the result into\r\n     * a boolean, using the default value if the conversion fails.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null or if the\r\n     *   conversion fails\r\n     * @return  the value in the map as a boolean, or defaultValue if the\r\n     *   original value is null, the map is null or the boolean conversion fails\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting the result into a boolean, using the default value if the conversion fails.",
        "tagType": "",
        "sentenceLocation": {
          "line": 399,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map as a boolean, or defaultValue if the original value is null, the map is null or the boolean conversion fails",
        "tagType": "return",
        "sentenceLocation": {
          "line": 407,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getMap(java.util.Map\u003c? super K, ?\u003e, K)",
    "comment": "\r\n     * Gets a Map from a Map in a null-safe manner.\r\n     * \u003cp\u003e\r\n     * If the value returned from the specified map is not a Map then\r\n     * \u003ccode\u003enull\u003c/code\u003e is returned.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param map  the map to use\r\n     * @param key  the key to look up\r\n     * @return the value in the Map as a Map, \u003ccode\u003enull\u003c/code\u003e if null map input\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a Map from a Map in a null-safe manner.",
        "tagType": "",
        "sentenceLocation": {
          "line": 334,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the value returned from the specified map is not a Map then \u003ccode\u003enull\u003c/code\u003e is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 335,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the value in the Map as a Map, \u003ccode\u003enull\u003c/code\u003e if null map input",
        "tagType": "return",
        "sentenceLocation": {
          "line": 342,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.populateMap(java.util.Map\u003cK, V\u003e, java.lang.Iterable\u003c? extends V\u003e, org.apache.commons.collections4.Transformer\u003cV, K\u003e)",
    "comment": "\r\n     * Populates a Map using the supplied \u003ccode\u003eTransformer\u003c/code\u003e to transform the elements\r\n     * into keys, using the unaltered element as the value in the \u003ccode\u003eMap\u003c/code\u003e.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map the \u003ccode\u003eMap\u003c/code\u003e to populate.\r\n     * @param elements the \u003ccode\u003eIterable\u003c/code\u003e containing the input values for the map.\r\n     * @param keyTransformer the \u003ccode\u003eTransformer\u003c/code\u003e used to transform the element into a key value\r\n     * @throws NullPointerException if the map, elements or transformer are null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Populates a Map using the supplied \u003ccode\u003eTransformer\u003c/code\u003e to transform the elements into keys, using the unaltered element as the value in the \u003ccode\u003eMap\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1686,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the map, elements or transformer are null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1694,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.populateMap(org.apache.commons.collections4.MultiMap\u003cK, V\u003e, java.lang.Iterable\u003c? extends E\u003e, org.apache.commons.collections4.Transformer\u003cE, K\u003e, org.apache.commons.collections4.Transformer\u003cE, V\u003e)",
    "comment": "\r\n     * Populates a MultiMap using the supplied \u003ccode\u003eTransformer\u003c/code\u003es to transform the elements\r\n     * into keys and values.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param \u003cE\u003e  the type of object contained in the {@link Iterable}\r\n     * @param map the \u003ccode\u003eMultiMap\u003c/code\u003e to populate.\r\n     * @param elements the \u003ccode\u003eIterable\u003c/code\u003e containing the input values for the map.\r\n     * @param keyTransformer the \u003ccode\u003eTransformer\u003c/code\u003e used to transform the element into a key value\r\n     * @param valueTransformer the \u003ccode\u003eTransformer\u003c/code\u003e used to transform the element into a value\r\n     * @throws NullPointerException if the map, collection or transformers are null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Populates a MultiMap using the supplied \u003ccode\u003eTransformer\u003c/code\u003es to transform the elements into keys and values.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1741,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the map, collection or transformers are null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1751,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.getObject(java.util.Map\u003cK, V\u003e, K, V)",
    "comment": "\r\n     * Looks up the given key in the given map, converting null into the\r\n     * given default value.\r\n     *\r\n     * @param \u003cK\u003e  the key type\r\n     * @param \u003cV\u003e  the value type\r\n     * @param map  the map whose value to look up\r\n     * @param key  the key of the value to look up in that map\r\n     * @param defaultValue  what to return if the value is null\r\n     * @return  the value in the map, or defaultValue if the original value\r\n     *   is null or the map is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Looks up the given key in the given map, converting null into the given default value.",
        "tagType": "",
        "sentenceLocation": {
          "line": 357,
          "column": 8
        }
      },
      {
        "sentenceText": "@return  the value in the map, or defaultValue if the original value is null or the map is null",
        "tagType": "return",
        "sentenceLocation": {
          "line": 365,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.verbosePrint(java.io.PrintStream, java.lang.Object, java.util.Map\u003c?, ?\u003e)",
    "comment": "\r\n     * Prints the given map with nice line breaks.\r\n     * \u003cp\u003e\r\n     * This method prints a nicely formatted String describing the Map.\r\n     * Each map entry will be printed with key and value.\r\n     * When the value is a Map, recursive behaviour occurs.\r\n     * \u003cp\u003e\r\n     * This method is NOT thread-safe in any special way. You must manually\r\n     * synchronize on either this class or the stream as required.\r\n     *\r\n     * @param out  the stream to print to, must not be null\r\n     * @param label  The label to be used, may be \u003ccode\u003enull\u003c/code\u003e.\r\n     *  If \u003ccode\u003enull\u003c/code\u003e, the label is not output.\r\n     *  It typically represents the name of the property in a bean or similar.\r\n     * @param map  The map to print, may be \u003ccode\u003enull\u003c/code\u003e.\r\n     *  If \u003ccode\u003enull\u003c/code\u003e, the text \u0027null\u0027 is output.\r\n     * @throws NullPointerException if the stream is \u003ccode\u003enull\u003c/code\u003e\r\n     ",
    "sentences": [
      {
        "sentenceText": "Prints the given map with nice line breaks.",
        "tagType": "",
        "sentenceLocation": {
          "line": 906,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method prints a nicely formatted String describing the Map.",
        "tagType": "",
        "sentenceLocation": {
          "line": 907,
          "column": 8
        }
      },
      {
        "sentenceText": "Each map entry will be printed with key and value.",
        "tagType": "",
        "sentenceLocation": {
          "line": 909,
          "column": 8
        }
      },
      {
        "sentenceText": "When the value is a Map, recursive behaviour occurs.",
        "tagType": "",
        "sentenceLocation": {
          "line": 910,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method is NOT thread-safe in any special way.",
        "tagType": "",
        "sentenceLocation": {
          "line": 911,
          "column": 8
        }
      },
      {
        "sentenceText": "You must manually synchronize on either this class or the stream as required.",
        "tagType": "",
        "sentenceLocation": {
          "line": 912,
          "column": 59
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the stream is \u003ccode\u003enull\u003c/code\u003e",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 921,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.MapUtils.isNotEmpty(java.util.Map\u003c?, ?\u003e)",
    "comment": "\r\n     * Null-safe check if the specified map is not empty.\r\n     * \u003cp\u003e\r\n     * Null returns false.\r\n     *\r\n     * @param map  the map to check, may be null\r\n     * @return true if non-null and non-empty\r\n     * @since 3.2\r\n     ",
    "sentences": [
      {
        "sentenceText": "Null-safe check if the specified map is not empty.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1219,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Null returns false.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1220,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if non-null and non-empty",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1224,
          "column": 8
        }
      }
    ]
  }
]