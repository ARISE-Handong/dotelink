[
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.append(E...)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will first traverse\r\n     * the elements of the current iterable, followed by the provided\r\n     * elements.\r\n     *\r\n     * @param elements  the elements to append to the iterable\r\n     * @return a new iterable, combining this iterable with the elements\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will first traverse the elements of the current iterable, followed by the provided elements.",
        "tagType": "",
        "sentenceLocation": {
          "line": 154,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, combining this iterable with the elements",
        "tagType": "return",
        "sentenceLocation": {
          "line": 159,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.anyMatch(org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Checks if this iterable contains any element matching the provided predicate.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterable returns false.\r\n     *\r\n     * @param predicate  the predicate to use, may not be null\r\n     * @return true if at least one element contained in this iterable matches the predicate,\r\n     *   false otherwise\r\n     * @throws NullPointerException if predicate is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Checks if this iterable contains any element matching the provided predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 394,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterable returns false.",
        "tagType": "",
        "sentenceLocation": {
          "line": 395,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if at least one element contained in this iterable matches the predicate, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 399,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 401,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.of(T)",
    "comment": "\r\n     * Creates a new FluentIterable of the single provided element.\r\n     * \u003cp\u003e\r\n     * The returned iterable\u0027s iterator does not support {@code remove()}.\r\n     *\r\n     * @param \u003cT\u003e  the element type\r\n     * @param singleton  the singleton element\r\n     * @return a new FluentIterable containing the singleton\r\n     ",
    "sentences": [
      {
        "sentenceText": "Creates a new FluentIterable of the single provided element.",
        "tagType": "",
        "sentenceLocation": {
          "line": 86,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The returned iterable\u0027s iterator does not support {@code remove()}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 87,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new FluentIterable containing the singleton",
        "tagType": "return",
        "sentenceLocation": {
          "line": 92,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.toString()",
    "comment": " {@inheritDoc} ",
    "sentences": [
      {
        "sentenceText": "{@inheritDoc}",
        "tagType": "",
        "sentenceLocation": {
          "line": 498,
          "column": 6
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.of(java.lang.Iterable\u003cT\u003e)",
    "comment": "\r\n     * Construct a new FluentIterable from the provided iterable. If the\r\n     * iterable is already an instance of FluentIterable, the instance\r\n     * will be returned instead.\r\n     * \u003cp\u003e\r\n     * The returned iterable\u0027s iterator supports {@code remove()} when the\r\n     * corresponding input iterator supports it.\r\n     *\r\n     * @param \u003cT\u003e  the element type\r\n     * @param iterable  the iterable to wrap into a FluentIterable, may not be null\r\n     * @return a new FluentIterable wrapping the provided iterable\r\n     * @throws NullPointerException if iterable is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Construct a new FluentIterable from the provided iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 112,
          "column": 8
        }
      },
      {
        "sentenceText": "If the iterable is already an instance of FluentIterable, the instance will be returned instead.",
        "tagType": "",
        "sentenceLocation": {
          "line": 112,
          "column": 67
        }
      },
      {
        "sentenceText": "\u003cp\u003e The returned iterable\u0027s iterator supports {@code remove()} when the corresponding input iterator supports it.",
        "tagType": "",
        "sentenceLocation": {
          "line": 115,
          "column": 67
        }
      },
      {
        "sentenceText": "@return a new FluentIterable wrapping the provided iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 121,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterable is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 122,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.FluentIterable(java.lang.Iterable\u003cE\u003e)",
    "comment": "\r\n     * Create a new FluentIterable by wrapping the provided iterable.\r\n     * @param iterable  the iterable to wrap\r\n     ",
    "sentences": [
      {
        "sentenceText": "Create a new FluentIterable by wrapping the provided iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 143,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.asEnumeration()",
    "comment": "\r\n     * Returns an Enumeration that will enumerate all elements contained\r\n     * in this iterable.\r\n     *\r\n     * @return an Enumeration over the elements of this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an Enumeration that will enumerate all elements contained in this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 369,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an Enumeration over the elements of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 372,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.allMatch(org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Checks if all elements contained in this iterable are matching the\r\n     * provided predicate.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterable returns true.\r\n     *\r\n     * @param predicate  the predicate to use, may not be null\r\n     * @return true if all elements contained in this iterable match the predicate,\r\n     *   false otherwise\r\n     * @throws NullPointerException if predicate is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Checks if all elements contained in this iterable are matching the provided predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 379,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterable returns true.",
        "tagType": "",
        "sentenceLocation": {
          "line": 381,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if all elements contained in this iterable match the predicate, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 385,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 387,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.size()",
    "comment": "\r\n     * Returns the number of elements that are contained in this iterable.\r\n     * In order to determine the size, an iterator needs to be traversed.\r\n     *\r\n     * @return the size of this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns the number of elements that are contained in this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 451,
          "column": 8
        }
      },
      {
        "sentenceText": "In order to determine the size, an iterator needs to be traversed.",
        "tagType": "",
        "sentenceLocation": {
          "line": 452,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the size of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 454,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.unique()",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will return a unique view\r\n     * of this iterable.\r\n     *\r\n     * @return a new iterable, providing a unique view of this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will return a unique view of this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 314,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a unique view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 317,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.collate(java.lang.Iterable\u003c? extends E\u003e, java.util.Comparator\u003c? super E\u003e)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will traverse the\r\n     * elements of the current and provided iterable according to the\r\n     * ordering defined by an comparator.\r\n     * \u003cp\u003e\r\n     * Example: descending order\r\n     * \u003cul\u003e\r\n     *   \u003cli\u003ethis contains elements [7, 5, 3, 1]\r\n     *   \u003cli\u003eother contains elements [8, 6, 4, 2]\r\n     * \u003c/ul\u003e\r\n     * \u003cp\u003e\r\n     * The returned iterable will traverse the elements in the following\r\n     * order: [8, 7, 6, 5, 4, 3, 2, 1]\r\n     *\r\n     * @param comparator  the comparator to define an ordering, may be null,\r\n     *   in which case natural ordering will be used\r\n     * @param other  the other iterable to collate, may not be null\r\n     * @return a new iterable, collating this iterable with the other in natural order\r\n     * @throws NullPointerException if other is null\r\n     * @see org.apache.commons.collections4.iterators.CollatingIterator\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will traverse the elements of the current and provided iterable according to the ordering defined by an comparator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 201,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Example: descending order \u003cul\u003e \u003cli\u003ethis contains elements [7, 5, 3, 1] \u003cli\u003eother contains elements [8, 6, 4, 2] \u003c/ul\u003e \u003cp\u003e The returned iterable will traverse the elements in the following order: [8, 7, 6, 5, 4, 3, 2, 1]",
        "tagType": "",
        "sentenceLocation": {
          "line": 204,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, collating this iterable with the other in natural order",
        "tagType": "return",
        "sentenceLocation": {
          "line": 217,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if other is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 218,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.loop()",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will loop infinitely\r\n     * over the elements from this iterable.\r\n     *\r\n     * @return a new iterable, providing a looping view of this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will loop infinitely over the elements from this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 268,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a looping view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 271,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.unmodifiable()",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will return an unmodifiable\r\n     * view of this iterable.\r\n     *\r\n     * @return a new iterable, providing an unmodifiable view of this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will return an unmodifiable view of this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 324,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing an unmodifiable view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 327,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.collate(java.lang.Iterable\u003c? extends E\u003e)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will traverse the\r\n     * elements of the current and provided iterable in natural order.\r\n     * \u003cp\u003e\r\n     * Example: natural ordering\r\n     * \u003cul\u003e\r\n     *   \u003cli\u003ethis contains elements [1, 3, 5, 7]\r\n     *   \u003cli\u003eother contains elements [2, 4, 6, 8]\r\n     * \u003c/ul\u003e\r\n     * \u003cp\u003e\r\n     * The returned iterable will traverse the elements in the following\r\n     * order: [1, 2, 3, 4, 5, 6, 7, 8]\r\n     *\r\n     * @param other  the other iterable to collate, may not be null\r\n     * @return a new iterable, collating this iterable with the other in natural order\r\n     * @throws NullPointerException if other is null\r\n     * @see org.apache.commons.collections4.iterators.CollatingIterator\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will traverse the elements of the current and provided iterable in natural order.",
        "tagType": "",
        "sentenceLocation": {
          "line": 179,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Example: natural ordering \u003cul\u003e \u003cli\u003ethis contains elements [1, 3, 5, 7] \u003cli\u003eother contains elements [2, 4, 6, 8] \u003c/ul\u003e \u003cp\u003e The returned iterable will traverse the elements in the following order: [1, 2, 3, 4, 5, 6, 7, 8]",
        "tagType": "",
        "sentenceLocation": {
          "line": 181,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, collating this iterable with the other in natural order",
        "tagType": "return",
        "sentenceLocation": {
          "line": 192,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if other is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 193,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.get(int)",
    "comment": "\r\n     * Returns the element at the provided position in this iterable.\r\n     * In order to return the element, an iterator needs to be traversed\r\n     * up to the requested position.\r\n     *\r\n     * @param position  the position of the element to return\r\n     * @return the element\r\n     * @throws IndexOutOfBoundsException if the provided position is outside the\r\n     *   valid range of this iterable: [0, size)\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns the element at the provided position in this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 437,
          "column": 8
        }
      },
      {
        "sentenceText": "In order to return the element, an iterator needs to be traversed up to the requested position.",
        "tagType": "",
        "sentenceLocation": {
          "line": 438,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the element",
        "tagType": "return",
        "sentenceLocation": {
          "line": 442,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if the provided position is outside the valid range of this iterable: [0, size)",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 443,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.eval()",
    "comment": "\r\n     * This method fully traverses an iterator of this iterable and returns\r\n     * a new iterable with the same contents, but without any reference\r\n     * to the originating iterables and/or iterators.\r\n     * \u003cp\u003e\r\n     * Calling this method is equivalent to:\r\n     * \u003cpre\u003e\r\n     *   FluentIterable\u0026lt;E\u0026gt; someIterable \u003d ...;\r\n     *   FluentIterable.of(someIterable.toList());\r\n     * \u003c/pre\u003e\r\n     *\r\n     * @return a new iterable with the same contents as this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "This method fully traverses an iterator of this iterable and returns a new iterable with the same contents, but without any reference to the originating iterables and/or iterators.",
        "tagType": "",
        "sentenceLocation": {
          "line": 227,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Calling this method is equivalent to: \u003cpre\u003e FluentIterable\u0026lt;E\u0026gt; someIterable \u003d ...; FluentIterable.of(someIterable.toList()); \u003c/pre\u003e",
        "tagType": "",
        "sentenceLocation": {
          "line": 230,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable with the same contents as this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 237,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.empty()",
    "comment": "\r\n     * Creates a new empty FluentIterable.\r\n     *\r\n     * @param \u003cT\u003e  the element type\r\n     * @return a new empty FluentIterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Creates a new empty FluentIterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 76,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new empty FluentIterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 79,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.append(java.lang.Iterable\u003c? extends E\u003e)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will first traverse\r\n     * the elements of the current iterable, followed by the elements\r\n     * of the provided iterable.\r\n     *\r\n     * @param other  the other iterable to combine, may not be null\r\n     * @return a new iterable, combining this iterable with other\r\n     * @throws NullPointerException if other is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will first traverse the elements of the current iterable, followed by the elements of the provided iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 166,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, combining this iterable with other",
        "tagType": "return",
        "sentenceLocation": {
          "line": 171,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if other is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 172,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.zip(java.lang.Iterable\u003c? extends E\u003e)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will traverse\r\n     * the elements of this iterable and the other iterable in\r\n     * alternating order.\r\n     *\r\n     * @param other  the other iterable to interleave, may not be null\r\n     * @return a new iterable, interleaving this iterable with others\r\n     * @throws NullPointerException if other is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will traverse the elements of this iterable and the other iterable in alternating order.",
        "tagType": "",
        "sentenceLocation": {
          "line": 334,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, interleaving this iterable with others",
        "tagType": "return",
        "sentenceLocation": {
          "line": 339,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if other is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 340,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.FluentIterable()",
    "comment": "\r\n     * Package-private constructor, used by IterableUtils.\r\n     ",
    "sentences": [
      {
        "sentenceText": "Package-private constructor, used by IterableUtils.",
        "tagType": "",
        "sentenceLocation": {
          "line": 136,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.forEach(org.apache.commons.collections4.Closure\u003c? super E\u003e)",
    "comment": "\r\n     * Applies the closure to all elements contained in this iterable.\r\n     *\r\n     * @param closure  the closure to apply to each element, may not be null\r\n     * @throws NullPointerException if closure is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Applies the closure to all elements contained in this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 427,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if closure is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 430,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.copyInto(java.util.Collection\u003c? super E\u003e)",
    "comment": "\r\n     * Traverses an iterator of this iterable and adds all elements\r\n     * to the provided collection.\r\n     *\r\n     * @param collection  the collection to add the elements\r\n     * @throws NullPointerException if collection is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Traverses an iterator of this iterable and adds all elements to the provided collection.",
        "tagType": "",
        "sentenceLocation": {
          "line": 461,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if collection is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 465,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.toArray(java.lang.Class\u003cE\u003e)",
    "comment": "\r\n     * Returns an array containing all elements of this iterable by traversing\r\n     * its iterator.\r\n     *\r\n     * @param arrayClass  the class of array to create\r\n     * @return an array of the iterable contents\r\n     * @throws ArrayStoreException if arrayClass is invalid\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an array containing all elements of this iterable by traversing its iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 475,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an array of the iterable contents",
        "tagType": "return",
        "sentenceLocation": {
          "line": 479,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws ArrayStoreException if arrayClass is invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 480,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.filter(org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will only return\r\n     * elements from this iterable matching the provided predicate.\r\n     *\r\n     * @param predicate  the predicate used to filter elements\r\n     * @return a new iterable, providing a filtered view of this iterable\r\n     * @throws NullPointerException if predicate is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will only return elements from this iterable matching the provided predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 244,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a filtered view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 248,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 249,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.skip(long)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will skip the first\r\n     * N elements from this iterable.\r\n     *\r\n     * @param elementsToSkip  the number of elements to skip\r\n     * @return a new iterable, providing a view of this iterable by skipping\r\n     *   the first N elements\r\n     * @throws IllegalArgumentException if elementsToSkip is negative\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will skip the first N elements from this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 288,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a view of this iterable by skipping the first N elements",
        "tagType": "return",
        "sentenceLocation": {
          "line": 292,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if elementsToSkip is negative",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 294,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.contains(java.lang.Object)",
    "comment": "\r\n     * Checks if the object is contained in this iterable.\r\n     *\r\n     * @param object  the object to check\r\n     * @return true if the object is contained in this iterable, false otherwise\r\n     ",
    "sentences": [
      {
        "sentenceText": "Checks if the object is contained in this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 417,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if the object is contained in this iterable, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 420,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.toList()",
    "comment": "\r\n     * Returns a mutable list containing all elements of this iterable\r\n     * by traversing its iterator.\r\n     * \u003cp\u003e\r\n     * The returned list is guaranteed to be mutable.\r\n     *\r\n     * @return a list of the iterable contents\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a mutable list containing all elements of this iterable by traversing its iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 487,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The returned list is guaranteed to be mutable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 489,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list of the iterable contents",
        "tagType": "return",
        "sentenceLocation": {
          "line": 492,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.zip(java.lang.Iterable\u003c? extends E\u003e...)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will traverse\r\n     * the elements of this iterable and the other iterables in\r\n     * alternating order.\r\n     *\r\n     * @param others  the iterables to interleave, may not be null\r\n     * @return a new iterable, interleaving this iterable with others\r\n     * @throws NullPointerException if either of the provided iterables is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will traverse the elements of this iterable and the other iterables in alternating order.",
        "tagType": "",
        "sentenceLocation": {
          "line": 347,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, interleaving this iterable with others",
        "tagType": "return",
        "sentenceLocation": {
          "line": 352,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either of the provided iterables is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 353,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.isEmpty()",
    "comment": "\r\n     * Checks if this iterable is empty.\r\n     *\r\n     * @return true if this iterable does not contain any elements, false otherwise\r\n     ",
    "sentences": [
      {
        "sentenceText": "Checks if this iterable is empty.",
        "tagType": "",
        "sentenceLocation": {
          "line": 408,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if this iterable does not contain any elements, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 410,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.reverse()",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will traverse the\r\n     * elements from this iterable in reverse order.\r\n     *\r\n     * @return a new iterable, providing a reversed view of this iterable\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will traverse the elements from this iterable in reverse order.",
        "tagType": "",
        "sentenceLocation": {
          "line": 278,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a reversed view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 281,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.transform(org.apache.commons.collections4.Transformer\u003c? super E, ? extends O\u003e)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will return all elements\r\n     * of this iterable transformed by the provided transformer.\r\n     *\r\n     * @param \u003cO\u003e  the output element type\r\n     * @param transformer  the transformer applied to each element\r\n     * @return a new iterable, providing a transformed view of this iterable\r\n     * @throws NullPointerException if transformer is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will return all elements of this iterable transformed by the provided transformer.",
        "tagType": "",
        "sentenceLocation": {
          "line": 301,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a transformed view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 306,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if transformer is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 307,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.of(T...)",
    "comment": "\r\n     * Creates a new FluentIterable from the provided elements.\r\n     * \u003cp\u003e\r\n     * The returned iterable\u0027s iterator does not support {@code remove()}.\r\n     *\r\n     * @param \u003cT\u003e  the element type\r\n     * @param elements  the elements to be contained in the FluentIterable\r\n     * @return a new FluentIterable containing the provided elements\r\n     ",
    "sentences": [
      {
        "sentenceText": "Creates a new FluentIterable from the provided elements.",
        "tagType": "",
        "sentenceLocation": {
          "line": 99,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The returned iterable\u0027s iterator does not support {@code remove()}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 100,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new FluentIterable containing the provided elements",
        "tagType": "return",
        "sentenceLocation": {
          "line": 105,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.limit(long)",
    "comment": "\r\n     * Returns a new FluentIterable whose iterator will return at most\r\n     * the provided maximum number of elements from this iterable.\r\n     *\r\n     * @param maxSize  the maximum number of elements\r\n     * @return a new iterable, providing a bounded view of this iterable\r\n     * @throws IllegalArgumentException if maxSize is negative\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a new FluentIterable whose iterator will return at most the provided maximum number of elements from this iterable.",
        "tagType": "",
        "sentenceLocation": {
          "line": 256,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterable, providing a bounded view of this iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 260,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if maxSize is negative",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 261,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.FluentIterable.iterator()",
    "comment": " {@inheritDoc} ",
    "sentences": [
      {
        "sentenceText": "{@inheritDoc}",
        "tagType": "",
        "sentenceLocation": {
          "line": 362,
          "column": 6
        }
      }
    ]
  }
]