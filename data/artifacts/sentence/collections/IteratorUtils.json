[
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.asEnumeration(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an enumeration that wraps an iterator.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, may not be null\r\n     * @return a new enumeration\r\n     * @throws NullPointerException if iterator is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an enumeration that wraps an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 983,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new enumeration",
        "tagType": "return",
        "sentenceLocation": {
          "line": 987,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 988,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.getIterator(java.lang.Object)",
    "comment": "\r\n     * Gets a suitable Iterator for the given object.\r\n     * \u003cp\u003e\r\n     * This method can handle objects as follows\r\n     * \u003cul\u003e\r\n     * \u003cli\u003enull - empty iterator\r\n     * \u003cli\u003eIterator - returned directly\r\n     * \u003cli\u003eEnumeration - wrapped\r\n     * \u003cli\u003eCollection - iterator from collection returned\r\n     * \u003cli\u003eMap - values iterator returned\r\n     * \u003cli\u003eDictionary - values (elements) enumeration returned as iterator\r\n     * \u003cli\u003earray - iterator over array returned\r\n     * \u003cli\u003eobject with iterator() public method accessed by reflection\r\n     * \u003cli\u003eobject - singleton iterator\r\n     * \u003cli\u003eNodeList - iterator over the list\r\n     * \u003cli\u003eNode - iterator over the child nodes\r\n     * \u003c/ul\u003e\r\n     *\r\n     * @param obj  the object to convert to an iterator\r\n     * @return a suitable iterator, never null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a suitable Iterator for the given object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1134,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method can handle objects as follows \u003cul\u003e \u003cli\u003enull - empty iterator \u003cli\u003eIterator - returned directly \u003cli\u003eEnumeration - wrapped \u003cli\u003eCollection - iterator from collection returned \u003cli\u003eMap - values iterator returned \u003cli\u003eDictionary - values (elements) enumeration returned as iterator \u003cli\u003earray - iterator over array returned \u003cli\u003eobject with iterator() public method accessed by reflection \u003cli\u003eobject - singleton iterator \u003cli\u003eNodeList - iterator over the list \u003cli\u003eNode - iterator over the child nodes \u003c/ul\u003e",
        "tagType": "",
        "sentenceLocation": {
          "line": 1135,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a suitable iterator, never null",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1152,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.unmodifiableIterator(java.util.Iterator\u003cE\u003e)",
    "comment": "\r\n     * Gets an immutable version of an {@link Iterator}. The returned object\r\n     * will always throw an {@link UnsupportedOperationException} for\r\n     * the {@link Iterator#remove} method.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to make immutable\r\n     * @return an immutable version of the iterator\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an immutable version of an {@link Iterator}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 465,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned object will always throw an {@link UnsupportedOperationException} for the {@link Iterator#remove} method.",
        "tagType": "",
        "sentenceLocation": {
          "line": 465,
          "column": 58
        }
      },
      {
        "sentenceText": "@return an immutable version of the iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 471,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.zippingIterator(java.util.Iterator\u003c? extends E\u003e, java.util.Iterator\u003c? extends E\u003e, java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Returns an iterator that interleaves elements from the decorated iterators.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param a  the first iterator to interleave\r\n     * @param b  the second iterator to interleave\r\n     * @param c  the third iterator to interleave\r\n     * @return an iterator, interleaving the decorated iterators\r\n     * @throws NullPointerException if any iterator is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an iterator that interleaves elements from the decorated iterators.",
        "tagType": "",
        "sentenceLocation": {
          "line": 915,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator, interleaving the decorated iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 921,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if any iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 922,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.indexOf(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Returns the index of the first element in the specified iterator that\r\n     * matches the given predicate.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns -1.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to search, may be null\r\n     * @param predicate  the predicate to use, may not be null\r\n     * @return the index of the first element which matches the predicate or -1 if none matches\r\n     * @throws NullPointerException if predicate is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns the index of the first element in the specified iterator that matches the given predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1287,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns -1.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1289,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the index of the first element which matches the predicate or -1 if none matches",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1295,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1296,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toString(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Transformer\u003c? super E, java.lang.String\u003e, java.lang.String, java.lang.String, java.lang.String)",
    "comment": "\r\n     * Returns a string representation of the elements of the specified iterator.\r\n     * \u003cp\u003e\r\n     * The string representation consists of a list of the iterator\u0027s elements,\r\n     * enclosed by the provided {@code prefix} and {@code suffix}. Adjacent elements\r\n     * are separated by the provided {@code delimiter}. Elements are converted to\r\n     * strings as by using the provided {@code transformer}.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to convert to a string, may be null\r\n     * @param transformer  the transformer used to get a string representation of an element\r\n     * @param delimiter  the string to delimit elements\r\n     * @param prefix  the prefix, prepended to the string representation\r\n     * @param suffix  the suffix, appended to the string representation\r\n     * @return a string representation of {@code iterator}\r\n     * @throws NullPointerException if either transformer, delimiter, prefix or suffix is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a string representation of the elements of the specified iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1496,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The string representation consists of a list of the iterator\u0027s elements, enclosed by the provided {@code prefix} and {@code suffix}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1497,
          "column": 8
        }
      },
      {
        "sentenceText": "Adjacent elements are separated by the provided {@code delimiter}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1499,
          "column": 68
        }
      },
      {
        "sentenceText": "Elements are converted to strings as by using the provided {@code transformer}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1500,
          "column": 57
        }
      },
      {
        "sentenceText": "@return a string representation of {@code iterator}",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1509,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either transformer, delimiter, prefix or suffix is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1510,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayIterator(E[], int, int)",
    "comment": "\r\n     * Gets an iterator over part of an object array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @param end  the index to finish iterating at\r\n     * @return an iterator over part of the array\r\n     * @throws IndexOutOfBoundsException if array bounds are invalid\r\n     * @throws IllegalArgumentException if end is before start\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator over part of an object array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 292,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 298,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if array bounds are invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 299,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if end is before start",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 300,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 301,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.get(java.util.Iterator\u003cE\u003e, int)",
    "comment": "\r\n     * Returns the \u003ccode\u003eindex\u003c/code\u003e-th value in {@link Iterator}, throwing\r\n     * \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element.\r\n     * \u003cp\u003e\r\n     * The Iterator is advanced to \u003ccode\u003eindex\u003c/code\u003e (or to the end, if\r\n     * \u003ccode\u003eindex\u003c/code\u003e exceeds the number of entries) as a side effect of this method.\r\n     *\r\n     * @param \u003cE\u003e the type of object in the {@link Iterator}\r\n     * @param iterator  the iterator to get a value from\r\n     * @param index  the index to get\r\n     * @return the object at the specified index\r\n     * @throws IndexOutOfBoundsException if the index is invalid\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns the \u003ccode\u003eindex\u003c/code\u003e-th value in {@link Iterator}, throwing \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1389,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The Iterator is advanced to \u003ccode\u003eindex\u003c/code\u003e (or to the end, if \u003ccode\u003eindex\u003c/code\u003e exceeds the number of entries) as a side effect of this method.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1391,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the object at the specified index",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1398,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if the index is invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1399,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayListIterator(java.lang.Object, int)",
    "comment": "\r\n     * Gets a list iterator over the end part of an object or primitive array.\r\n     * \u003cp\u003e\r\n     * This method will handle primitive arrays as well as object arrays.\r\n     * The primitives will be wrapped in the appropriate wrapper class.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @return a list iterator over part of the array\r\n     * @throws IllegalArgumentException if the array is not an array\r\n     * @throws IndexOutOfBoundsException if start is less than zero\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator over the end part of an object or primitive array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 370,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method will handle primitive arrays as well as object arrays.",
        "tagType": "",
        "sentenceLocation": {
          "line": 371,
          "column": 8
        }
      },
      {
        "sentenceText": "The primitives will be wrapped in the appropriate wrapper class.",
        "tagType": "",
        "sentenceLocation": {
          "line": 373,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 378,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the array is not an array",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 379,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if start is less than zero",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 380,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 381,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.objectGraphIterator(E, org.apache.commons.collections4.Transformer\u003c? super E, ? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that operates over an object graph.\r\n     * \u003cp\u003e\r\n     * This iterator can extract multiple objects from a complex tree-like object graph.\r\n     * The iteration starts from a single root object.\r\n     * It uses a \u003ccode\u003eTransformer\u003c/code\u003e to extract the iterators and elements.\r\n     * Its main benefit is that no intermediate \u003ccode\u003eList\u003c/code\u003e is created.\r\n     * \u003cp\u003e\r\n     * For example, consider an object graph:\r\n     * \u003cpre\u003e\r\n     *                 |- Branch -- Leaf\r\n     *                 |         \\- Leaf\r\n     *         |- Tree |         /- Leaf\r\n     *         |       |- Branch -- Leaf\r\n     *  Forest |                 \\- Leaf\r\n     *         |       |- Branch -- Leaf\r\n     *         |       |         \\- Leaf\r\n     *         |- Tree |         /- Leaf\r\n     *                 |- Branch -- Leaf\r\n     *                 |- Branch -- Leaf\u003c/pre\u003e\r\n     * The following \u003ccode\u003eTransformer\u003c/code\u003e, used in this class, will extract all\r\n     * the Leaf objects without creating a combined intermediate list:\r\n     * \u003cpre\u003e\r\n     * public Object transform(Object input) {\r\n     *   if (input instanceof Forest) {\r\n     *     return ((Forest) input).treeIterator();\r\n     *   }\r\n     *   if (input instanceof Tree) {\r\n     *     return ((Tree) input).branchIterator();\r\n     *   }\r\n     *   if (input instanceof Branch) {\r\n     *     return ((Branch) input).leafIterator();\r\n     *   }\r\n     *   if (input instanceof Leaf) {\r\n     *     return input;\r\n     *   }\r\n     *   throw new ClassCastException();\r\n     * }\u003c/pre\u003e\r\n     * \u003cp\u003e\r\n     * Internally, iteration starts from the root object. When next is called,\r\n     * the transformer is called to examine the object. The transformer will return\r\n     * either an iterator or an object. If the object is an Iterator, the next element\r\n     * from that iterator is obtained and the process repeats. If the element is an object\r\n     * it is returned.\r\n     * \u003cp\u003e\r\n     * Under many circumstances, linking Iterators together in this manner is\r\n     * more efficient (and convenient) than using nested for loops to extract a list.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param root  the root object to start iterating from, null results in an empty iterator\r\n     * @param transformer  the transformer to use, see above, null uses no effect transformer\r\n     * @return a new object graph iterator\r\n     * @since 3.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that operates over an object graph.",
        "tagType": "",
        "sentenceLocation": {
          "line": 632,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator can extract multiple objects from a complex tree-like object graph.",
        "tagType": "",
        "sentenceLocation": {
          "line": 633,
          "column": 8
        }
      },
      {
        "sentenceText": "The iteration starts from a single root object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 635,
          "column": 8
        }
      },
      {
        "sentenceText": "It uses a \u003ccode\u003eTransformer\u003c/code\u003e to extract the iterators and elements.",
        "tagType": "",
        "sentenceLocation": {
          "line": 636,
          "column": 8
        }
      },
      {
        "sentenceText": "Its main benefit is that no intermediate \u003ccode\u003eList\u003c/code\u003e is created.",
        "tagType": "",
        "sentenceLocation": {
          "line": 637,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e For example, consider an object graph: \u003cpre\u003e |- Branch -- Leaf |         \\- Leaf |- Tree |         /- Leaf |       |- Branch -- Leaf Forest |                 \\- Leaf |       |- Branch -- Leaf |       |         \\- Leaf |- Tree |         /- Leaf |- Branch -- Leaf |- Branch -- Leaf\u003c/pre\u003e The following \u003ccode\u003eTransformer\u003c/code\u003e, used in this class, will extract all the Leaf objects without creating a combined intermediate list: \u003cpre\u003e public Object transform(Object input) { if (input instanceof Forest) { return ((Forest) input).treeIterator(); } if (input instanceof Tree) { return ((Tree) input).branchIterator(); } if (input instanceof Branch) { return ((Branch) input).leafIterator(); } if (input instanceof Leaf) { return input; } throw new ClassCastException(); }\u003c/pre\u003e \u003cp\u003e Internally, iteration starts from the root object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 638,
          "column": 8
        }
      },
      {
        "sentenceText": "When next is called, the transformer is called to examine the object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 670,
          "column": 59
        }
      },
      {
        "sentenceText": "The transformer will return either an iterator or an object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 671,
          "column": 57
        }
      },
      {
        "sentenceText": "If the object is an Iterator, the next element from that iterator is obtained and the process repeats.",
        "tagType": "",
        "sentenceLocation": {
          "line": 672,
          "column": 41
        }
      },
      {
        "sentenceText": "If the element is an object it is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 673,
          "column": 64
        }
      },
      {
        "sentenceText": "\u003cp\u003e Under many circumstances, linking Iterators together in this manner is more efficient (and convenient) than using nested for loops to extract a list.",
        "tagType": "",
        "sentenceLocation": {
          "line": 675,
          "column": 64
        }
      },
      {
        "sentenceText": "@return a new object graph iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 682,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.emptyOrderedMapIterator()",
    "comment": "\r\n     * Gets an empty ordered map iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid map iterator object that will iterate\r\n     * over nothing.\r\n     *\r\n     * @param \u003cK\u003e the key type\r\n     * @param \u003cV\u003e the value type\r\n     * @return a map iterator over nothing\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an empty ordered map iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 184,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid map iterator object that will iterate over nothing.",
        "tagType": "",
        "sentenceLocation": {
          "line": 185,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a map iterator over nothing",
        "tagType": "return",
        "sentenceLocation": {
          "line": 191,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.zippingIterator(java.util.Iterator\u003c? extends E\u003e...)",
    "comment": "\r\n     * Returns an iterator that interleaves elements from the decorated iterators.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterators  the array of iterators to interleave\r\n     * @return an iterator, interleaving the decorated iterators\r\n     * @throws NullPointerException if any iterator is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an iterator that interleaves elements from the decorated iterators.",
        "tagType": "",
        "sentenceLocation": {
          "line": 932,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator, interleaving the decorated iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 936,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if any iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 937,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.singletonIterator(E)",
    "comment": "\r\n     * Gets a singleton iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid iterator object that will iterate over\r\n     * the specified object.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param object  the single object over which to iterate\r\n     * @return a singleton iterator over the object\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a singleton iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 200,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid iterator object that will iterate over the specified object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 201,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a singleton iterator over the object",
        "tagType": "return",
        "sentenceLocation": {
          "line": 207,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toArray(java.util.Iterator\u003c?\u003e)",
    "comment": "\r\n     * Gets an array based on an iterator.\r\n     * \u003cp\u003e\r\n     * As the wrapped Iterator is traversed, an ArrayList of its values is\r\n     * created. At the end, this is converted to an array.\r\n     *\r\n     * @param iterator  the iterator to use, not null\r\n     * @return an array of the iterator contents\r\n     * @throws NullPointerException if iterator parameter is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an array based on an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1048,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e As the wrapped Iterator is traversed, an ArrayList of its values is created.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1049,
          "column": 8
        }
      },
      {
        "sentenceText": "At the end, this is converted to an array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1051,
          "column": 17
        }
      },
      {
        "sentenceText": "@return an array of the iterator contents",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1054,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1055,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.collatedIterator(java.util.Comparator\u003c? super E\u003e, java.util.Iterator\u003c? extends E\u003e, java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that provides an ordered iteration over the elements\r\n     * contained in a collection of ordered {@link Iterator}s.\r\n     * \u003cp\u003e\r\n     * Given two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\r\n     * the {@link Iterator#next()} method will return the lesser of\r\n     * \u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.\r\n     * \u003cp\u003e\r\n     * The comparator is optional. If null is specified then natural order is used.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param comparator  the comparator to use, may be null for natural order\r\n     * @param iterator1  the first iterators to use, not null\r\n     * @param iterator2  the first iterators to use, not null\r\n     * @return a combination iterator over the iterators\r\n     * @throws NullPointerException if either iterator is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that provides an ordered iteration over the elements contained in a collection of ordered {@link Iterator}s.",
        "tagType": "",
        "sentenceLocation": {
          "line": 555,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Given two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e, the {@link Iterator#next()} method will return the lesser of \u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e.",
        "tagType": "",
        "sentenceLocation": {
          "line": 557,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The comparator is optional.",
        "tagType": "",
        "sentenceLocation": {
          "line": 561,
          "column": 8
        }
      },
      {
        "sentenceText": "If null is specified then natural order is used.",
        "tagType": "",
        "sentenceLocation": {
          "line": 562,
          "column": 36
        }
      },
      {
        "sentenceText": "@return a combination iterator over the iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 568,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 569,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.contains(java.util.Iterator\u003cE\u003e, java.lang.Object)",
    "comment": "\r\n     * Checks if the object is contained in the given iterator.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns false.\r\n     *\r\n     * @param \u003cE\u003e the type of object the {@link Iterator} contains\r\n     * @param iterator  the iterator to check, may be null\r\n     * @param object  the object to check\r\n     * @return true if the object is contained in the iterator, false otherwise\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Checks if the object is contained in the given iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1374,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns false.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1375,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if the object is contained in the iterator, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1381,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.first(java.util.Iterator\u003cE\u003e)",
    "comment": "\r\n     * Shortcut for {@code get(iterator, 0)}.\r\n     * \u003cp\u003e\r\n     * Returns the \u003ccode\u003efirst\u003c/code\u003e value in {@link Iterator}, throwing\r\n     * \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element.\r\n     * \u003c/p\u003e\r\n     * \u003cp\u003e\r\n     * The Iterator is advanced to \u003ccode\u003e0\u003c/code\u003e (or to the end, if\r\n     * \u003ccode\u003e0\u003c/code\u003e exceeds the number of entries) as a side effect of this method.\r\n     * \u003c/p\u003e\r\n     * @param \u003cE\u003e the type of object in the {@link Iterator}\r\n     * @param iterator the iterator to get a value from\r\n     * @return the first object\r\n     * @throws IndexOutOfBoundsException if the request is invalid\r\n     * @since 4.2\r\n     ",
    "sentences": [
      {
        "sentenceText": "Shortcut for {@code get(iterator, 0)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1416,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Returns the \u003ccode\u003efirst\u003c/code\u003e value in {@link Iterator}, throwing \u003ccode\u003eIndexOutOfBoundsException\u003c/code\u003e if there is no such element.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1417,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003c/p\u003e \u003cp\u003e The Iterator is advanced to \u003ccode\u003e0\u003c/code\u003e (or to the end, if \u003ccode\u003e0\u003c/code\u003e exceeds the number of entries) as a side effect of this method.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1420,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003c/p\u003e",
        "tagType": "",
        "sentenceLocation": {
          "line": 1424,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the first object",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1427,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if the request is invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1428,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.unmodifiableMapIterator(org.apache.commons.collections4.MapIterator\u003cK, V\u003e)",
    "comment": "\r\n     * Gets an immutable version of a {@link MapIterator}. The returned object\r\n     * will always throw an {@link UnsupportedOperationException} for\r\n     * the {@link Iterator#remove}, {@link MapIterator#setValue(Object)} methods.\r\n     *\r\n     * @param \u003cK\u003e the key type\r\n     * @param \u003cV\u003e the value type\r\n     * @param mapIterator  the iterator to make immutable\r\n     * @return an immutable version of the iterator\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an immutable version of a {@link MapIterator}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 492,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned object will always throw an {@link UnsupportedOperationException} for the {@link Iterator#remove}, {@link MapIterator#setValue(Object)} methods.",
        "tagType": "",
        "sentenceLocation": {
          "line": 492,
          "column": 60
        }
      },
      {
        "sentenceText": "@return an immutable version of the iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 499,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.filteredIterator(java.util.Iterator\u003c? extends E\u003e, org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Gets an iterator that filters another iterator.\r\n     * \u003cp\u003e\r\n     * The returned iterator will only return objects that match the specified\r\n     * filtering predicate.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, not null\r\n     * @param predicate  the predicate to use as a filter, not null\r\n     * @return a new filtered iterator\r\n     * @throws NullPointerException if either parameter is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that filters another iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 720,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The returned iterator will only return objects that match the specified filtering predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 721,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new filtered iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 728,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 729,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.asIterator(java.util.Enumeration\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that provides an iterator view of the given enumeration.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param enumeration  the enumeration to use, may not be null\r\n     * @return a new iterator\r\n     * @throws NullPointerException if enumeration is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that provides an iterator view of the given enumeration.",
        "tagType": "",
        "sentenceLocation": {
          "line": 947,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 951,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if enumeration is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 952,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.emptyIterator()",
    "comment": "\r\n     * Gets an empty iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid iterator object that will iterate over nothing.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @return an iterator over nothing\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an empty iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 132,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid iterator object that will iterate over nothing.",
        "tagType": "",
        "sentenceLocation": {
          "line": 133,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over nothing",
        "tagType": "return",
        "sentenceLocation": {
          "line": 137,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayIterator(java.lang.Object, int)",
    "comment": "\r\n     * Gets an iterator over the end part of an object or primitive array.\r\n     * \u003cp\u003e\r\n     * This method will handle primitive arrays as well as object arrays.\r\n     * The primitives will be wrapped in the appropriate wrapper class.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @return an iterator over part of the array\r\n     * @throws IllegalArgumentException if the array is not an array\r\n     * @throws IndexOutOfBoundsException if start is less than zero or greater\r\n     *   than the length of the array\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator over the end part of an object or primitive array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 273,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method will handle primitive arrays as well as object arrays.",
        "tagType": "",
        "sentenceLocation": {
          "line": 274,
          "column": 8
        }
      },
      {
        "sentenceText": "The primitives will be wrapped in the appropriate wrapper class.",
        "tagType": "",
        "sentenceLocation": {
          "line": 276,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 281,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the array is not an array",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 282,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if start is less than zero or greater than the length of the array",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 283,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 285,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.boundedIterator(java.util.Iterator\u003c? extends E\u003e, long)",
    "comment": "\r\n     * Decorates the specified iterator to return at most the given number\r\n     * of elements.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to decorate\r\n     * @param max  the maximum number of elements returned by this iterator\r\n     * @return a new bounded iterator\r\n     * @throws NullPointerException if the iterator is null\r\n     * @throws IllegalArgumentException if max is negative\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Decorates the specified iterator to return at most the given number of elements.",
        "tagType": "",
        "sentenceLocation": {
          "line": 425,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new bounded iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 431,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 432,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if max is negative",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 433,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.matchesAny(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Answers true if a predicate is true for any element of the iterator.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns false.\r\n     *\r\n     * @param \u003cE\u003e the type of object the {@link Iterator} contains\r\n     * @param iterator  the {@link Iterator} to use, may be null\r\n     * @param predicate  the predicate to use, may not be null\r\n     * @return true if any element of the collection matches the predicate, false otherwise\r\n     * @throws NullPointerException if predicate is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Answers true if a predicate is true for any element of the iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1316,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns false.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1317,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if any element of the collection matches the predicate, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1323,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1324,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.forEach(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Closure\u003c? super E\u003e)",
    "comment": "\r\n     * Applies the closure to each element of the provided iterator.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, may be null\r\n     * @param closure  the closure to apply to each element, may not be null\r\n     * @throws NullPointerException if closure is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Applies the closure to each element of the provided iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1208,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if closure is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1213,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.nodeListIterator(org.w3c.dom.NodeList)",
    "comment": "\r\n     * Gets an {@link Iterator} that wraps the specified {@link NodeList}.\r\n     * The returned {@link Iterator} can be used for a single iteration.\r\n     *\r\n     * @param nodeList  the node list to use, may not be null\r\n     * @return a new, single use {@link Iterator}\r\n     * @throws NullPointerException if nodeList is null\r\n     * @since 4.0\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an {@link Iterator} that wraps the specified {@link NodeList}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 809,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned {@link Iterator} can be used for a single iteration.",
        "tagType": "",
        "sentenceLocation": {
          "line": 810,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new, single use {@link Iterator}",
        "tagType": "return",
        "sentenceLocation": {
          "line": 813,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if nodeList is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 814,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.loopingIterator(java.util.Collection\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that loops continuously over the supplied collection.\r\n     * \u003cp\u003e\r\n     * The iterator will only stop looping if the remove method is called\r\n     * enough times to empty the collection, or if the collection is empty\r\n     * to start with.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param coll  the collection to iterate over, not null\r\n     * @return a new looping iterator\r\n     * @throws NullPointerException if the collection is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that loops continuously over the supplied collection.",
        "tagType": "",
        "sentenceLocation": {
          "line": 769,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The iterator will only stop looping if the remove method is called enough times to empty the collection, or if the collection is empty to start with.",
        "tagType": "",
        "sentenceLocation": {
          "line": 770,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new looping iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 777,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the collection is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 778,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.matchesAll(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Answers true if a predicate is true for every element of an iterator.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns true.\r\n     *\r\n     * @param \u003cE\u003e the type of object the {@link Iterator} contains\r\n     * @param iterator  the {@link Iterator} to use, may be null\r\n     * @param predicate  the predicate to use, may not be null\r\n     * @return true if every element of the collection matches the predicate or if the\r\n     *   collection is empty, false otherwise\r\n     * @throws NullPointerException if predicate is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Answers true if a predicate is true for every element of an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1332,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns true.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1333,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if every element of the collection matches the predicate or if the collection is empty, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1339,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1341,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayIterator(java.lang.Object, int, int)",
    "comment": "\r\n     * Gets an iterator over part of an object or primitive array.\r\n     * \u003cp\u003e\r\n     * This method will handle primitive arrays as well as object arrays.\r\n     * The primitives will be wrapped in the appropriate wrapper class.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @param end  the index to finish iterating at\r\n     * @return an iterator over part of the array\r\n     * @throws IllegalArgumentException if the array is not an array or end is before start\r\n     * @throws IndexOutOfBoundsException if array bounds are invalid\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator over part of an object or primitive array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 308,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method will handle primitive arrays as well as object arrays.",
        "tagType": "",
        "sentenceLocation": {
          "line": 309,
          "column": 8
        }
      },
      {
        "sentenceText": "The primitives will be wrapped in the appropriate wrapper class.",
        "tagType": "",
        "sentenceLocation": {
          "line": 311,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 317,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the array is not an array or end is before start",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 318,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if array bounds are invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 319,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 320,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.forEachButLast(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Closure\u003c? super E\u003e)",
    "comment": "\r\n     * Executes the given closure on each but the last element in the iterator.\r\n     * \u003cp\u003e\r\n     * If the input iterator is null no change is made.\r\n     *\r\n     * @param \u003cE\u003e the type of object the {@link Iterator} contains\r\n     * @param iterator  the iterator to get the input from, may be null\r\n     * @param closure  the closure to perform, may not be null\r\n     * @return the last element in the iterator, or null if iterator is null or empty\r\n     * @throws NullPointerException if closure is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Executes the given closure on each but the last element in the iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1230,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e If the input iterator is null no change is made.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1231,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the last element in the iterator, or null if iterator is null or empty",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1237,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if closure is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1238,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.boundedIterator(java.util.Iterator\u003c? extends E\u003e, long, long)",
    "comment": "\r\n     * Decorates the specified iterator to return at most the given number\r\n     * of elements, skipping all elements until the iterator reaches the\r\n     * position at {@code offset}.\r\n     * \u003cp\u003e\r\n     * The iterator is immediately advanced until it reaches the position at\r\n     * {@code offset}, incurring O(n) time.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to decorate\r\n     * @param offset  the index of the first element of the decorated iterator to return\r\n     * @param max  the maximum number of elements returned by this iterator\r\n     * @return a new bounded iterator\r\n     * @throws NullPointerException if the iterator is null\r\n     * @throws IllegalArgumentException if either offset or max is negative\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Decorates the specified iterator to return at most the given number of elements, skipping all elements until the iterator reaches the position at {@code offset}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 441,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The iterator is immediately advanced until it reaches the position at {@code offset}, incurring O(n) time.",
        "tagType": "",
        "sentenceLocation": {
          "line": 444,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new bounded iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 452,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 453,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if either offset or max is negative",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 454,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.filteredListIterator(java.util.ListIterator\u003c? extends E\u003e, org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Gets a list iterator that filters another list iterator.\r\n     * \u003cp\u003e\r\n     * The returned iterator will only return objects that match the specified\r\n     * filtering predicate.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param listIterator  the list iterator to use, not null\r\n     * @param predicate  the predicate to use as a filter, not null\r\n     * @return a new filtered iterator\r\n     * @throws NullPointerException if either parameter is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator that filters another list iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 743,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The returned iterator will only return objects that match the specified filtering predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 744,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new filtered iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 751,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 752,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toString(java.util.Iterator\u003cE\u003e)",
    "comment": "\r\n     * Returns a string representation of the elements of the specified iterator.\r\n     * \u003cp\u003e\r\n     * The string representation consists of a list of the iterator\u0027s elements,\r\n     * enclosed in square brackets ({@code \"[]\"}). Adjacent elements are separated\r\n     * by the characters {@code \", \"} (a comma followed by a space). Elements are\r\n     * converted to strings as by {@code String.valueOf(Object)}.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to convert to a string, may be null\r\n     * @return a string representation of {@code iterator}\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a string representation of the elements of the specified iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1456,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The string representation consists of a list of the iterator\u0027s elements, enclosed in square brackets ({@code \"[]\"}).",
        "tagType": "",
        "sentenceLocation": {
          "line": 1457,
          "column": 8
        }
      },
      {
        "sentenceText": "Adjacent elements are separated by the characters {@code \", \"} (a comma followed by a space).",
        "tagType": "",
        "sentenceLocation": {
          "line": 1459,
          "column": 52
        }
      },
      {
        "sentenceText": "Elements are converted to strings as by {@code String.valueOf(Object)}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1460,
          "column": 70
        }
      },
      {
        "sentenceText": "@return a string representation of {@code iterator}",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1465,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayListIterator(java.lang.Object)",
    "comment": "\r\n     * Gets a list iterator over an object or primitive array.\r\n     * \u003cp\u003e\r\n     * This method will handle primitive arrays as well as object arrays.\r\n     * The primitives will be wrapped in the appropriate wrapper class.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @return a list iterator over the array\r\n     * @throws IllegalArgumentException if the array is not an array\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator over an object or primitive array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 340,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method will handle primitive arrays as well as object arrays.",
        "tagType": "",
        "sentenceLocation": {
          "line": 341,
          "column": 8
        }
      },
      {
        "sentenceText": "The primitives will be wrapped in the appropriate wrapper class.",
        "tagType": "",
        "sentenceLocation": {
          "line": 343,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 347,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the array is not an array",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 348,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 349,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.chainedIterator(java.util.Iterator\u003c? extends E\u003e...)",
    "comment": "\r\n     * Gets an iterator that iterates through an array of {@link Iterator}s\r\n     * one after another.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterators  the iterators to use, not null or empty or contain nulls\r\n     * @return a combination iterator over the iterators\r\n     * @throws NullPointerException if iterators array is null or contains a null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that iterates through an array of {@link Iterator}s one after another.",
        "tagType": "",
        "sentenceLocation": {
          "line": 526,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a combination iterator over the iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 531,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterators array is null or contains a null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 532,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.pushbackIterator(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that supports pushback of elements.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to decorate, not null\r\n     * @return a pushback iterator\r\n     * @throws NullPointerException if the iterator is null\r\n     * @since 4.0\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that supports pushback of elements.",
        "tagType": "",
        "sentenceLocation": {
          "line": 868,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a pushback iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 872,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 873,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.chainedIterator(java.util.Collection\u003cjava.util.Iterator\u003c? extends E\u003e\u003e)",
    "comment": "\r\n     * Gets an iterator that iterates through a collections of {@link Iterator}s\r\n     * one after another.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterators  the iterators to use, not null or empty or contain nulls\r\n     * @return a combination iterator over the iterators\r\n     * @throws NullPointerException if iterators collection is null or contains a null\r\n     * @throws ClassCastException if the iterators collection contains the wrong object type\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that iterates through a collections of {@link Iterator}s one after another.",
        "tagType": "",
        "sentenceLocation": {
          "line": 539,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a combination iterator over the iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 544,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterators collection is null or contains a null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 545,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws ClassCastException if the iterators collection contains the wrong object type",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 546,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayIterator(E...)",
    "comment": "\r\n     * Gets an iterator over an object array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @return an iterator over the array\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator over an object array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 230,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 234,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 235,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toArray(java.util.Iterator\u003c? extends E\u003e, java.lang.Class\u003cE\u003e)",
    "comment": "\r\n     * Gets an array based on an iterator.\r\n     * \u003cp\u003e\r\n     * As the wrapped Iterator is traversed, an ArrayList of its values is\r\n     * created. At the end, this is converted to an array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, not null\r\n     * @param arrayClass  the class of array to create\r\n     * @return an array of the iterator contents\r\n     * @throws NullPointerException if iterator parameter or arrayClass is null\r\n     * @throws ArrayStoreException if the arrayClass is invalid\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an array based on an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1066,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e As the wrapped Iterator is traversed, an ArrayList of its values is created.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1067,
          "column": 8
        }
      },
      {
        "sentenceText": "At the end, this is converted to an array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1069,
          "column": 17
        }
      },
      {
        "sentenceText": "@return an array of the iterator contents",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1074,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator parameter or arrayClass is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1075,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws ArrayStoreException if the arrayClass is invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1076,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayListIterator(E...)",
    "comment": "\r\n     * Gets a list iterator over an object array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @return a list iterator over the array\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator over an object array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 328,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 332,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 333,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.chainedIterator(java.util.Iterator\u003c? extends E\u003e, java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that iterates through two {@link Iterator}s\r\n     * one after another.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator1  the first iterator to use, not null\r\n     * @param iterator2  the second iterator to use, not null\r\n     * @return a combination iterator over the iterators\r\n     * @throws NullPointerException if either iterator is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that iterates through two {@link Iterator}s one after another.",
        "tagType": "",
        "sentenceLocation": {
          "line": 509,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a combination iterator over the iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 515,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 516,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.unmodifiableListIterator(java.util.ListIterator\u003cE\u003e)",
    "comment": "\r\n     * Gets an immutable version of a {@link ListIterator}. The returned object\r\n     * will always throw an {@link UnsupportedOperationException} for\r\n     * the {@link Iterator#remove}, {@link ListIterator#add} and\r\n     * {@link ListIterator#set} methods.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param listIterator  the iterator to make immutable\r\n     * @return an immutable version of the iterator\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an immutable version of a {@link ListIterator}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 478,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned object will always throw an {@link UnsupportedOperationException} for the {@link Iterator#remove}, {@link ListIterator#add} and {@link ListIterator#set} methods.",
        "tagType": "",
        "sentenceLocation": {
          "line": 478,
          "column": 61
        }
      },
      {
        "sentenceText": "@return an immutable version of the iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 485,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.peekingIterator(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterator that supports one-element lookahead.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to decorate, not null\r\n     * @return a peeking iterator\r\n     * @throws NullPointerException if the iterator is null\r\n     * @since 4.0\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that supports one-element lookahead.",
        "tagType": "",
        "sentenceLocation": {
          "line": 852,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a peeking iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 856,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 857,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.transformedIterator(java.util.Iterator\u003c? extends I\u003e, org.apache.commons.collections4.Transformer\u003c? super I, ? extends O\u003e)",
    "comment": "\r\n     * Gets an iterator that transforms the elements of another iterator.\r\n     * \u003cp\u003e\r\n     * The transformation occurs during the next() method and the underlying\r\n     * iterator is unaffected by the transformation.\r\n     *\r\n     * @param \u003cI\u003e the input type\r\n     * @param \u003cO\u003e the output type\r\n     * @param iterator  the iterator to use, not null\r\n     * @param transform  the transform to use, not null\r\n     * @return a new transforming iterator\r\n     * @throws NullPointerException if either parameter is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that transforms the elements of another iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 693,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The transformation occurs during the next() method and the underlying iterator is unaffected by the transformation.",
        "tagType": "",
        "sentenceLocation": {
          "line": 694,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new transforming iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 702,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if either parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 703,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayListIterator(E[], int)",
    "comment": "\r\n     * Gets a list iterator over the end part of an object array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @return a list iterator over part of the array\r\n     * @throws IndexOutOfBoundsException if start is less than zero\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator over the end part of an object array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 356,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 361,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if start is less than zero",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 362,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 363,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.asMultipleUseIterable(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an iterable that wraps an iterator.  The returned iterable can be\r\n     * used for multiple iterations.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, may not be null\r\n     * @return a new, multiple use iterable\r\n     * @throws NullPointerException if iterator is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterable that wraps an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1014,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned iterable can be used for multiple iterations.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1014,
          "column": 50
        }
      },
      {
        "sentenceText": "@return a new, multiple use iterable",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1019,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1020,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.loopingListIterator(java.util.List\u003cE\u003e)",
    "comment": "\r\n     * Gets an iterator that loops continuously over the supplied list.\r\n     * \u003cp\u003e\r\n     * The iterator will only stop looping if the remove method is called\r\n     * enough times to empty the list, or if the list is empty to start with.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param list  the list to iterate over, not null\r\n     * @return a new looping iterator\r\n     * @throws NullPointerException if the list is null\r\n     * @since 3.2\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that loops continuously over the supplied list.",
        "tagType": "",
        "sentenceLocation": {
          "line": 788,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The iterator will only stop looping if the remove method is called enough times to empty the list, or if the list is empty to start with.",
        "tagType": "",
        "sentenceLocation": {
          "line": 789,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new looping iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 795,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the list is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 796,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toList(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets a list based on an iterator.\r\n     * \u003cp\u003e\r\n     * As the wrapped Iterator is traversed, an ArrayList of its values is\r\n     * created. At the end, the list is returned.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, not null\r\n     * @return a list of the iterator contents\r\n     * @throws NullPointerException if iterator parameter is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list based on an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1092,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e As the wrapped Iterator is traversed, an ArrayList of its values is created.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1093,
          "column": 8
        }
      },
      {
        "sentenceText": "At the end, the list is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1095,
          "column": 17
        }
      },
      {
        "sentenceText": "@return a list of the iterator contents",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1099,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1100,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toString(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Transformer\u003c? super E, java.lang.String\u003e)",
    "comment": "\r\n     * Returns a string representation of the elements of the specified iterator.\r\n     * \u003cp\u003e\r\n     * The string representation consists of a list of the iterable\u0027s elements,\r\n     * enclosed in square brackets ({@code \"[]\"}). Adjacent elements are separated\r\n     * by the characters {@code \", \"} (a comma followed by a space). Elements are\r\n     * converted to strings as by using the provided {@code transformer}.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to convert to a string, may be null\r\n     * @param transformer  the transformer used to get a string representation of an element\r\n     * @return a string representation of {@code iterator}\r\n     * @throws NullPointerException if {@code transformer} is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns a string representation of the elements of the specified iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1475,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The string representation consists of a list of the iterable\u0027s elements, enclosed in square brackets ({@code \"[]\"}).",
        "tagType": "",
        "sentenceLocation": {
          "line": 1476,
          "column": 8
        }
      },
      {
        "sentenceText": "Adjacent elements are separated by the characters {@code \", \"} (a comma followed by a space).",
        "tagType": "",
        "sentenceLocation": {
          "line": 1478,
          "column": 52
        }
      },
      {
        "sentenceText": "Elements are converted to strings as by using the provided {@code transformer}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1479,
          "column": 70
        }
      },
      {
        "sentenceText": "@return a string representation of {@code iterator}",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1485,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if {@code transformer} is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1486,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.emptyListIterator()",
    "comment": "\r\n     * Gets an empty list iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid list iterator object that will iterate\r\n     * over nothing.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @return a list iterator over nothing\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an empty list iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 144,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid list iterator object that will iterate over nothing.",
        "tagType": "",
        "sentenceLocation": {
          "line": 145,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over nothing",
        "tagType": "return",
        "sentenceLocation": {
          "line": 150,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayIterator(E[], int)",
    "comment": "\r\n     * Gets an iterator over the end part of an object array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @return an iterator over part of the array\r\n     * @throws IndexOutOfBoundsException if start is less than zero or greater\r\n     *   than the length of the array\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator over the end part of an object array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 258,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 263,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if start is less than zero or greater than the length of the array",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 264,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 266,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayIterator(java.lang.Object)",
    "comment": "\r\n     * Gets an iterator over an object or primitive array.\r\n     * \u003cp\u003e\r\n     * This method will handle primitive arrays as well as object arrays.\r\n     * The primitives will be wrapped in the appropriate wrapper class.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @return an iterator over the array\r\n     * @throws IllegalArgumentException if the array is not an array\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator over an object or primitive array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 242,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method will handle primitive arrays as well as object arrays.",
        "tagType": "",
        "sentenceLocation": {
          "line": 243,
          "column": 8
        }
      },
      {
        "sentenceText": "The primitives will be wrapped in the appropriate wrapper class.",
        "tagType": "",
        "sentenceLocation": {
          "line": 245,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator over the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 249,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the array is not an array",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 250,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 251,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.nodeListIterator(org.w3c.dom.Node)",
    "comment": "\r\n     * Gets an {@link Iterator} that wraps the specified node\u0027s childNodes.\r\n     * The returned {@link Iterator} can be used for a single iteration.\r\n     * \u003cp\u003e\r\n     * Convenience method, allows easy iteration over NodeLists:\r\n     * \u003cpre\u003e\r\n     *   Iterator\u0026lt;Node\u0026gt; iterator \u003d IteratorUtils.nodeListIterator(node);\r\n     *   for(Node childNode : IteratorUtils.asIterable(iterator)) {\r\n     *     ...\r\n     *   }\r\n     * \u003c/pre\u003e\r\n     *\r\n     * @param node  the node to use, may not be null\r\n     * @return a new, single use {@link Iterator}\r\n     * @throws NullPointerException if node is null\r\n     * @since 4.0\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an {@link Iterator} that wraps the specified node\u0027s childNodes.",
        "tagType": "",
        "sentenceLocation": {
          "line": 825,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned {@link Iterator} can be used for a single iteration.",
        "tagType": "",
        "sentenceLocation": {
          "line": 826,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Convenience method, allows easy iteration over NodeLists: \u003cpre\u003e Iterator\u0026lt;Node\u0026gt; iterator \u003d IteratorUtils.nodeListIterator(node); for(Node childNode : IteratorUtils.asIterable(iterator)) { ...",
        "tagType": "",
        "sentenceLocation": {
          "line": 827,
          "column": 8
        }
      },
      {
        "sentenceText": "} \u003c/pre\u003e",
        "tagType": "",
        "sentenceLocation": {
          "line": 833,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new, single use {@link Iterator}",
        "tagType": "return",
        "sentenceLocation": {
          "line": 837,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if node is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 838,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.asIterable(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets an {@link Iterable} that wraps an iterator.  The returned {@link Iterable} can be\r\n     * used for a single iteration.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, may not be null\r\n     * @return a new, single use {@link Iterable}\r\n     * @throws NullPointerException if iterator is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an {@link Iterable} that wraps an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 998,
          "column": 8
        }
      },
      {
        "sentenceText": "The returned {@link Iterable} can be used for a single iteration.",
        "tagType": "",
        "sentenceLocation": {
          "line": 998,
          "column": 58
        }
      },
      {
        "sentenceText": "@return a new, single use {@link Iterable}",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1003,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1004,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.emptyMapIterator()",
    "comment": "\r\n     * Gets an empty map iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid map iterator object that will iterate\r\n     * over nothing.\r\n     *\r\n     * @param \u003cK\u003e the key type\r\n     * @param \u003cV\u003e the value type\r\n     * @return a map iterator over nothing\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an empty map iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 170,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid map iterator object that will iterate over nothing.",
        "tagType": "",
        "sentenceLocation": {
          "line": 171,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a map iterator over nothing",
        "tagType": "return",
        "sentenceLocation": {
          "line": 177,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.singletonListIterator(E)",
    "comment": "\r\n     * Gets a singleton list iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid list iterator object that will iterate over\r\n     * the specified object.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param object  the single object over which to iterate\r\n     * @return a singleton list iterator over the object\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a singleton list iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 214,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid list iterator object that will iterate over the specified object.",
        "tagType": "",
        "sentenceLocation": {
          "line": 215,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a singleton list iterator over the object",
        "tagType": "return",
        "sentenceLocation": {
          "line": 221,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toListIterator(java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Gets a list iterator based on a simple iterator.\r\n     * \u003cp\u003e\r\n     * As the wrapped Iterator is traversed, a LinkedList of its values is\r\n     * cached, permitting all required operations of ListIterator.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, may not be null\r\n     * @return a new iterator\r\n     * @throws NullPointerException if iterator parameter is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator based on a simple iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1030,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e As the wrapped Iterator is traversed, a LinkedList of its values is cached, permitting all required operations of ListIterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1031,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1037,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1038,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.asIterator(java.util.Enumeration\u003c? extends E\u003e, java.util.Collection\u003c? super E\u003e)",
    "comment": "\r\n     * Gets an iterator that provides an iterator view of the given enumeration\r\n     * that will remove elements from the specified collection.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param enumeration  the enumeration to use, may not be null\r\n     * @param removeCollection  the collection to remove elements from, may not be null\r\n     * @return a new iterator\r\n     * @throws NullPointerException if enumeration or removeCollection is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that provides an iterator view of the given enumeration that will remove elements from the specified collection.",
        "tagType": "",
        "sentenceLocation": {
          "line": 962,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 968,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if enumeration or removeCollection is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 969,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.size(java.util.Iterator\u003c?\u003e)",
    "comment": "\r\n     * Returns the number of elements contained in the given iterator.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns {@code 0}.\r\n     *\r\n     * @param iterator  the iterator to check, may be null\r\n     * @return the number of elements contained in the iterator\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns the number of elements contained in the given iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1436,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns {@code 0}.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1437,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the number of elements contained in the iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1441,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.find(java.util.Iterator\u003cE\u003e, org.apache.commons.collections4.Predicate\u003c? super E\u003e)",
    "comment": "\r\n     * Finds the first element in the given iterator which matches the given predicate.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns null.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to search, may be null\r\n     * @param predicate  the predicate to use, may not be null\r\n     * @return the first element of the iterator which matches the predicate or null if none could be found\r\n     * @throws NullPointerException if predicate is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Finds the first element in the given iterator which matches the given predicate.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1259,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns null.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1260,
          "column": 8
        }
      },
      {
        "sentenceText": "@return the first element of the iterator which matches the predicate or null if none could be found",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1266,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if predicate is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1267,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.emptyOrderedIterator()",
    "comment": "\r\n     * Gets an empty ordered iterator.\r\n     * \u003cp\u003e\r\n     * This iterator is a valid iterator object that will iterate\r\n     * over nothing.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @return an ordered iterator over nothing\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an empty ordered iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 157,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This iterator is a valid iterator object that will iterate over nothing.",
        "tagType": "",
        "sentenceLocation": {
          "line": 158,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an ordered iterator over nothing",
        "tagType": "return",
        "sentenceLocation": {
          "line": 163,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.toList(java.util.Iterator\u003c? extends E\u003e, int)",
    "comment": "\r\n     * Gets a list based on an iterator.\r\n     * \u003cp\u003e\r\n     * As the wrapped Iterator is traversed, an ArrayList of its values is\r\n     * created. At the end, the list is returned.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to use, not null\r\n     * @param estimatedSize  the initial size of the ArrayList\r\n     * @return a list of the iterator contents\r\n     * @throws NullPointerException if iterator parameter is null\r\n     * @throws IllegalArgumentException if the size is less than 1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list based on an iterator.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1107,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e As the wrapped Iterator is traversed, an ArrayList of its values is created.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1108,
          "column": 8
        }
      },
      {
        "sentenceText": "At the end, the list is returned.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1110,
          "column": 17
        }
      },
      {
        "sentenceText": "@return a list of the iterator contents",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1115,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterator parameter is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1116,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the size is less than 1",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 1117,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.collatedIterator(java.util.Comparator\u003c? super E\u003e, java.util.Collection\u003cjava.util.Iterator\u003c? extends E\u003e\u003e)",
    "comment": "\r\n     * Gets an iterator that provides an ordered iteration over the elements\r\n     * contained in a collection of {@link Iterator}s.\r\n     * \u003cp\u003e\r\n     * Given two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\r\n     * the {@link Iterator#next()} method will return the lesser of\r\n     * \u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e and so on.\r\n     * \u003cp\u003e\r\n     * The comparator is optional. If null is specified then natural order is used.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param comparator  the comparator to use, may be null for natural order\r\n     * @param iterators  the iterators to use, not null or empty or contain nulls\r\n     * @return a combination iterator over the iterators\r\n     * @throws NullPointerException if iterators collection is null or contains a null\r\n     * @throws ClassCastException if the iterators collection contains the wrong object type\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that provides an ordered iteration over the elements contained in a collection of {@link Iterator}s.",
        "tagType": "",
        "sentenceLocation": {
          "line": 605,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Given two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e, the {@link Iterator#next()} method will return the lesser of \u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e and so on.",
        "tagType": "",
        "sentenceLocation": {
          "line": 607,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The comparator is optional.",
        "tagType": "",
        "sentenceLocation": {
          "line": 611,
          "column": 8
        }
      },
      {
        "sentenceText": "If null is specified then natural order is used.",
        "tagType": "",
        "sentenceLocation": {
          "line": 612,
          "column": 36
        }
      },
      {
        "sentenceText": "@return a combination iterator over the iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 617,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterators collection is null or contains a null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 618,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws ClassCastException if the iterators collection contains the wrong object type",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 619,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.skippingIterator(java.util.Iterator\u003cE\u003e, long)",
    "comment": "\r\n     * Decorates the specified iterator to skip the first N elements.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param iterator  the iterator to decorate\r\n     * @param offset  the first number of elements to skip\r\n     * @return a new skipping iterator\r\n     * @throws NullPointerException if the iterator is null\r\n     * @throws IllegalArgumentException if offset is negative\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Decorates the specified iterator to skip the first N elements.",
        "tagType": "",
        "sentenceLocation": {
          "line": 883,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a new skipping iterator",
        "tagType": "return",
        "sentenceLocation": {
          "line": 888,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if the iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 889,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if offset is negative",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 890,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.zippingIterator(java.util.Iterator\u003c? extends E\u003e, java.util.Iterator\u003c? extends E\u003e)",
    "comment": "\r\n     * Returns an iterator that interleaves elements from the decorated iterators.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param a  the first iterator to interleave\r\n     * @param b  the second iterator to interleave\r\n     * @return an iterator, interleaving the decorated iterators\r\n     * @throws NullPointerException if any iterator is null\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Returns an iterator that interleaves elements from the decorated iterators.",
        "tagType": "",
        "sentenceLocation": {
          "line": 900,
          "column": 8
        }
      },
      {
        "sentenceText": "@return an iterator, interleaving the decorated iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 905,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if any iterator is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 906,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.collatedIterator(java.util.Comparator\u003c? super E\u003e, java.util.Iterator\u003c? extends E\u003e...)",
    "comment": "\r\n     * Gets an iterator that provides an ordered iteration over the elements\r\n     * contained in an array of {@link Iterator}s.\r\n     * \u003cp\u003e\r\n     * Given two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e,\r\n     * the {@link Iterator#next()} method will return the lesser of\r\n     * \u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e and so on.\r\n     * \u003cp\u003e\r\n     * The comparator is optional. If null is specified then natural order is used.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param comparator  the comparator to use, may be null for natural order\r\n     * @param iterators  the iterators to use, not null or empty or contain nulls\r\n     * @return a combination iterator over the iterators\r\n     * @throws NullPointerException if iterators array is null or contains a null value\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets an iterator that provides an ordered iteration over the elements contained in an array of {@link Iterator}s.",
        "tagType": "",
        "sentenceLocation": {
          "line": 581,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e Given two ordered {@link Iterator}s \u003ccode\u003eA\u003c/code\u003e and \u003ccode\u003eB\u003c/code\u003e, the {@link Iterator#next()} method will return the lesser of \u003ccode\u003eA.next()\u003c/code\u003e and \u003ccode\u003eB.next()\u003c/code\u003e and so on.",
        "tagType": "",
        "sentenceLocation": {
          "line": 583,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e The comparator is optional.",
        "tagType": "",
        "sentenceLocation": {
          "line": 587,
          "column": 8
        }
      },
      {
        "sentenceText": "If null is specified then natural order is used.",
        "tagType": "",
        "sentenceLocation": {
          "line": 588,
          "column": 36
        }
      },
      {
        "sentenceText": "@return a combination iterator over the iterators",
        "tagType": "return",
        "sentenceLocation": {
          "line": 593,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if iterators array is null or contains a null value",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 594,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayListIterator(java.lang.Object, int, int)",
    "comment": "\r\n     * Gets a list iterator over part of an object or primitive array.\r\n     * \u003cp\u003e\r\n     * This method will handle primitive arrays as well as object arrays.\r\n     * The primitives will be wrapped in the appropriate wrapper class.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @param end  the index to finish iterating at\r\n     * @return a list iterator over part of the array\r\n     * @throws IllegalArgumentException if the array is not an array or end is before start\r\n     * @throws IndexOutOfBoundsException if array bounds are invalid\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator over part of an object or primitive array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 404,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e This method will handle primitive arrays as well as object arrays.",
        "tagType": "",
        "sentenceLocation": {
          "line": 405,
          "column": 8
        }
      },
      {
        "sentenceText": "The primitives will be wrapped in the appropriate wrapper class.",
        "tagType": "",
        "sentenceLocation": {
          "line": 407,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 413,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if the array is not an array or end is before start",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 414,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if array bounds are invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 415,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 416,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.arrayListIterator(E[], int, int)",
    "comment": "\r\n     * Gets a list iterator over part of an object array.\r\n     *\r\n     * @param \u003cE\u003e the element type\r\n     * @param array  the array over which to iterate\r\n     * @param start  the index to start iterating at\r\n     * @param end  the index to finish iterating at\r\n     * @return a list iterator over part of the array\r\n     * @throws IndexOutOfBoundsException if array bounds are invalid\r\n     * @throws IllegalArgumentException if end is before start\r\n     * @throws NullPointerException if array is null\r\n     ",
    "sentences": [
      {
        "sentenceText": "Gets a list iterator over part of an object array.",
        "tagType": "",
        "sentenceLocation": {
          "line": 388,
          "column": 8
        }
      },
      {
        "sentenceText": "@return a list iterator over part of the array",
        "tagType": "return",
        "sentenceLocation": {
          "line": 394,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IndexOutOfBoundsException if array bounds are invalid",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 395,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws IllegalArgumentException if end is before start",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 396,
          "column": 8
        }
      },
      {
        "sentenceText": "@throws NullPointerException if array is null",
        "tagType": "throws",
        "sentenceLocation": {
          "line": 397,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.IteratorUtils()",
    "comment": "\r\n     * IteratorUtils is not normally instantiated.\r\n     ",
    "sentences": [
      {
        "sentenceText": "IteratorUtils is not normally instantiated.",
        "tagType": "",
        "sentenceLocation": {
          "line": 125,
          "column": 8
        }
      }
    ]
  },
  {
    "productionMethod": "org.apache.commons.collections4.IteratorUtils.isEmpty(java.util.Iterator\u003c?\u003e)",
    "comment": "\r\n     * Checks if the given iterator is empty.\r\n     * \u003cp\u003e\r\n     * A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns true.\r\n     *\r\n     * @param iterator  the {@link Iterator} to use, may be null\r\n     * @return true if the iterator is exhausted or null, false otherwise\r\n     * @since 4.1\r\n     ",
    "sentences": [
      {
        "sentenceText": "Checks if the given iterator is empty.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1361,
          "column": 8
        }
      },
      {
        "sentenceText": "\u003cp\u003e A \u003ccode\u003enull\u003c/code\u003e or empty iterator returns true.",
        "tagType": "",
        "sentenceLocation": {
          "line": 1362,
          "column": 8
        }
      },
      {
        "sentenceText": "@return true if the iterator is exhausted or null, false otherwise",
        "tagType": "return",
        "sentenceLocation": {
          "line": 1366,
          "column": 8
        }
      }
    ]
  }
]